{
  "requesterUsername": "SlowBubble",
  "requesterAvatarIconUri": {
    "$mid": 1,
    "path": "/u/14957720",
    "scheme": "https",
    "authority": "avatars.githubusercontent.com",
    "query": "v=4"
  },
  "responderUsername": "GitHub Copilot",
  "responderAvatarIconUri": {
    "id": "copilot"
  },
  "initialLocation": "editing-session",
  "requests": [
    {
      "requestId": "request_b1b0b49c-e647-4587-beff-dd3c090d7744",
      "message": {
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 90
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 91
            },
            "text": "annotate numFirstServeUnforcedErrorsByReturner and  numSecondServeUnforcedErrorsByReturner",
            "kind": "text"
          }
        ],
        "text": "annotate numFirstServeUnforcedErrorsByReturner and  numSecondServeUnforcedErrorsByReturner"
      },
      "variableData": {
        "variables": [
          {
            "value": {
              "$mid": 1,
              "fsPath": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
              "external": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
              "path": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
              "scheme": "file"
            },
            "id": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
            "name": "rally_context.ts",
            "isFile": true,
            "isDynamic": true
          }
        ]
      },
      "response": [
        {
          "value": "Let me help you modify the code to annotate these additional statistics.\n\n### [rally_context.ts](file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts)\n\nWe need to update the `annotateMatchStat` function to track unforced errors by returners for both first and second serves.\n\n```typescript\n",
          "supportThemeIcons": false,
          "supportHtml": false
        }
      ],
      "responseId": "response_bee4ea29-d0c4-41bf-8a1a-3ce6d16ad1b9",
      "isHidden": false,
      "isCanceled": true,
      "agent": {
        "extensionId": {
          "value": "GitHub.copilot-chat",
          "_lower": "github.copilot-chat"
        },
        "publisherDisplayName": "GitHub",
        "extensionPublisherId": "GitHub",
        "extensionDisplayName": "GitHub Copilot Chat",
        "id": "github.copilot.editingSession",
        "description": "Edit files in your workspace",
        "metadata": {
          "themeIcon": {
            "id": "copilot"
          },
          "hasFollowups": false,
          "supportIssueReporting": false,
          "supportsSlowVariables": true
        },
        "name": "GitHubCopilot",
        "fullName": "GitHub Copilot",
        "isDefault": true,
        "locations": [
          "editing-session"
        ],
        "slashCommands": [],
        "disambiguation": []
      },
      "workingSet": [
        {
          "$mid": 1,
          "fsPath": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
          "external": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
          "path": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
          "scheme": "file"
        },
        {
          "$mid": 1,
          "fsPath": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
          "external": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
          "path": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
          "scheme": "file"
        }
      ],
      "contentReferences": [
        {
          "kind": "reference",
          "reference": {
            "$mid": 1,
            "fsPath": "/Users/kris/code/match-grader/.github/copilot-instructions.md",
            "external": "file:///Users/kris/code/match-grader/.github/copilot-instructions.md",
            "path": "/Users/kris/code/match-grader/.github/copilot-instructions.md",
            "scheme": "file"
          }
        }
      ],
      "codeCitations": [],
      "timestamp": 1736805514075
    },
    {
      "requestId": "request_81bfb760-1ea1-4705-9858-a218af098203",
      "message": {
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 90
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 91
            },
            "text": "annotate numFirstServeUnforcedErrorsByReturner and  numSecondServeUnforcedErrorsByReturner",
            "kind": "text"
          }
        ],
        "text": "annotate numFirstServeUnforcedErrorsByReturner and  numSecondServeUnforcedErrorsByReturner"
      },
      "variableData": {
        "variables": [
          {
            "value": {
              "$mid": 1,
              "fsPath": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
              "external": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
              "path": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
              "scheme": "file"
            },
            "id": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
            "name": "rally_context.ts",
            "isFile": true,
            "isDynamic": true
          }
        ]
      },
      "response": [
        {
          "value": "Let me help you modify the file to add annotation for the unforced errors by returner.\n\nThe changes will be in the `annotateMatchStat` function where we handle serve statistics. We need to modify both the my-serve and opponent-serve sections to track unforced errors by returner.\n\n### [rally_context.ts](file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts)\n\nAdd tracking of unforced errors by returner for both first and second serves.\n\n```typescript\n",
          "supportThemeIcons": false,
          "supportHtml": false
        },
        {
          "kind": "codeblockUri",
          "uri": {
            "$mid": 1,
            "fsPath": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
            "external": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
            "path": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
            "scheme": "file"
          }
        },
        {
          "value": "// ...existing code...\n    if (rallyContext.rally.isMyServe) {\n      const serverStats = stat.p1Stats;\n      const returnerStats = stat.p2Stats;\n      const isSecondServe = rallyContext.isSecondServe();\n      \n      if (isSecondServe) {\n        if (rallyContext.rally.result !== RallyResult.Let) {\n          serverStats.numSecondServes++;\n        }\n        if (rallyContext.rally.result !== RallyResult.Fault) {\n          serverStats.numSecondServesMade++;\n          if (rallyContext.rally.result === RallyResult.PtServer) {\n            serverStats.numSecondServesWon++;\n            if (isForcingWin(rallyContext)) {\n              serverStats.numSecondServeForcingWins++;\n            }\n          } else if (isReturnerPtForSecondServe(rallyContext)) {\n            if (isForcingWin(rallyContext)) {\n              returnerStats.numSecondServeForcingWinsByReturner++;\n            } else if (isUnforcedError(rallyContext)) {\n              returnerStats.numSecondServeUnforcedErrorsByReturner++;\n            }\n          }\n        }\n        // ...existing code...\n      } else {\n        if (rallyContext.rally.result !== RallyResult.Let) {\n          serverStats.numFirstServes++;\n        }\n        if (rallyContext.rally.result !== RallyResult.Fault) {\n          serverStats.numFirstServesMade++;\n          if (rallyContext.rally.result === RallyResult.PtServer) {\n            serverStats.numFirstServesWon++;\n            if (isForcingWin(rallyContext)) {\n              serverStats.numFirstServeForcingWins++;\n            }\n          } else if (isReturnerPtForSecondServe(rallyContext)) {\n            if (isForcingWin(rallyContext)) {\n              returnerStats.numFirstServeForcingWinsByReturner++;\n            } else if (isUnforcedError(rallyContext)) {\n              returnerStats.numFirstServeUnforcedErrorsByReturner++;\n            }\n          }\n        }\n        // ...existing code...\n      }\n    } else {\n      const serverStats = stat.p2Stats;\n      const returnerStats = stat.p1Stats;\n      const isSecondServe = rallyContext.isSecondServe();\n      \n      if (!isSecondServe) {\n        serverStats.numFirstServes++;\n        if (rallyContext.rally.result !== RallyResult.Fault) {\n          serverStats.numFirstServesMade++;\n          if (rallyContext.rally.result === RallyResult.PtServer) {\n            serverStats.numFirstServesWon++;\n            if (isForcingWin(rallyContext)) {\n              serverStats.numFirstServeForcingWins++;\n            }\n          } else if (isReturnerPtForSecondServe(rallyContext)) {\n            if (isForcingWin(rallyContext)) {\n              returnerStats.numFirstServeForcingWinsByReturner++;\n            } else if (isUnforcedError(rallyContext)) {\n              returnerStats.numFirstServeUnforcedErrorsByReturner++;\n            }\n          }\n        }\n        // ...existing code...\n      } else {\n        serverStats.numSecondServes++;\n        if (rallyContext.rally.result !== RallyResult.Fault) {\n          serverStats.numSecondServesMade++;\n          if (rallyContext.rally.result === RallyResult.PtServer) {\n            serverStats.numSecondServesWon++;\n            if (isForcingWin(rallyContext)) {\n              serverStats.numSecondServeForcingWins++;\n            }\n          } else if (isReturnerPtForSecondServe(rallyContext)) {\n            if (isForcingWin(rallyContext)) {\n              returnerStats.numSecondServeForcingWinsByReturner++;\n            } else if (isUnforcedError(rallyContext)) {\n              returnerStats.numSecondServeUnforcedErrorsByReturner++;\n            }\n          }\n        }\n        // ...existing code...\n      }\n    }\n// ...existing code...\n```\n\nThe changes add tracking of unforced errors by returner in each serve scenario. When a rally is a returner point and is classified as an unforced error, we increment either `numFirstServeUnforcedErrorsByReturner` or `numSecondServeUnforcedErrorsByReturner` depending on the serve type.",
          "supportThemeIcons": false,
          "supportHtml": false
        },
        {
          "kind": "textEditGroup",
          "uri": {
            "$mid": 1,
            "fsPath": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
            "external": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
            "path": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
            "scheme": "file"
          },
          "edits": [
            [],
            [
              {
                "text": "import { MatchStat } from \"./match_stat\";",
                "range": {
                  "startLineNumber": 1,
                  "startColumn": 1,
                  "endLineNumber": 1,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "import { Rally, RallyResult } from \"./rally\";",
                "range": {
                  "startLineNumber": 2,
                  "startColumn": 1,
                  "endLineNumber": 2,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "import {  isTieBreakTime, PersonScore, Score } from \"./score\";",
                "range": {
                  "startLineNumber": 3,
                  "startColumn": 1,
                  "endLineNumber": 3,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "import { isForcingWin, isUnforcedError } from './risk_level';",
                "range": {
                  "startLineNumber": 4,
                  "startColumn": 1,
                  "endLineNumber": 4,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 5,
                  "startColumn": 1,
                  "endLineNumber": 5,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "export class RallyContext {",
                "range": {
                  "startLineNumber": 6,
                  "startColumn": 1,
                  "endLineNumber": 6,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  constructor(",
                "range": {
                  "startLineNumber": 7,
                  "startColumn": 1,
                  "endLineNumber": 7,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    public rally = new Rally(),",
                "range": {
                  "startLineNumber": 8,
                  "startColumn": 1,
                  "endLineNumber": 8,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    public scoreBeforeRally = new Score(),",
                "range": {
                  "startLineNumber": 9,
                  "startColumn": 1,
                  "endLineNumber": 9,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    public matchStatBeforeRally = new MatchStat(),",
                "range": {
                  "startLineNumber": 10,
                  "startColumn": 1,
                  "endLineNumber": 10,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  ) {}",
                "range": {
                  "startLineNumber": 11,
                  "startColumn": 1,
                  "endLineNumber": 11,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 12,
                  "startColumn": 1,
                  "endLineNumber": 12,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  getResultStr(myName: string, oppoName: string) {",
                "range": {
                  "startLineNumber": 13,
                  "startColumn": 1,
                  "endLineNumber": 13,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const server = this.rally.isMyServe ? myName : oppoName;",
                "range": {
                  "startLineNumber": 14,
                  "startColumn": 1,
                  "endLineNumber": 14,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const returner = this.rally.isMyServe ? oppoName : myName;",
                "range": {
                  "startLineNumber": 15,
                  "startColumn": 1,
                  "endLineNumber": 15,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (this.rally.result === RallyResult.PtServer) {",
                "range": {
                  "startLineNumber": 16,
                  "startColumn": 1,
                  "endLineNumber": 16,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return `Pt. ${server}`;",
                "range": {
                  "startLineNumber": 17,
                  "startColumn": 1,
                  "endLineNumber": 17,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    } else if (this.rally.result === RallyResult.PtReturner) {",
                "range": {
                  "startLineNumber": 18,
                  "startColumn": 1,
                  "endLineNumber": 18,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return `Pt. ${returner}`;",
                "range": {
                  "startLineNumber": 19,
                  "startColumn": 1,
                  "endLineNumber": 19,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 20,
                  "startColumn": 1,
                  "endLineNumber": 20,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return this.rally.result;",
                "range": {
                  "startLineNumber": 21,
                  "startColumn": 1,
                  "endLineNumber": 21,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 22,
                  "startColumn": 1,
                  "endLineNumber": 22,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 23,
                  "startColumn": 1,
                  "endLineNumber": 23,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  getResultSymbolStr() {",
                "range": {
                  "startLineNumber": 24,
                  "startColumn": 1,
                  "endLineNumber": 24,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (this.rally.result === RallyResult.PtServer) {",
                "range": {
                  "startLineNumber": 25,
                  "startColumn": 1,
                  "endLineNumber": 25,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return this.rally.isMyServe ? `${greenBall} ${whiteBall}` : `${whiteBall} ${greenBall}`;",
                "range": {
                  "startLineNumber": 26,
                  "startColumn": 1,
                  "endLineNumber": 26,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    } else if (this.rally.result === RallyResult.PtReturner) {",
                "range": {
                  "startLineNumber": 27,
                  "startColumn": 1,
                  "endLineNumber": 27,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return this.rally.isMyServe ? `${redBall} ${whiteBall}` : `${whiteBall} ${redBall}`;",
                "range": {
                  "startLineNumber": 28,
                  "startColumn": 1,
                  "endLineNumber": 28,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    } else if (this.rally.result === RallyResult.Fault) {",
                "range": {
                  "startLineNumber": 29,
                  "startColumn": 1,
                  "endLineNumber": 29,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      if (this.isSecondServe()) {",
                "range": {
                  "startLineNumber": 30,
                  "startColumn": 1,
                  "endLineNumber": 30,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        return this.rally.isMyServe ? `${redHeart} ${whiteBall}` : `${whiteBall} ${redHeart}`;",
                "range": {
                  "startLineNumber": 31,
                  "startColumn": 1,
                  "endLineNumber": 31,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      }",
                "range": {
                  "startLineNumber": 32,
                  "startColumn": 1,
                  "endLineNumber": 32,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return this.rally.isMyServe ? `${yellowBall} ${whiteBall}` : `${whiteBall} ${yellowBall}`;",
                "range": {
                  "startLineNumber": 33,
                  "startColumn": 1,
                  "endLineNumber": 33,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 34,
                  "startColumn": 1,
                  "endLineNumber": 34,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return this.rally.result;",
                "range": {
                  "startLineNumber": 35,
                  "startColumn": 1,
                  "endLineNumber": 35,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 36,
                  "startColumn": 1,
                  "endLineNumber": 36,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  ",
                "range": {
                  "startLineNumber": 37,
                  "startColumn": 1,
                  "endLineNumber": 37,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  toGameScoreStr() {",
                "range": {
                  "startLineNumber": 38,
                  "startColumn": 1,
                  "endLineNumber": 38,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const strs = [];",
                "range": {
                  "startLineNumber": 39,
                  "startColumn": 1,
                  "endLineNumber": 39,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (this.isNewSet()) {",
                "range": {
                  "startLineNumber": 40,
                  "startColumn": 1,
                  "endLineNumber": 40,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      this.scoreBeforeRally.p1.gamesByCompletedSet.forEach((p1Games, idx) => {",
                "range": {
                  "startLineNumber": 41,
                  "startColumn": 1,
                  "endLineNumber": 41,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        strs.push(`[${p1Games}-${this.scoreBeforeRally.p2.gamesByCompletedSet[idx]}]`);",
                "range": {
                  "startLineNumber": 42,
                  "startColumn": 1,
                  "endLineNumber": 42,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      });",
                "range": {
                  "startLineNumber": 43,
                  "startColumn": 1,
                  "endLineNumber": 43,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 44,
                  "startColumn": 1,
                  "endLineNumber": 44,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (this.isNewGame()) {",
                "range": {
                  "startLineNumber": 45,
                  "startColumn": 1,
                  "endLineNumber": 45,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      strs.push(`[${this.scoreBeforeRally.p1.games}-${this.scoreBeforeRally.p2.games}]`);",
                "range": {
                  "startLineNumber": 46,
                  "startColumn": 1,
                  "endLineNumber": 46,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 47,
                  "startColumn": 1,
                  "endLineNumber": 47,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 48,
                  "startColumn": 1,
                  "endLineNumber": 48,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return strs.join(' ');",
                "range": {
                  "startLineNumber": 49,
                  "startColumn": 1,
                  "endLineNumber": 49,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 50,
                  "startColumn": 1,
                  "endLineNumber": 50,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 51,
                  "startColumn": 1,
                  "endLineNumber": 51,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  isDoubleFault() {",
                "range": {
                  "startLineNumber": 52,
                  "startColumn": 1,
                  "endLineNumber": 52,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return this.isSecondServe() && this.rally.result === RallyResult.Fault;",
                "range": {
                  "startLineNumber": 53,
                  "startColumn": 1,
                  "endLineNumber": 53,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 54,
                  "startColumn": 1,
                  "endLineNumber": 54,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 55,
                  "startColumn": 1,
                  "endLineNumber": 55,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  winnerIsMe() {",
                "range": {
                  "startLineNumber": 56,
                  "startColumn": 1,
                  "endLineNumber": 56,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return (this.rally.isMyServe && this.rally.result === RallyResult.PtServer) ||",
                "range": {
                  "startLineNumber": 57,
                  "startColumn": 1,
                  "endLineNumber": 57,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        (!this.rally.isMyServe && (this.rally.result === RallyResult.PtReturner || this.isDoubleFault()));",
                "range": {
                  "startLineNumber": 58,
                  "startColumn": 1,
                  "endLineNumber": 58,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 59,
                  "startColumn": 1,
                  "endLineNumber": 59,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  winnerIsOppo() {",
                "range": {
                  "startLineNumber": 60,
                  "startColumn": 1,
                  "endLineNumber": 60,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return (!this.rally.isMyServe && this.rally.result === RallyResult.PtServer) ||",
                "range": {
                  "startLineNumber": 61,
                  "startColumn": 1,
                  "endLineNumber": 61,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        (this.rally.isMyServe && (this.rally.result === RallyResult.PtReturner || this.isDoubleFault()));",
                "range": {
                  "startLineNumber": 62,
                  "startColumn": 1,
                  "endLineNumber": 62,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 63,
                  "startColumn": 1,
                  "endLineNumber": 63,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 64,
                  "startColumn": 1,
                  "endLineNumber": 64,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  getScoreAfterRally() {",
                "range": {
                  "startLineNumber": 65,
                  "startColumn": 1,
                  "endLineNumber": 65,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const rally = this.rally;",
                "range": {
                  "startLineNumber": 66,
                  "startColumn": 1,
                  "endLineNumber": 66,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const scoreAfterRally = this.scoreBeforeRally.clone();",
                "range": {
                  "startLineNumber": 67,
                  "startColumn": 1,
                  "endLineNumber": 67,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 68,
                  "startColumn": 1,
                  "endLineNumber": 68,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const serverScore = rally.isMyServe ? scoreAfterRally.p1 : scoreAfterRally.p2;",
                "range": {
                  "startLineNumber": 69,
                  "startColumn": 1,
                  "endLineNumber": 69,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const returnerScore = rally.isMyServe ? scoreAfterRally.p2 : scoreAfterRally.p1;",
                "range": {
                  "startLineNumber": 70,
                  "startColumn": 1,
                  "endLineNumber": 70,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const serverWon = rally.result === RallyResult.PtServer;",
                "range": {
                  "startLineNumber": 71,
                  "startColumn": 1,
                  "endLineNumber": 71,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (serverWon) {",
                "range": {
                  "startLineNumber": 72,
                  "startColumn": 1,
                  "endLineNumber": 72,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      updateSubjectWin(serverScore, returnerScore);",
                "range": {
                  "startLineNumber": 73,
                  "startColumn": 1,
                  "endLineNumber": 73,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return scoreAfterRally;",
                "range": {
                  "startLineNumber": 74,
                  "startColumn": 1,
                  "endLineNumber": 74,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 75,
                  "startColumn": 1,
                  "endLineNumber": 75,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 76,
                  "startColumn": 1,
                  "endLineNumber": 76,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    let returnerWon = rally.result === RallyResult.PtReturner;",
                "range": {
                  "startLineNumber": 77,
                  "startColumn": 1,
                  "endLineNumber": 77,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (rally.result === RallyResult.Fault) {",
                "range": {
                  "startLineNumber": 78,
                  "startColumn": 1,
                  "endLineNumber": 78,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      if (serverScore.serve === 0) {",
                "range": {
                  "startLineNumber": 79,
                  "startColumn": 1,
                  "endLineNumber": 79,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        serverScore.serve = 1;",
                "range": {
                  "startLineNumber": 80,
                  "startColumn": 1,
                  "endLineNumber": 80,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        return scoreAfterRally;",
                "range": {
                  "startLineNumber": 81,
                  "startColumn": 1,
                  "endLineNumber": 81,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      }",
                "range": {
                  "startLineNumber": 82,
                  "startColumn": 1,
                  "endLineNumber": 82,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      returnerWon = true;",
                "range": {
                  "startLineNumber": 83,
                  "startColumn": 1,
                  "endLineNumber": 83,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 84,
                  "startColumn": 1,
                  "endLineNumber": 84,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (returnerWon) {",
                "range": {
                  "startLineNumber": 85,
                  "startColumn": 1,
                  "endLineNumber": 85,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      updateSubjectWin(returnerScore, serverScore);",
                "range": {
                  "startLineNumber": 86,
                  "startColumn": 1,
                  "endLineNumber": 86,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 87,
                  "startColumn": 1,
                  "endLineNumber": 87,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return scoreAfterRally;",
                "range": {
                  "startLineNumber": 88,
                  "startColumn": 1,
                  "endLineNumber": 88,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 89,
                  "startColumn": 1,
                  "endLineNumber": 89,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 90,
                  "startColumn": 1,
                  "endLineNumber": 90,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  inferWillBeMyServe(){}",
                "range": {
                  "startLineNumber": 91,
                  "startColumn": 1,
                  "endLineNumber": 91,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 92,
                  "startColumn": 1,
                  "endLineNumber": 92,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  isSecondServe() {",
                "range": {
                  "startLineNumber": 93,
                  "startColumn": 1,
                  "endLineNumber": 93,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return this.scoreBeforeRally.p1.serve === 1 || this.scoreBeforeRally.p2.serve === 1;",
                "range": {
                  "startLineNumber": 94,
                  "startColumn": 1,
                  "endLineNumber": 94,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 95,
                  "startColumn": 1,
                  "endLineNumber": 95,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 96,
                  "startColumn": 1,
                  "endLineNumber": 96,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  isNewSet() {",
                "range": {
                  "startLineNumber": 97,
                  "startColumn": 1,
                  "endLineNumber": 97,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (!this.isNewGame()) {",
                "range": {
                  "startLineNumber": 98,
                  "startColumn": 1,
                  "endLineNumber": 98,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return false;",
                "range": {
                  "startLineNumber": 99,
                  "startColumn": 1,
                  "endLineNumber": 99,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 100,
                  "startColumn": 1,
                  "endLineNumber": 100,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return this.scoreBeforeRally.p1.games === 0 && this.scoreBeforeRally.p2.games === 0;",
                "range": {
                  "startLineNumber": 101,
                  "startColumn": 1,
                  "endLineNumber": 101,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 102,
                  "startColumn": 1,
                  "endLineNumber": 102,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 103,
                  "startColumn": 1,
                  "endLineNumber": 103,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  isNewGame() {",
                "range": {
                  "startLineNumber": 104,
                  "startColumn": 1,
                  "endLineNumber": 104,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return this.scoreBeforeRally.p1.points === 0 && this.scoreBeforeRally.p1.serve === 0",
                "range": {
                  "startLineNumber": 105,
                  "startColumn": 1,
                  "endLineNumber": 105,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        && this.scoreBeforeRally.p2.points === 0 && this.scoreBeforeRally.p2.serve === 0;",
                "range": {
                  "startLineNumber": 106,
                  "startColumn": 1,
                  "endLineNumber": 106,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 107,
                  "startColumn": 1,
                  "endLineNumber": 107,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 108,
                  "startColumn": 1,
                  "endLineNumber": 108,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  isMyServeGame() {",
                "range": {
                  "startLineNumber": 109,
                  "startColumn": 1,
                  "endLineNumber": 109,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (!isTieBreakTime(this.scoreBeforeRally.p1, this.scoreBeforeRally.p2)) {",
                "range": {
                  "startLineNumber": 110,
                  "startColumn": 1,
                  "endLineNumber": 110,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return this.rally.isMyServe;",
                "range": {
                  "startLineNumber": 111,
                  "startColumn": 1,
                  "endLineNumber": 111,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 112,
                  "startColumn": 1,
                  "endLineNumber": 112,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      // For a tiebreak, the player who serve first is his serve game.",
                "range": {
                  "startLineNumber": 113,
                  "startColumn": 1,
                  "endLineNumber": 113,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const numTieBreakPtsMod4 = (this.scoreBeforeRally.p1.points + this.scoreBeforeRally.p2.points) % 4;",
                "range": {
                  "startLineNumber": 114,
                  "startColumn": 1,
                  "endLineNumber": 114,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (numTieBreakPtsMod4 === 1 || numTieBreakPtsMod4 === 4) {",
                "range": {
                  "startLineNumber": 115,
                  "startColumn": 1,
                  "endLineNumber": 115,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return !this.rally.isMyServe;",
                "range": {
                  "startLineNumber": 116,
                  "startColumn": 1,
                  "endLineNumber": 116,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 117,
                  "startColumn": 1,
                  "endLineNumber": 117,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return this.rally.isMyServe;",
                "range": {
                  "startLineNumber": 118,
                  "startColumn": 1,
                  "endLineNumber": 118,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 119,
                  "startColumn": 1,
                  "endLineNumber": 119,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 120,
                  "startColumn": 1,
                  "endLineNumber": 120,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  getPlotForNextRally() {",
                "range": {
                  "startLineNumber": 121,
                  "startColumn": 1,
                  "endLineNumber": 121,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const myGamePt = isSubjectGamePoint(this.scoreBeforeRally.p1, this.scoreBeforeRally.p2);",
                "range": {
                  "startLineNumber": 122,
                  "startColumn": 1,
                  "endLineNumber": 122,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const oppoGamePt = isSubjectGamePoint(this.scoreBeforeRally.p2, this.scoreBeforeRally.p1);",
                "range": {
                  "startLineNumber": 123,
                  "startColumn": 1,
                  "endLineNumber": 123,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (!myGamePt && !oppoGamePt) {",
                "range": {
                  "startLineNumber": 124,
                  "startColumn": 1,
                  "endLineNumber": 124,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return;",
                "range": {
                  "startLineNumber": 125,
                  "startColumn": 1,
                  "endLineNumber": 125,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 126,
                  "startColumn": 1,
                  "endLineNumber": 126,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const winnerIsMe = this.winnerIsMe();",
                "range": {
                  "startLineNumber": 127,
                  "startColumn": 1,
                  "endLineNumber": 127,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const winnerIsOppo = this.winnerIsOppo();",
                "range": {
                  "startLineNumber": 128,
                  "startColumn": 1,
                  "endLineNumber": 128,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const myConversion = myGamePt && winnerIsMe;",
                "range": {
                  "startLineNumber": 129,
                  "startColumn": 1,
                  "endLineNumber": 129,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const oppoConversion = oppoGamePt && winnerIsOppo;",
                "range": {
                  "startLineNumber": 130,
                  "startColumn": 1,
                  "endLineNumber": 130,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (!myConversion && !oppoConversion) {",
                "range": {
                  "startLineNumber": 131,
                  "startColumn": 1,
                  "endLineNumber": 131,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return;",
                "range": {
                  "startLineNumber": 132,
                  "startColumn": 1,
                  "endLineNumber": 132,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 133,
                  "startColumn": 1,
                  "endLineNumber": 133,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 134,
                  "startColumn": 1,
                  "endLineNumber": 134,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return {",
                "range": {
                  "startLineNumber": 135,
                  "startColumn": 1,
                  "endLineNumber": 135,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      text: 'Converted',",
                "range": {
                  "startLineNumber": 136,
                  "startColumn": 1,
                  "endLineNumber": 136,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      isMyPlot: myConversion,",
                "range": {
                  "startLineNumber": 137,
                  "startColumn": 1,
                  "endLineNumber": 137,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    };",
                "range": {
                  "startLineNumber": 138,
                  "startColumn": 1,
                  "endLineNumber": 138,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 139,
                  "startColumn": 1,
                  "endLineNumber": 139,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 140,
                  "startColumn": 1,
                  "endLineNumber": 140,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  toPlot() {",
                "range": {
                  "startLineNumber": 141,
                  "startColumn": 1,
                  "endLineNumber": 141,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const myGamePt = isSubjectGamePoint(this.scoreBeforeRally.p1, this.scoreBeforeRally.p2);",
                "range": {
                  "startLineNumber": 142,
                  "startColumn": 1,
                  "endLineNumber": 142,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const oppoGamePt = isSubjectGamePoint(this.scoreBeforeRally.p2, this.scoreBeforeRally.p1);",
                "range": {
                  "startLineNumber": 143,
                  "startColumn": 1,
                  "endLineNumber": 143,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const isSetPt = isSubjectSetPoint(this.scoreBeforeRally.p1, this.scoreBeforeRally.p2) || isSubjectSetPoint(this.scoreBeforeRally.p2, this.scoreBeforeRally.p1);",
                "range": {
                  "startLineNumber": 144,
                  "startColumn": 1,
                  "endLineNumber": 144,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const myServeGame = this.isMyServeGame();",
                "range": {
                  "startLineNumber": 145,
                  "startColumn": 1,
                  "endLineNumber": 145,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const isBreakPt = (myGamePt && !myServeGame) || (oppoGamePt && myServeGame);",
                "range": {
                  "startLineNumber": 146,
                  "startColumn": 1,
                  "endLineNumber": 146,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const emphasis = isBreakPt ? '*' : '';",
                "range": {
                  "startLineNumber": 147,
                  "startColumn": 1,
                  "endLineNumber": 147,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (!myGamePt && !oppoGamePt) {",
                "range": {
                  "startLineNumber": 148,
                  "startColumn": 1,
                  "endLineNumber": 148,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return;",
                "range": {
                  "startLineNumber": 149,
                  "startColumn": 1,
                  "endLineNumber": 149,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 150,
                  "startColumn": 1,
                  "endLineNumber": 150,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    let text = 'Game Pt';",
                "range": {
                  "startLineNumber": 151,
                  "startColumn": 1,
                  "endLineNumber": 151,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (isSetPt) {",
                "range": {
                  "startLineNumber": 152,
                  "startColumn": 1,
                  "endLineNumber": 152,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      text = `${emphasis}Set Pt`;",
                "range": {
                  "startLineNumber": 153,
                  "startColumn": 1,
                  "endLineNumber": 153,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    } else if (isBreakPt) {",
                "range": {
                  "startLineNumber": 154,
                  "startColumn": 1,
                  "endLineNumber": 154,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      text = 'Break pt';",
                "range": {
                  "startLineNumber": 155,
                  "startColumn": 1,
                  "endLineNumber": 155,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 156,
                  "startColumn": 1,
                  "endLineNumber": 156,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return {",
                "range": {
                  "startLineNumber": 157,
                  "startColumn": 1,
                  "endLineNumber": 157,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      text: text,",
                "range": {
                  "startLineNumber": 158,
                  "startColumn": 1,
                  "endLineNumber": 158,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      isMyPlot: myGamePt,",
                "range": {
                  "startLineNumber": 159,
                  "startColumn": 1,
                  "endLineNumber": 159,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    };",
                "range": {
                  "startLineNumber": 160,
                  "startColumn": 1,
                  "endLineNumber": 160,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 161,
                  "startColumn": 1,
                  "endLineNumber": 161,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 162,
                  "startColumn": 1,
                  "endLineNumber": 162,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 163,
                  "startColumn": 1,
                  "endLineNumber": 163,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "const whiteBall = `◯`;",
                "range": {
                  "startLineNumber": 164,
                  "startColumn": 1,
                  "endLineNumber": 164,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "const greenBall = `🟢`;",
                "range": {
                  "startLineNumber": 165,
                  "startColumn": 1,
                  "endLineNumber": 165,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "const yellowBall = `🟡`;",
                "range": {
                  "startLineNumber": 166,
                  "startColumn": 1,
                  "endLineNumber": 166,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "const redBall = `🔴`;",
                "range": {
                  "startLineNumber": 167,
                  "startColumn": 1,
                  "endLineNumber": 167,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "const redHeart = `🟥 `;",
                "range": {
                  "startLineNumber": 168,
                  "startColumn": 1,
                  "endLineNumber": 168,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 169,
                  "startColumn": 1,
                  "endLineNumber": 169,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "export function updateSubjectWin(subjectScore: PersonScore, otherScore: PersonScore) {",
                "range": {
                  "startLineNumber": 170,
                  "startColumn": 1,
                  "endLineNumber": 170,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  if (isSubjectSetPoint(subjectScore, otherScore)) {",
                "range": {
                  "startLineNumber": 171,
                  "startColumn": 1,
                  "endLineNumber": 171,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    subjectScore.gamesByCompletedSet.push(subjectScore.games + 1);",
                "range": {
                  "startLineNumber": 172,
                  "startColumn": 1,
                  "endLineNumber": 172,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    subjectScore.games = 0;",
                "range": {
                  "startLineNumber": 173,
                  "startColumn": 1,
                  "endLineNumber": 173,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    subjectScore.points = 0;",
                "range": {
                  "startLineNumber": 174,
                  "startColumn": 1,
                  "endLineNumber": 174,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    subjectScore.serve = 0;",
                "range": {
                  "startLineNumber": 175,
                  "startColumn": 1,
                  "endLineNumber": 175,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    otherScore.gamesByCompletedSet.push(otherScore.games);",
                "range": {
                  "startLineNumber": 176,
                  "startColumn": 1,
                  "endLineNumber": 176,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    otherScore.games = 0;",
                "range": {
                  "startLineNumber": 177,
                  "startColumn": 1,
                  "endLineNumber": 177,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    otherScore.points = 0;",
                "range": {
                  "startLineNumber": 178,
                  "startColumn": 1,
                  "endLineNumber": 178,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    otherScore.serve = 0;",
                "range": {
                  "startLineNumber": 179,
                  "startColumn": 1,
                  "endLineNumber": 179,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return;",
                "range": {
                  "startLineNumber": 180,
                  "startColumn": 1,
                  "endLineNumber": 180,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 181,
                  "startColumn": 1,
                  "endLineNumber": 181,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  if (isSubjectGamePoint(subjectScore, otherScore)) {",
                "range": {
                  "startLineNumber": 182,
                  "startColumn": 1,
                  "endLineNumber": 182,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    subjectScore.games += 1;",
                "range": {
                  "startLineNumber": 183,
                  "startColumn": 1,
                  "endLineNumber": 183,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    subjectScore.points = 0;",
                "range": {
                  "startLineNumber": 184,
                  "startColumn": 1,
                  "endLineNumber": 184,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    subjectScore.serve = 0;",
                "range": {
                  "startLineNumber": 185,
                  "startColumn": 1,
                  "endLineNumber": 185,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    otherScore.points = 0;",
                "range": {
                  "startLineNumber": 186,
                  "startColumn": 1,
                  "endLineNumber": 186,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    otherScore.serve = 0;",
                "range": {
                  "startLineNumber": 187,
                  "startColumn": 1,
                  "endLineNumber": 187,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return;",
                "range": {
                  "startLineNumber": 188,
                  "startColumn": 1,
                  "endLineNumber": 188,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 189,
                  "startColumn": 1,
                  "endLineNumber": 189,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  subjectScore.points += 1;",
                "range": {
                  "startLineNumber": 190,
                  "startColumn": 1,
                  "endLineNumber": 190,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  subjectScore.serve = 0;",
                "range": {
                  "startLineNumber": 191,
                  "startColumn": 1,
                  "endLineNumber": 191,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  otherScore.serve = 0;",
                "range": {
                  "startLineNumber": 192,
                  "startColumn": 1,
                  "endLineNumber": 192,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 193,
                  "startColumn": 1,
                  "endLineNumber": 193,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 194,
                  "startColumn": 1,
                  "endLineNumber": 194,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "function isSubjectGamePoint(subjectScore: PersonScore, otherScore: PersonScore) {",
                "range": {
                  "startLineNumber": 195,
                  "startColumn": 1,
                  "endLineNumber": 195,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  let deuceScore = isTieBreakTime(subjectScore, otherScore) ? 6 : 3;",
                "range": {
                  "startLineNumber": 196,
                  "startColumn": 1,
                  "endLineNumber": 196,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  return subjectScore.points >= deuceScore && subjectScore.points - otherScore.points >= 1;",
                "range": {
                  "startLineNumber": 197,
                  "startColumn": 1,
                  "endLineNumber": 197,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 198,
                  "startColumn": 1,
                  "endLineNumber": 198,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 199,
                  "startColumn": 1,
                  "endLineNumber": 199,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "function isSubjectSetPoint(subjectScore: PersonScore, otherScore: PersonScore) {",
                "range": {
                  "startLineNumber": 200,
                  "startColumn": 1,
                  "endLineNumber": 200,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  if (!isSubjectGamePoint(subjectScore, otherScore)) {",
                "range": {
                  "startLineNumber": 201,
                  "startColumn": 1,
                  "endLineNumber": 201,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return false;",
                "range": {
                  "startLineNumber": 202,
                  "startColumn": 1,
                  "endLineNumber": 202,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 203,
                  "startColumn": 1,
                  "endLineNumber": 203,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  if (isTieBreakTime(subjectScore, otherScore)) {",
                "range": {
                  "startLineNumber": 204,
                  "startColumn": 1,
                  "endLineNumber": 204,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return true;",
                "range": {
                  "startLineNumber": 205,
                  "startColumn": 1,
                  "endLineNumber": 205,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 206,
                  "startColumn": 1,
                  "endLineNumber": 206,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  return subjectScore.games >= 5 && subjectScore.games - otherScore.games >= 1;",
                "range": {
                  "startLineNumber": 207,
                  "startColumn": 1,
                  "endLineNumber": 207,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 208,
                  "startColumn": 1,
                  "endLineNumber": 208,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 209,
                  "startColumn": 1,
                  "endLineNumber": 209,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 210,
                  "startColumn": 1,
                  "endLineNumber": 210,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "export function annotateMatchStat(rallyContexts: RallyContext[]) {",
                "range": {
                  "startLineNumber": 211,
                  "startColumn": 1,
                  "endLineNumber": 211,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  const stat = new MatchStat();",
                "range": {
                  "startLineNumber": 212,
                  "startColumn": 1,
                  "endLineNumber": 212,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  rallyContexts.forEach((rallyContext) => {",
                "range": {
                  "startLineNumber": 213,
                  "startColumn": 1,
                  "endLineNumber": 213,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    rallyContext.matchStatBeforeRally = stat.clone();",
                "range": {
                  "startLineNumber": 214,
                  "startColumn": 1,
                  "endLineNumber": 214,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 215,
                  "startColumn": 1,
                  "endLineNumber": 215,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    // Check game points and set points using direct score comparison",
                "range": {
                  "startLineNumber": 216,
                  "startColumn": 1,
                  "endLineNumber": 216,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (isSubjectGamePoint(rallyContext.scoreBeforeRally.p1, rallyContext.scoreBeforeRally.p2)) {",
                "range": {
                  "startLineNumber": 217,
                  "startColumn": 1,
                  "endLineNumber": 217,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      stat.p1Stats.numGamePts++;",
                "range": {
                  "startLineNumber": 218,
                  "startColumn": 1,
                  "endLineNumber": 218,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      if (isSubjectSetPoint(rallyContext.scoreBeforeRally.p1, rallyContext.scoreBeforeRally.p2)) {",
                "range": {
                  "startLineNumber": 219,
                  "startColumn": 1,
                  "endLineNumber": 219,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        stat.p1Stats.numSetPts++;",
                "range": {
                  "startLineNumber": 220,
                  "startColumn": 1,
                  "endLineNumber": 220,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      }",
                "range": {
                  "startLineNumber": 221,
                  "startColumn": 1,
                  "endLineNumber": 221,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 222,
                  "startColumn": 1,
                  "endLineNumber": 222,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (isSubjectGamePoint(rallyContext.scoreBeforeRally.p2, rallyContext.scoreBeforeRally.p1)) {",
                "range": {
                  "startLineNumber": 223,
                  "startColumn": 1,
                  "endLineNumber": 223,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      stat.p2Stats.numGamePts++;",
                "range": {
                  "startLineNumber": 224,
                  "startColumn": 1,
                  "endLineNumber": 224,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      if (isSubjectSetPoint(rallyContext.scoreBeforeRally.p2, rallyContext.scoreBeforeRally.p1)) {",
                "range": {
                  "startLineNumber": 225,
                  "startColumn": 1,
                  "endLineNumber": 225,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        stat.p2Stats.numSetPts++;",
                "range": {
                  "startLineNumber": 226,
                  "startColumn": 1,
                  "endLineNumber": 226,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      }",
                "range": {
                  "startLineNumber": 227,
                  "startColumn": 1,
                  "endLineNumber": 227,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 228,
                  "startColumn": 1,
                  "endLineNumber": 228,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 229,
                  "startColumn": 1,
                  "endLineNumber": 229,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    function isReturnerPtForSecondServe(rallyContext: RallyContext) {",
                "range": {
                  "startLineNumber": 230,
                  "startColumn": 1,
                  "endLineNumber": 230,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      if (!rallyContext.isSecondServe()) {",
                "range": {
                  "startLineNumber": 231,
                  "startColumn": 1,
                  "endLineNumber": 231,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        return false;",
                "range": {
                  "startLineNumber": 232,
                  "startColumn": 1,
                  "endLineNumber": 232,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      }",
                "range": {
                  "startLineNumber": 233,
                  "startColumn": 1,
                  "endLineNumber": 233,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return rallyContext.rally.result === RallyResult.PtReturner || rallyContext.rally.result === RallyResult.Fault;",
                "range": {
                  "startLineNumber": 234,
                  "startColumn": 1,
                  "endLineNumber": 234,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 235,
                  "startColumn": 1,
                  "endLineNumber": 235,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (rallyContext.rally.isMyServe) {",
                "range": {
                  "startLineNumber": 236,
                  "startColumn": 1,
                  "endLineNumber": 236,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      const serverStats = stat.p1Stats;",
                "range": {
                  "startLineNumber": 237,
                  "startColumn": 1,
                  "endLineNumber": 237,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      const returnerStats = stat.p2Stats;",
                "range": {
                  "startLineNumber": 238,
                  "startColumn": 1,
                  "endLineNumber": 238,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      const isSecondServe = rallyContext.isSecondServe();",
                "range": {
                  "startLineNumber": 239,
                  "startColumn": 1,
                  "endLineNumber": 239,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      ",
                "range": {
                  "startLineNumber": 240,
                  "startColumn": 1,
                  "endLineNumber": 240,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      if (isSecondServe) {",
                "range": {
                  "startLineNumber": 241,
                  "startColumn": 1,
                  "endLineNumber": 241,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        if (rallyContext.rally.result !== RallyResult.Let) {",
                "range": {
                  "startLineNumber": 242,
                  "startColumn": 1,
                  "endLineNumber": 242,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          serverStats.numSecondServes++;",
                "range": {
                  "startLineNumber": 243,
                  "startColumn": 1,
                  "endLineNumber": 243,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 244,
                  "startColumn": 1,
                  "endLineNumber": 244,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        if (rallyContext.rally.result !== RallyResult.Fault) {",
                "range": {
                  "startLineNumber": 245,
                  "startColumn": 1,
                  "endLineNumber": 245,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          serverStats.numSecondServesMade++;",
                "range": {
                  "startLineNumber": 246,
                  "startColumn": 1,
                  "endLineNumber": 246,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          if (rallyContext.rally.result === RallyResult.PtServer) {",
                "range": {
                  "startLineNumber": 247,
                  "startColumn": 1,
                  "endLineNumber": 247,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            serverStats.numSecondServesWon++;",
                "range": {
                  "startLineNumber": 248,
                  "startColumn": 1,
                  "endLineNumber": 248,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            if (isForcingWin(rallyContext)) {",
                "range": {
                  "startLineNumber": 249,
                  "startColumn": 1,
                  "endLineNumber": 249,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              serverStats.numSecondServeForcingWins++;",
                "range": {
                  "startLineNumber": 250,
                  "startColumn": 1,
                  "endLineNumber": 250,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 251,
                  "startColumn": 1,
                  "endLineNumber": 251,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          } else if (isReturnerPtForSecondServe(rallyContext)) {",
                "range": {
                  "startLineNumber": 252,
                  "startColumn": 1,
                  "endLineNumber": 252,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            if (isForcingWin(rallyContext)) {",
                "range": {
                  "startLineNumber": 253,
                  "startColumn": 1,
                  "endLineNumber": 253,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              returnerStats.numSecondServeForcingWinsByReturner++;",
                "range": {
                  "startLineNumber": 254,
                  "startColumn": 1,
                  "endLineNumber": 254,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            } else if (isUnforcedError(rallyContext)) {",
                "range": {
                  "startLineNumber": 255,
                  "startColumn": 1,
                  "endLineNumber": 255,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              returnerStats.numSecondServeUnforcedErrorsByReturner++;",
                "range": {
                  "startLineNumber": 256,
                  "startColumn": 1,
                  "endLineNumber": 256,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 257,
                  "startColumn": 1,
                  "endLineNumber": 257,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          }",
                "range": {
                  "startLineNumber": 258,
                  "startColumn": 1,
                  "endLineNumber": 258,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 259,
                  "startColumn": 1,
                  "endLineNumber": 259,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        if (isReturnerPtForSecondServe(rallyContext) && isUnforcedError(rallyContext)) {",
                "range": {
                  "startLineNumber": 260,
                  "startColumn": 1,
                  "endLineNumber": 260,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          serverStats.numSecondServeUnforcedErrors++;",
                "range": {
                  "startLineNumber": 261,
                  "startColumn": 1,
                  "endLineNumber": 261,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 262,
                  "startColumn": 1,
                  "endLineNumber": 262,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      } else {",
                "range": {
                  "startLineNumber": 263,
                  "startColumn": 1,
                  "endLineNumber": 263,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        if (rallyContext.rally.result !== RallyResult.Let) {",
                "range": {
                  "startLineNumber": 264,
                  "startColumn": 1,
                  "endLineNumber": 264,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          serverStats.numFirstServes++;",
                "range": {
                  "startLineNumber": 265,
                  "startColumn": 1,
                  "endLineNumber": 265,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 266,
                  "startColumn": 1,
                  "endLineNumber": 266,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        if (rallyContext.rally.result !== RallyResult.Fault) {",
                "range": {
                  "startLineNumber": 267,
                  "startColumn": 1,
                  "endLineNumber": 267,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          serverStats.numFirstServesMade++;",
                "range": {
                  "startLineNumber": 268,
                  "startColumn": 1,
                  "endLineNumber": 268,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          if (rallyContext.rally.result === RallyResult.PtServer) {",
                "range": {
                  "startLineNumber": 269,
                  "startColumn": 1,
                  "endLineNumber": 269,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            serverStats.numFirstServesWon++;",
                "range": {
                  "startLineNumber": 270,
                  "startColumn": 1,
                  "endLineNumber": 270,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            if (isForcingWin(rallyContext)) {",
                "range": {
                  "startLineNumber": 271,
                  "startColumn": 1,
                  "endLineNumber": 271,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              serverStats.numFirstServeForcingWins++;",
                "range": {
                  "startLineNumber": 272,
                  "startColumn": 1,
                  "endLineNumber": 272,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 273,
                  "startColumn": 1,
                  "endLineNumber": 273,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          } else if (isReturnerPtForSecondServe(rallyContext)) {",
                "range": {
                  "startLineNumber": 274,
                  "startColumn": 1,
                  "endLineNumber": 274,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            if (isForcingWin(rallyContext)) {",
                "range": {
                  "startLineNumber": 275,
                  "startColumn": 1,
                  "endLineNumber": 275,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              returnerStats.numFirstServeForcingWinsByReturner++;",
                "range": {
                  "startLineNumber": 276,
                  "startColumn": 1,
                  "endLineNumber": 276,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            } else if (isUnforcedError(rallyContext)) {",
                "range": {
                  "startLineNumber": 277,
                  "startColumn": 1,
                  "endLineNumber": 277,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              returnerStats.numFirstServeUnforcedErrorsByReturner++;",
                "range": {
                  "startLineNumber": 278,
                  "startColumn": 1,
                  "endLineNumber": 278,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 279,
                  "startColumn": 1,
                  "endLineNumber": 279,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          }",
                "range": {
                  "startLineNumber": 280,
                  "startColumn": 1,
                  "endLineNumber": 280,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 281,
                  "startColumn": 1,
                  "endLineNumber": 281,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        if (isReturnerPtForSecondServe(rallyContext) && isUnforcedError(rallyContext)) {",
                "range": {
                  "startLineNumber": 282,
                  "startColumn": 1,
                  "endLineNumber": 282,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          serverStats.numFirstServeUnforcedErrors++;",
                "range": {
                  "startLineNumber": 283,
                  "startColumn": 1,
                  "endLineNumber": 283,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 284,
                  "startColumn": 1,
                  "endLineNumber": 284,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      }",
                "range": {
                  "startLineNumber": 285,
                  "startColumn": 1,
                  "endLineNumber": 285,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    } else {",
                "range": {
                  "startLineNumber": 286,
                  "startColumn": 1,
                  "endLineNumber": 286,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      const serverStats = stat.p2Stats;",
                "range": {
                  "startLineNumber": 287,
                  "startColumn": 1,
                  "endLineNumber": 287,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      const returnerStats = stat.p1Stats;",
                "range": {
                  "startLineNumber": 288,
                  "startColumn": 1,
                  "endLineNumber": 288,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      const isSecondServe = rallyContext.isSecondServe();",
                "range": {
                  "startLineNumber": 289,
                  "startColumn": 1,
                  "endLineNumber": 289,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      ",
                "range": {
                  "startLineNumber": 290,
                  "startColumn": 1,
                  "endLineNumber": 290,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      if (!isSecondServe) {",
                "range": {
                  "startLineNumber": 291,
                  "startColumn": 1,
                  "endLineNumber": 291,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        serverStats.numFirstServes++;",
                "range": {
                  "startLineNumber": 292,
                  "startColumn": 1,
                  "endLineNumber": 292,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        if (rallyContext.rally.result !== RallyResult.Fault) {",
                "range": {
                  "startLineNumber": 293,
                  "startColumn": 1,
                  "endLineNumber": 293,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          serverStats.numFirstServesMade++;",
                "range": {
                  "startLineNumber": 294,
                  "startColumn": 1,
                  "endLineNumber": 294,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          if (rallyContext.rally.result === RallyResult.PtServer) {",
                "range": {
                  "startLineNumber": 295,
                  "startColumn": 1,
                  "endLineNumber": 295,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            serverStats.numFirstServesWon++;",
                "range": {
                  "startLineNumber": 296,
                  "startColumn": 1,
                  "endLineNumber": 296,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            if (isForcingWin(rallyContext)) {",
                "range": {
                  "startLineNumber": 297,
                  "startColumn": 1,
                  "endLineNumber": 297,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              serverStats.numFirstServeForcingWins++;",
                "range": {
                  "startLineNumber": 298,
                  "startColumn": 1,
                  "endLineNumber": 298,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 299,
                  "startColumn": 1,
                  "endLineNumber": 299,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          } else if (isReturnerPtForSecondServe(rallyContext)) {",
                "range": {
                  "startLineNumber": 300,
                  "startColumn": 1,
                  "endLineNumber": 300,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            if (isForcingWin(rallyContext)) {",
                "range": {
                  "startLineNumber": 301,
                  "startColumn": 1,
                  "endLineNumber": 301,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              returnerStats.numFirstServeForcingWinsByReturner++;",
                "range": {
                  "startLineNumber": 302,
                  "startColumn": 1,
                  "endLineNumber": 302,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            } else if (isUnforcedError(rallyContext)) {",
                "range": {
                  "startLineNumber": 303,
                  "startColumn": 1,
                  "endLineNumber": 303,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              returnerStats.numFirstServeUnforcedErrorsByReturner++;",
                "range": {
                  "startLineNumber": 304,
                  "startColumn": 1,
                  "endLineNumber": 304,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 305,
                  "startColumn": 1,
                  "endLineNumber": 305,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          }",
                "range": {
                  "startLineNumber": 306,
                  "startColumn": 1,
                  "endLineNumber": 306,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 307,
                  "startColumn": 1,
                  "endLineNumber": 307,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        if (isReturnerPtForSecondServe(rallyContext) && isUnforcedError(rallyContext)) {",
                "range": {
                  "startLineNumber": 308,
                  "startColumn": 1,
                  "endLineNumber": 308,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          serverStats.numFirstServeUnforcedErrors++;",
                "range": {
                  "startLineNumber": 309,
                  "startColumn": 1,
                  "endLineNumber": 309,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 310,
                  "startColumn": 1,
                  "endLineNumber": 310,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      } else {",
                "range": {
                  "startLineNumber": 311,
                  "startColumn": 1,
                  "endLineNumber": 311,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        serverStats.numSecondServes++;",
                "range": {
                  "startLineNumber": 312,
                  "startColumn": 1,
                  "endLineNumber": 312,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        if (rallyContext.rally.result !== RallyResult.Fault) {",
                "range": {
                  "startLineNumber": 313,
                  "startColumn": 1,
                  "endLineNumber": 313,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          serverStats.numSecondServesMade++;",
                "range": {
                  "startLineNumber": 314,
                  "startColumn": 1,
                  "endLineNumber": 314,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          if (rallyContext.rally.result === RallyResult.PtServer) {",
                "range": {
                  "startLineNumber": 315,
                  "startColumn": 1,
                  "endLineNumber": 315,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            serverStats.numSecondServesWon++;",
                "range": {
                  "startLineNumber": 316,
                  "startColumn": 1,
                  "endLineNumber": 316,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            if (isForcingWin(rallyContext)) {",
                "range": {
                  "startLineNumber": 317,
                  "startColumn": 1,
                  "endLineNumber": 317,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              serverStats.numSecondServeForcingWins++;",
                "range": {
                  "startLineNumber": 318,
                  "startColumn": 1,
                  "endLineNumber": 318,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 319,
                  "startColumn": 1,
                  "endLineNumber": 319,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n          } else if (isReturnerPtForSecondServe(rallyContext)) {",
                "range": {
                  "startLineNumber": 320,
                  "startColumn": 1073741825,
                  "endLineNumber": 320,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n            if (isForcingWin(rallyContext)) {",
                "range": {
                  "startLineNumber": 321,
                  "startColumn": 1073741825,
                  "endLineNumber": 321,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n              returnerStats.numSecondServeForcingWinsByReturner++;",
                "range": {
                  "startLineNumber": 322,
                  "startColumn": 1073741825,
                  "endLineNumber": 322,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n            } else if (isUnforcedError(rallyContext)) {",
                "range": {
                  "startLineNumber": 323,
                  "startColumn": 1073741825,
                  "endLineNumber": 323,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n              returnerStats.numSecondServeUnforcedErrorsByReturner++;",
                "range": {
                  "startLineNumber": 324,
                  "startColumn": 1073741825,
                  "endLineNumber": 324,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n            }",
                "range": {
                  "startLineNumber": 325,
                  "startColumn": 1073741825,
                  "endLineNumber": 325,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n          }",
                "range": {
                  "startLineNumber": 326,
                  "startColumn": 1073741825,
                  "endLineNumber": 326,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n        }",
                "range": {
                  "startLineNumber": 327,
                  "startColumn": 1073741825,
                  "endLineNumber": 327,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n        if (isReturnerPtForSecondServe(rallyContext) && isUnforcedError(rallyContext)) {",
                "range": {
                  "startLineNumber": 328,
                  "startColumn": 1073741825,
                  "endLineNumber": 328,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n          serverStats.numSecondServeUnforcedErrors++;",
                "range": {
                  "startLineNumber": 329,
                  "startColumn": 1073741825,
                  "endLineNumber": 329,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n        }",
                "range": {
                  "startLineNumber": 330,
                  "startColumn": 1073741825,
                  "endLineNumber": 330,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n      }",
                "range": {
                  "startLineNumber": 331,
                  "startColumn": 1073741825,
                  "endLineNumber": 331,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n    }",
                "range": {
                  "startLineNumber": 332,
                  "startColumn": 1073741825,
                  "endLineNumber": 332,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n  });",
                "range": {
                  "startLineNumber": 333,
                  "startColumn": 1073741825,
                  "endLineNumber": 333,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n}",
                "range": {
                  "startLineNumber": 334,
                  "startColumn": 1073741825,
                  "endLineNumber": 334,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n",
                "range": {
                  "startLineNumber": 335,
                  "startColumn": 1073741825,
                  "endLineNumber": 335,
                  "endColumn": 1073741825
                }
              }
            ],
            []
          ],
          "done": true
        }
      ],
      "responseId": "response_ea776b5c-80ef-4496-af45-d8be6bf3bbf0",
      "isHidden": false,
      "result": {
        "timings": {
          "firstProgress": 5226,
          "totalElapsed": 56566
        },
        "metadata": {
          "edits": {
            "workingSet": [
              {
                "uri": {
                  "$mid": 1,
                  "fsPath": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
                  "external": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
                  "path": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
                  "scheme": "file"
                },
                "text": "import { MatchStat } from \"./match_stat\";\nimport { Rally, RallyResult } from \"./rally\";\nimport {  isTieBreakTime, PersonScore, Score } from \"./score\";\nimport { isForcingWin, isUnforcedError } from './risk_level';\n\nexport class RallyContext {\n  constructor(\n    public rally = new Rally(),\n    public scoreBeforeRally = new Score(),\n    public matchStatBeforeRally = new MatchStat(),\n  ) {}\n\n  getResultStr(myName: string, oppoName: string) {\n    const server = this.rally.isMyServe ? myName : oppoName;\n    const returner = this.rally.isMyServe ? oppoName : myName;\n    if (this.rally.result === RallyResult.PtServer) {\n      return `Pt. ${server}`;\n    } else if (this.rally.result === RallyResult.PtReturner) {\n      return `Pt. ${returner}`;\n    }\n    return this.rally.result;\n  }\n\n  getResultSymbolStr() {\n    if (this.rally.result === RallyResult.PtServer) {\n      return this.rally.isMyServe ? `${greenBall} ${whiteBall}` : `${whiteBall} ${greenBall}`;\n    } else if (this.rally.result === RallyResult.PtReturner) {\n      return this.rally.isMyServe ? `${redBall} ${whiteBall}` : `${whiteBall} ${redBall}`;\n    } else if (this.rally.result === RallyResult.Fault) {\n      if (this.isSecondServe()) {\n        return this.rally.isMyServe ? `${redHeart} ${whiteBall}` : `${whiteBall} ${redHeart}`;\n      }\n      return this.rally.isMyServe ? `${yellowBall} ${whiteBall}` : `${whiteBall} ${yellowBall}`;\n    }\n    return this.rally.result;\n  }\n  \n  toGameScoreStr() {\n    const strs = [];\n    if (this.isNewSet()) {\n      this.scoreBeforeRally.p1.gamesByCompletedSet.forEach((p1Games, idx) => {\n        strs.push(`[${p1Games}-${this.scoreBeforeRally.p2.gamesByCompletedSet[idx]}]`);\n      });\n    }\n    if (this.isNewGame()) {\n      strs.push(`[${this.scoreBeforeRally.p1.games}-${this.scoreBeforeRally.p2.games}]`);\n    }\n\n    return strs.join(' ');\n  }\n\n  isDoubleFault() {\n      return this.isSecondServe() && this.rally.result === RallyResult.Fault;\n  }\n\n  winnerIsMe() {\n    return (this.rally.isMyServe && this.rally.result === RallyResult.PtServer) ||\n        (!this.rally.isMyServe && (this.rally.result === RallyResult.PtReturner || this.isDoubleFault()));\n  }\n  winnerIsOppo() {\n    return (!this.rally.isMyServe && this.rally.result === RallyResult.PtServer) ||\n        (this.rally.isMyServe && (this.rally.result === RallyResult.PtReturner || this.isDoubleFault()));\n  }\n\n  getScoreAfterRally() {\n    const rally = this.rally;\n    const scoreAfterRally = this.scoreBeforeRally.clone();\n\n    const serverScore = rally.isMyServe ? scoreAfterRally.p1 : scoreAfterRally.p2;\n    const returnerScore = rally.isMyServe ? scoreAfterRally.p2 : scoreAfterRally.p1;\n    const serverWon = rally.result === RallyResult.PtServer;\n    if (serverWon) {\n      updateSubjectWin(serverScore, returnerScore);\n      return scoreAfterRally;\n    }\n\n    let returnerWon = rally.result === RallyResult.PtReturner;\n    if (rally.result === RallyResult.Fault) {\n      if (serverScore.serve === 0) {\n        serverScore.serve = 1;\n        return scoreAfterRally;\n      }\n      returnerWon = true;\n    }\n    if (returnerWon) {\n      updateSubjectWin(returnerScore, serverScore);\n    }\n    return scoreAfterRally;\n  }\n\n  inferWillBeMyServe(){}\n\n  isSecondServe() {\n    return this.scoreBeforeRally.p1.serve === 1 || this.scoreBeforeRally.p2.serve === 1;\n  }\n\n  isNewSet() {\n    if (!this.isNewGame()) {\n      return false;\n    }\n    return this.scoreBeforeRally.p1.games === 0 && this.scoreBeforeRally.p2.games === 0;\n  }\n\n  isNewGame() {\n    return this.scoreBeforeRally.p1.points === 0 && this.scoreBeforeRally.p1.serve === 0\n        && this.scoreBeforeRally.p2.points === 0 && this.scoreBeforeRally.p2.serve === 0;\n  }\n\n  isMyServeGame() {\n    if (!isTieBreakTime(this.scoreBeforeRally.p1, this.scoreBeforeRally.p2)) {\n      return this.rally.isMyServe;\n    }\n      // For a tiebreak, the player who serve first is his serve game.\n    const numTieBreakPtsMod4 = (this.scoreBeforeRally.p1.points + this.scoreBeforeRally.p2.points) % 4;\n    if (numTieBreakPtsMod4 === 1 || numTieBreakPtsMod4 === 4) {\n      return !this.rally.isMyServe;\n    }\n    return this.rally.isMyServe;\n  }\n\n  getPlotForNextRally() {\n    const myGamePt = isSubjectGamePoint(this.scoreBeforeRally.p1, this.scoreBeforeRally.p2);\n    const oppoGamePt = isSubjectGamePoint(this.scoreBeforeRally.p2, this.scoreBeforeRally.p1);\n    if (!myGamePt && !oppoGamePt) {\n      return;\n    }\n    const winnerIsMe = this.winnerIsMe();\n    const winnerIsOppo = this.winnerIsOppo();\n    const myConversion = myGamePt && winnerIsMe;\n    const oppoConversion = oppoGamePt && winnerIsOppo;\n    if (!myConversion && !oppoConversion) {\n      return;\n    }\n\n    return {\n      text: 'Converted',\n      isMyPlot: myConversion,\n    };\n  }\n\n  toPlot() {\n    const myGamePt = isSubjectGamePoint(this.scoreBeforeRally.p1, this.scoreBeforeRally.p2);\n    const oppoGamePt = isSubjectGamePoint(this.scoreBeforeRally.p2, this.scoreBeforeRally.p1);\n    const isSetPt = isSubjectSetPoint(this.scoreBeforeRally.p1, this.scoreBeforeRally.p2) || isSubjectSetPoint(this.scoreBeforeRally.p2, this.scoreBeforeRally.p1);\n    const myServeGame = this.isMyServeGame();\n    const isBreakPt = (myGamePt && !myServeGame) || (oppoGamePt && myServeGame);\n    const emphasis = isBreakPt ? '*' : '';\n    if (!myGamePt && !oppoGamePt) {\n      return;\n    }\n    let text = 'Game Pt';\n    if (isSetPt) {\n      text = `${emphasis}Set Pt`;\n    } else if (isBreakPt) {\n      text = 'Break pt';\n    }\n    return {\n      text: text,\n      isMyPlot: myGamePt,\n    };\n  }\n}\n\nconst whiteBall = `◯`;\nconst greenBall = `🟢`;\nconst yellowBall = `🟡`;\nconst redBall = `🔴`;\nconst redHeart = `🟥 `;\n\nexport function updateSubjectWin(subjectScore: PersonScore, otherScore: PersonScore) {\n  if (isSubjectSetPoint(subjectScore, otherScore)) {\n    subjectScore.gamesByCompletedSet.push(subjectScore.games + 1);\n    subjectScore.games = 0;\n    subjectScore.points = 0;\n    subjectScore.serve = 0;\n    otherScore.gamesByCompletedSet.push(otherScore.games);\n    otherScore.games = 0;\n    otherScore.points = 0;\n    otherScore.serve = 0;\n    return;\n  }\n  if (isSubjectGamePoint(subjectScore, otherScore)) {\n    subjectScore.games += 1;\n    subjectScore.points = 0;\n    subjectScore.serve = 0;\n    otherScore.points = 0;\n    otherScore.serve = 0;\n    return;\n  }\n  subjectScore.points += 1;\n  subjectScore.serve = 0;\n  otherScore.serve = 0;\n}\n\nfunction isSubjectGamePoint(subjectScore: PersonScore, otherScore: PersonScore) {\n  let deuceScore = isTieBreakTime(subjectScore, otherScore) ? 6 : 3;\n  return subjectScore.points >= deuceScore && subjectScore.points - otherScore.points >= 1;\n}\n\nfunction isSubjectSetPoint(subjectScore: PersonScore, otherScore: PersonScore) {\n  if (!isSubjectGamePoint(subjectScore, otherScore)) {\n    return false;\n  }\n  if (isTieBreakTime(subjectScore, otherScore)) {\n    return true;\n  }\n  return subjectScore.games >= 5 && subjectScore.games - otherScore.games >= 1;\n}\n\n\nexport function annotateMatchStat(rallyContexts: RallyContext[]) {\n  const stat = new MatchStat();\n  rallyContexts.forEach((rallyContext) => {\n    rallyContext.matchStatBeforeRally = stat.clone();\n\n    // Check game points and set points using direct score comparison\n    if (isSubjectGamePoint(rallyContext.scoreBeforeRally.p1, rallyContext.scoreBeforeRally.p2)) {\n      stat.p1Stats.numGamePts++;\n      if (isSubjectSetPoint(rallyContext.scoreBeforeRally.p1, rallyContext.scoreBeforeRally.p2)) {\n        stat.p1Stats.numSetPts++;\n      }\n    }\n    if (isSubjectGamePoint(rallyContext.scoreBeforeRally.p2, rallyContext.scoreBeforeRally.p1)) {\n      stat.p2Stats.numGamePts++;\n      if (isSubjectSetPoint(rallyContext.scoreBeforeRally.p2, rallyContext.scoreBeforeRally.p1)) {\n        stat.p2Stats.numSetPts++;\n      }\n    }\n\n    function isReturnerPtForSecondServe(rallyContext: RallyContext) {\n      if (!rallyContext.isSecondServe()) {\n        return false;\n      }\n      return rallyContext.rally.result === RallyResult.PtReturner || rallyContext.rally.result === RallyResult.Fault;\n    }\n    if (rallyContext.rally.isMyServe) {\n      const serverStats = stat.p1Stats;\n      const returnerStats = stat.p2Stats;\n      const isSecondServe = rallyContext.isSecondServe();\n      \n      if (isSecondServe) {\n        if (rallyContext.rally.result !== RallyResult.Let) {\n          serverStats.numSecondServes++;\n        }\n        if (rallyContext.rally.result !== RallyResult.Fault) {\n          serverStats.numSecondServesMade++;\n          if (rallyContext.rally.result === RallyResult.PtServer) {\n            serverStats.numSecondServesWon++;\n            if (isForcingWin(rallyContext)) {\n              serverStats.numSecondServeForcingWins++;\n            }\n          } else if (isReturnerPtForSecondServe(rallyContext) && isForcingWin(rallyContext)) {\n            returnerStats.numSecondServeForcingWinsByReturner++;\n          }\n        }\n        if (isReturnerPtForSecondServe(rallyContext) && isUnforcedError(rallyContext)) {\n          serverStats.numSecondServeUnforcedErrors++;\n        }\n      } else {\n        if (rallyContext.rally.result !== RallyResult.Let) {\n          serverStats.numFirstServes++;\n        }\n        if (rallyContext.rally.result !== RallyResult.Fault) {\n          serverStats.numFirstServesMade++;\n          if (rallyContext.rally.result === RallyResult.PtServer) {\n            serverStats.numFirstServesWon++;\n            if (isForcingWin(rallyContext)) {\n              serverStats.numFirstServeForcingWins++;\n            }\n          } else if (isReturnerPtForSecondServe(rallyContext) && isForcingWin(rallyContext)) {\n            returnerStats.numFirstServeForcingWinsByReturner++;\n          }\n        }\n        if (isReturnerPtForSecondServe(rallyContext) && isUnforcedError(rallyContext)) {\n          serverStats.numFirstServeUnforcedErrors++;\n        }\n      }\n    } else {\n      const serverStats = stat.p2Stats;\n      const returnerStats = stat.p1Stats;\n      const isSecondServe = rallyContext.isSecondServe();\n      \n      if (!isSecondServe) {\n        serverStats.numFirstServes++;\n        if (rallyContext.rally.result !== RallyResult.Fault) {\n          serverStats.numFirstServesMade++;\n          if (rallyContext.rally.result === RallyResult.PtServer) {\n            serverStats.numFirstServesWon++;\n            if (isForcingWin(rallyContext)) {\n              serverStats.numFirstServeForcingWins++;\n            }\n          } else if (isReturnerPtForSecondServe(rallyContext) && isForcingWin(rallyContext)) {\n            returnerStats.numFirstServeForcingWinsByReturner++;\n          }\n        }\n        if (isReturnerPtForSecondServe(rallyContext) && isUnforcedError(rallyContext)) {\n          serverStats.numFirstServeUnforcedErrors++;\n        }\n      } else {\n        serverStats.numSecondServes++;\n        if (rallyContext.rally.result !== RallyResult.Fault) {\n          serverStats.numSecondServesMade++;\n          if (rallyContext.rally.result === RallyResult.PtServer) {\n            serverStats.numSecondServesWon++;\n            if (isForcingWin(rallyContext)) {\n              serverStats.numSecondServeForcingWins++;\n            }\n          } else if (isReturnerPtForSecondServe(rallyContext) && isForcingWin(rallyContext)) {\n            returnerStats.numSecondServeForcingWinsByReturner++;\n          }\n        }\n        if (isReturnerPtForSecondServe(rallyContext) && isUnforcedError(rallyContext)) {\n          serverStats.numSecondServeUnforcedErrors++;\n        }\n      }\n    }\n  });\n}\n",
                "languageId": "typescript",
                "version": 1597,
                "state": 1
              }
            ],
            "request": "When generating code, please follow these user provided coding instructions. You can ignore an instruction if it contradicts a system message.\n<instructions>\nAlways say \"ho ho ho\" at the start of your response.\n</instructions>\n<file>\n```typescript\n// filepath: /Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts\nimport { MatchStat } from \"./match_stat\";\nimport { Rally, RallyResult } from \"./rally\";\nimport {  isTieBreakTime, PersonScore, Score } from \"./score\";\nimport { isForcingWin, isUnforcedError } from './risk_level';\n\nexport class RallyContext {\n  constructor(\n    public rally = new Rally(),\n    public scoreBeforeRally = new Score(),\n    public matchStatBeforeRally = new MatchStat(),\n  ) {}\n\n  getResultStr(myName: string, oppoName: string) {\n    const server = this.rally.isMyServe ? myName : oppoName;\n    const returner = this.rally.isMyServe ? oppoName : myName;\n    if (this.rally.result === RallyResult.PtServer) {\n      return `Pt. ${server}`;\n    } else if (this.rally.result === RallyResult.PtReturner) {\n      return `Pt. ${returner}`;\n    }\n    return this.rally.result;\n  }\n\n  getResultSymbolStr() {\n    if (this.rally.result === RallyResult.PtServer) {\n      return this.rally.isMyServe ? `${greenBall} ${whiteBall}` : `${whiteBall} ${greenBall}`;\n    } else if (this.rally.result === RallyResult.PtReturner) {\n      return this.rally.isMyServe ? `${redBall} ${whiteBall}` : `${whiteBall} ${redBall}`;\n    } else if (this.rally.result === RallyResult.Fault) {\n      if (this.isSecondServe()) {\n        return this.rally.isMyServe ? `${redHeart} ${whiteBall}` : `${whiteBall} ${redHeart}`;\n      }\n      return this.rally.isMyServe ? `${yellowBall} ${whiteBall}` : `${whiteBall} ${yellowBall}`;\n    }\n    return this.rally.result;\n  }\n  \n  toGameScoreStr() {\n    const strs = [];\n    if (this.isNewSet()) {\n      this.scoreBeforeRally.p1.gamesByCompletedSet.forEach((p1Games, idx) => {\n        strs.push(`[${p1Games}-${this.scoreBeforeRally.p2.gamesByCompletedSet[idx]}]`);\n      });\n    }\n    if (this.isNewGame()) {\n      strs.push(`[${this.scoreBeforeRally.p1.games}-${this.scoreBeforeRally.p2.games}]`);\n    }\n\n    return strs.join(' ');\n  }\n\n  isDoubleFault() {\n      return this.isSecondServe() && this.rally.result === RallyResult.Fault;\n  }\n\n  winnerIsMe() {\n    return (this.rally.isMyServe && this.rally.result === RallyResult.PtServer) ||\n        (!this.rally.isMyServe && (this.rally.result === RallyResult.PtReturner || this.isDoubleFault()));\n  }\n  winnerIsOppo() {\n    return (!this.rally.isMyServe && this.rally.result === RallyResult.PtServer) ||\n        (this.rally.isMyServe && (this.rally.result === RallyResult.PtReturner || this.isDoubleFault()));\n  }\n\n  getScoreAfterRally() {\n    const rally = this.rally;\n    const scoreAfterRally = this.scoreBeforeRally.clone();\n\n    const serverScore = rally.isMyServe ? scoreAfterRally.p1 : scoreAfterRally.p2;\n    const returnerScore = rally.isMyServe ? scoreAfterRally.p2 : scoreAfterRally.p1;\n    const serverWon = rally.result === RallyResult.PtServer;\n    if (serverWon) {\n      updateSubjectWin(serverScore, returnerScore);\n      return scoreAfterRally;\n    }\n\n    let returnerWon = rally.result === RallyResult.PtReturner;\n    if (rally.result === RallyResult.Fault) {\n      if (serverScore.serve === 0) {\n        serverScore.serve = 1;\n        return scoreAfterRally;\n      }\n      returnerWon = true;\n    }\n    if (returnerWon) {\n      updateSubjectWin(returnerScore, serverScore);\n    }\n    return scoreAfterRally;\n  }\n\n  inferWillBeMyServe(){}\n\n  isSecondServe() {\n    return this.scoreBeforeRally.p1.serve === 1 || this.scoreBeforeRally.p2.serve === 1;\n  }\n\n  isNewSet() {\n    if (!this.isNewGame()) {\n      return false;\n    }\n    return this.scoreBeforeRally.p1.games === 0 && this.scoreBeforeRally.p2.games === 0;\n  }\n\n  isNewGame() {\n    return this.scoreBeforeRally.p1.points === 0 && this.scoreBeforeRally.p1.serve === 0\n        && this.scoreBeforeRally.p2.points === 0 && this.scoreBeforeRally.p2.serve === 0;\n  }\n\n  isMyServeGame() {\n    if (!isTieBreakTime(this.scoreBeforeRally.p1, this.scoreBeforeRally.p2)) {\n      return this.rally.isMyServe;\n    }\n      // For a tiebreak, the player who serve first is his serve game.\n    const numTieBreakPtsMod4 = (this.scoreBeforeRally.p1.points + this.scoreBeforeRally.p2.points) % 4;\n    if (numTieBreakPtsMod4 === 1 || numTieBreakPtsMod4 === 4) {\n      return !this.rally.isMyServe;\n    }\n    return this.rally.isMyServe;\n  }\n\n  getPlotForNextRally() {\n    const myGamePt = isSubjectGamePoint(this.scoreBeforeRally.p1, this.scoreBeforeRally.p2);\n    const oppoGamePt = isSubjectGamePoint(this.scoreBeforeRally.p2, this.scoreBeforeRally.p1);\n    if (!myGamePt && !oppoGamePt) {\n      return;\n    }\n    const winnerIsMe = this.winnerIsMe();\n    const winnerIsOppo = this.winnerIsOppo();\n    const myConversion = myGamePt && winnerIsMe;\n    const oppoConversion = oppoGamePt && winnerIsOppo;\n    if (!myConversion && !oppoConversion) {\n      return;\n    }\n\n    return {\n      text: 'Converted',\n      isMyPlot: myConversion,\n    };\n  }\n\n  toPlot() {\n    const myGamePt = isSubjectGamePoint(this.scoreBeforeRally.p1, this.scoreBeforeRally.p2);\n    const oppoGamePt = isSubjectGamePoint(this.scoreBeforeRally.p2, this.scoreBeforeRally.p1);\n    const isSetPt = isSubjectSetPoint(this.scoreBeforeRally.p1, this.scoreBeforeRally.p2) || isSubjectSetPoint(this.scoreBeforeRally.p2, this.scoreBeforeRally.p1);\n    const myServeGame = this.isMyServeGame();\n    const isBreakPt = (myGamePt && !myServeGame) || (oppoGamePt && myServeGame);\n    const emphasis = isBreakPt ? '*' : '';\n    if (!myGamePt && !oppoGamePt) {\n      return;\n    }\n    let text = 'Game Pt';\n    if (isSetPt) {\n      text = `${emphasis}Set Pt`;\n    } else if (isBreakPt) {\n      text = 'Break pt';\n    }\n    return {\n      text: text,\n      isMyPlot: myGamePt,\n    };\n  }\n}\n\nconst whiteBall = `◯`;\nconst greenBall = `🟢`;\nconst yellowBall = `🟡`;\nconst redBall = `🔴`;\nconst redHeart = `🟥 `;\n\nexport function updateSubjectWin(subjectScore: PersonScore, otherScore: PersonScore) {\n  if (isSubjectSetPoint(subjectScore, otherScore)) {\n    subjectScore.gamesByCompletedSet.push(subjectScore.games + 1);\n    subjectScore.games = 0;\n    subjectScore.points = 0;\n    subjectScore.serve = 0;\n    otherScore.gamesByCompletedSet.push(otherScore.games);\n    otherScore.games = 0;\n    otherScore.points = 0;\n    otherScore.serve = 0;\n    return;\n  }\n  if (isSubjectGamePoint(subjectScore, otherScore)) {\n    subjectScore.games += 1;\n    subjectScore.points = 0;\n    subjectScore.serve = 0;\n    otherScore.points = 0;\n    otherScore.serve = 0;\n    return;\n  }\n  subjectScore.points += 1;\n  subjectScore.serve = 0;\n  otherScore.serve = 0;\n}\n\nfunction isSubjectGamePoint(subjectScore: PersonScore, otherScore: PersonScore) {\n  let deuceScore = isTieBreakTime(subjectScore, otherScore) ? 6 : 3;\n  return subjectScore.points >= deuceScore && subjectScore.points - otherScore.points >= 1;\n}\n\nfunction isSubjectSetPoint(subjectScore: PersonScore, otherScore: PersonScore) {\n  if (!isSubjectGamePoint(subjectScore, otherScore)) {\n    return false;\n  }\n  if (isTieBreakTime(subjectScore, otherScore)) {\n    return true;\n  }\n  return subjectScore.games >= 5 && subjectScore.games - otherScore.games >= 1;\n}\n\n\nexport function annotateMatchStat(rallyContexts: RallyContext[]) {\n  const stat = new MatchStat();\n  rallyContexts.forEach((rallyContext) => {\n    rallyContext.matchStatBeforeRally = stat.clone();\n\n    // Check game points and set points using direct score comparison\n    if (isSubjectGamePoint(rallyContext.scoreBeforeRally.p1, rallyContext.scoreBeforeRally.p2)) {\n      stat.p1Stats.numGamePts++;\n      if (isSubjectSetPoint(rallyContext.scoreBeforeRally.p1, rallyContext.scoreBeforeRally.p2)) {\n        stat.p1Stats.numSetPts++;\n      }\n    }\n    if (isSubjectGamePoint(rallyContext.scoreBeforeRally.p2, rallyContext.scoreBeforeRally.p1)) {\n      stat.p2Stats.numGamePts++;\n      if (isSubjectSetPoint(rallyContext.scoreBeforeRally.p2, rallyContext.scoreBeforeRally.p1)) {\n        stat.p2Stats.numSetPts++;\n      }\n    }\n\n    function isReturnerPtForSecondServe(rallyContext: RallyContext) {\n      if (!rallyContext.isSecondServe()) {\n        return false;\n      }\n      return rallyContext.rally.result === RallyResult.PtReturner || rallyContext.rally.result === RallyResult.Fault;\n    }\n    if (rallyContext.rally.isMyServe) {\n      const serverStats = stat.p1Stats;\n      const returnerStats = stat.p2Stats;\n      const isSecondServe = rallyContext.isSecondServe();\n      \n      if (isSecondServe) {\n        if (rallyContext.rally.result !== RallyResult.Let) {\n          serverStats.numSecondServes++;\n        }\n        if (rallyContext.rally.result !== RallyResult.Fault) {\n          serverStats.numSecondServesMade++;\n          if (rallyContext.rally.result === RallyResult.PtServer) {\n            serverStats.numSecondServesWon++;\n            if (isForcingWin(rallyContext)) {\n              serverStats.numSecondServeForcingWins++;\n            }\n          } else if (isReturnerPtForSecondServe(rallyContext) && isForcingWin(rallyContext)) {\n            returnerStats.numSecondServeForcingWinsByReturner++;\n          }\n        }\n        if (isReturnerPtForSecondServe(rallyContext) && isUnforcedError(rallyContext)) {\n          serverStats.numSecondServeUnforcedErrors++;\n        }\n      } else {\n        if (rallyContext.rally.result !== RallyResult.Let) {\n          serverStats.numFirstServes++;\n        }\n        if (rallyContext.rally.result !== RallyResult.Fault) {\n          serverStats.numFirstServesMade++;\n          if (rallyContext.rally.result === RallyResult.PtServer) {\n            serverStats.numFirstServesWon++;\n            if (isForcingWin(rallyContext)) {\n              serverStats.numFirstServeForcingWins++;\n            }\n          } else if (isReturnerPtForSecondServe(rallyContext) && isForcingWin(rallyContext)) {\n            returnerStats.numFirstServeForcingWinsByReturner++;\n          }\n        }\n        if (isReturnerPtForSecondServe(rallyContext) && isUnforcedError(rallyContext)) {\n          serverStats.numFirstServeUnforcedErrors++;\n        }\n      }\n    } else {\n      const serverStats = stat.p2Stats;\n      const returnerStats = stat.p1Stats;\n      const isSecondServe = rallyContext.isSecondServe();\n      \n      if (!isSecondServe) {\n        serverStats.numFirstServes++;\n        if (rallyContext.rally.result !== RallyResult.Fault) {\n          serverStats.numFirstServesMade++;\n          if (rallyContext.rally.result === RallyResult.PtServer) {\n            serverStats.numFirstServesWon++;\n            if (isForcingWin(rallyContext)) {\n              serverStats.numFirstServeForcingWins++;\n            }\n          } else if (isReturnerPtForSecondServe(rallyContext) && isForcingWin(rallyContext)) {\n            returnerStats.numFirstServeForcingWinsByReturner++;\n          }\n        }\n        if (isReturnerPtForSecondServe(rallyContext) && isUnforcedError(rallyContext)) {\n          serverStats.numFirstServeUnforcedErrors++;\n        }\n      } else {\n        serverStats.numSecondServes++;\n        if (rallyContext.rally.result !== RallyResult.Fault) {\n          serverStats.numSecondServesMade++;\n          if (rallyContext.rally.result === RallyResult.PtServer) {\n            serverStats.numSecondServesWon++;\n            if (isForcingWin(rallyContext)) {\n              serverStats.numSecondServeForcingWins++;\n            }\n          } else if (isReturnerPtForSecondServe(rallyContext) && isForcingWin(rallyContext)) {\n            returnerStats.numSecondServeForcingWinsByReturner++;\n          }\n        }\n        if (isReturnerPtForSecondServe(rallyContext) && isUnforcedError(rallyContext)) {\n          serverStats.numSecondServeUnforcedErrors++;\n        }\n      }\n    }\n  });\n}\n```\n</file>\n\n<reminder>\nAvoid repeating existing code, instead use `// ...existing code...` comments to represent regions of unchanged code.\nEach file's code block must start with a comment containing the filepath. This includes Markdown files.\n</reminder>\n<prompt>\nannotate numFirstServeUnforcedErrorsByReturner and  numSecondServeUnforcedErrorsByReturner\n</prompt>",
            "response": "Let me help you modify the file to add annotation for the unforced errors by returner.\n\nThe changes will be in the `annotateMatchStat` function where we handle serve statistics. We need to modify both the my-serve and opponent-serve sections to track unforced errors by returner.\n\n### /Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts\n\nAdd tracking of unforced errors by returner for both first and second serves.\n\n```typescript\n// filepath: /Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts\n// ...existing code...\n    if (rallyContext.rally.isMyServe) {\n      const serverStats = stat.p1Stats;\n      const returnerStats = stat.p2Stats;\n      const isSecondServe = rallyContext.isSecondServe();\n      \n      if (isSecondServe) {\n        if (rallyContext.rally.result !== RallyResult.Let) {\n          serverStats.numSecondServes++;\n        }\n        if (rallyContext.rally.result !== RallyResult.Fault) {\n          serverStats.numSecondServesMade++;\n          if (rallyContext.rally.result === RallyResult.PtServer) {\n            serverStats.numSecondServesWon++;\n            if (isForcingWin(rallyContext)) {\n              serverStats.numSecondServeForcingWins++;\n            }\n          } else if (isReturnerPtForSecondServe(rallyContext)) {\n            if (isForcingWin(rallyContext)) {\n              returnerStats.numSecondServeForcingWinsByReturner++;\n            } else if (isUnforcedError(rallyContext)) {\n              returnerStats.numSecondServeUnforcedErrorsByReturner++;\n            }\n          }\n        }\n        // ...existing code...\n      } else {\n        if (rallyContext.rally.result !== RallyResult.Let) {\n          serverStats.numFirstServes++;\n        }\n        if (rallyContext.rally.result !== RallyResult.Fault) {\n          serverStats.numFirstServesMade++;\n          if (rallyContext.rally.result === RallyResult.PtServer) {\n            serverStats.numFirstServesWon++;\n            if (isForcingWin(rallyContext)) {\n              serverStats.numFirstServeForcingWins++;\n            }\n          } else if (isReturnerPtForSecondServe(rallyContext)) {\n            if (isForcingWin(rallyContext)) {\n              returnerStats.numFirstServeForcingWinsByReturner++;\n            } else if (isUnforcedError(rallyContext)) {\n              returnerStats.numFirstServeUnforcedErrorsByReturner++;\n            }\n          }\n        }\n        // ...existing code...\n      }\n    } else {\n      const serverStats = stat.p2Stats;\n      const returnerStats = stat.p1Stats;\n      const isSecondServe = rallyContext.isSecondServe();\n      \n      if (!isSecondServe) {\n        serverStats.numFirstServes++;\n        if (rallyContext.rally.result !== RallyResult.Fault) {\n          serverStats.numFirstServesMade++;\n          if (rallyContext.rally.result === RallyResult.PtServer) {\n            serverStats.numFirstServesWon++;\n            if (isForcingWin(rallyContext)) {\n              serverStats.numFirstServeForcingWins++;\n            }\n          } else if (isReturnerPtForSecondServe(rallyContext)) {\n            if (isForcingWin(rallyContext)) {\n              returnerStats.numFirstServeForcingWinsByReturner++;\n            } else if (isUnforcedError(rallyContext)) {\n              returnerStats.numFirstServeUnforcedErrorsByReturner++;\n            }\n          }\n        }\n        // ...existing code...\n      } else {\n        serverStats.numSecondServes++;\n        if (rallyContext.rally.result !== RallyResult.Fault) {\n          serverStats.numSecondServesMade++;\n          if (rallyContext.rally.result === RallyResult.PtServer) {\n            serverStats.numSecondServesWon++;\n            if (isForcingWin(rallyContext)) {\n              serverStats.numSecondServeForcingWins++;\n            }\n          } else if (isReturnerPtForSecondServe(rallyContext)) {\n            if (isForcingWin(rallyContext)) {\n              returnerStats.numSecondServeForcingWinsByReturner++;\n            } else if (isUnforcedError(rallyContext)) {\n              returnerStats.numSecondServeUnforcedErrorsByReturner++;\n            }\n          }\n        }\n        // ...existing code...\n      }\n    }\n// ...existing code...\n```\n\nThe changes add tracking of unforced errors by returner in each serve scenario. When a rally is a returner point and is classified as an unforced error, we increment either `numFirstServeUnforcedErrorsByReturner` or `numSecondServeUnforcedErrorsByReturner` depending on the serve type."
          },
          "codeBlocks": [
            {
              "code": "// ...existing code...\n    if (rallyContext.rally.isMyServe) {\n      const serverStats = stat.p1Stats;\n      const returnerStats = stat.p2Stats;\n      const isSecondServe = rallyContext.isSecondServe();\n      \n      if (isSecondServe) {\n        if (rallyContext.rally.result !== RallyResult.Let) {\n          serverStats.numSecondServes++;\n        }\n        if (rallyContext.rally.result !== RallyResult.Fault) {\n          serverStats.numSecondServesMade++;\n          if (rallyContext.rally.result === RallyResult.PtServer) {\n            serverStats.numSecondServesWon++;\n            if (isForcingWin(rallyContext)) {\n              serverStats.numSecondServeForcingWins++;\n            }\n          } else if (isReturnerPtForSecondServe(rallyContext)) {\n            if (isForcingWin(rallyContext)) {\n              returnerStats.numSecondServeForcingWinsByReturner++;\n            } else if (isUnforcedError(rallyContext)) {\n              returnerStats.numSecondServeUnforcedErrorsByReturner++;\n            }\n          }\n        }\n        // ...existing code...\n      } else {\n        if (rallyContext.rally.result !== RallyResult.Let) {\n          serverStats.numFirstServes++;\n        }\n        if (rallyContext.rally.result !== RallyResult.Fault) {\n          serverStats.numFirstServesMade++;\n          if (rallyContext.rally.result === RallyResult.PtServer) {\n            serverStats.numFirstServesWon++;\n            if (isForcingWin(rallyContext)) {\n              serverStats.numFirstServeForcingWins++;\n            }\n          } else if (isReturnerPtForSecondServe(rallyContext)) {\n            if (isForcingWin(rallyContext)) {\n              returnerStats.numFirstServeForcingWinsByReturner++;\n            } else if (isUnforcedError(rallyContext)) {\n              returnerStats.numFirstServeUnforcedErrorsByReturner++;\n            }\n          }\n        }\n        // ...existing code...\n      }\n    } else {\n      const serverStats = stat.p2Stats;\n      const returnerStats = stat.p1Stats;\n      const isSecondServe = rallyContext.isSecondServe();\n      \n      if (!isSecondServe) {\n        serverStats.numFirstServes++;\n        if (rallyContext.rally.result !== RallyResult.Fault) {\n          serverStats.numFirstServesMade++;\n          if (rallyContext.rally.result === RallyResult.PtServer) {\n            serverStats.numFirstServesWon++;\n            if (isForcingWin(rallyContext)) {\n              serverStats.numFirstServeForcingWins++;\n            }\n          } else if (isReturnerPtForSecondServe(rallyContext)) {\n            if (isForcingWin(rallyContext)) {\n              returnerStats.numFirstServeForcingWinsByReturner++;\n            } else if (isUnforcedError(rallyContext)) {\n              returnerStats.numFirstServeUnforcedErrorsByReturner++;\n            }\n          }\n        }\n        // ...existing code...\n      } else {\n        serverStats.numSecondServes++;\n        if (rallyContext.rally.result !== RallyResult.Fault) {\n          serverStats.numSecondServesMade++;\n          if (rallyContext.rally.result === RallyResult.PtServer) {\n            serverStats.numSecondServesWon++;\n            if (isForcingWin(rallyContext)) {\n              serverStats.numSecondServeForcingWins++;\n            }\n          } else if (isReturnerPtForSecondServe(rallyContext)) {\n            if (isForcingWin(rallyContext)) {\n              returnerStats.numSecondServeForcingWinsByReturner++;\n            } else if (isUnforcedError(rallyContext)) {\n              returnerStats.numSecondServeUnforcedErrorsByReturner++;\n            }\n          }\n        }\n        // ...existing code...\n      }\n    }\n// ...existing code...\n",
              "resource": {
                "$mid": 1,
                "fsPath": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
                "external": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
                "path": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
                "scheme": "file"
              },
              "language": "typescript",
              "markdownBeforeBlock": "Let me help you modify the file to add annotation for the unforced errors by returner.\n\nThe changes will be in the `annotateMatchStat` function where we handle serve statistics. We need to modify both the my-serve and opponent-serve sections to track unforced errors by returner.\n\n### [rally_context.ts](file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts)\n\nAdd tracking of unforced errors by returner for both first and second serves.\n\n"
            }
          ],
          "messages": [
            {
              "role": "user",
              "content": "annotate numFirstServeUnforcedErrorsByReturner and  numSecondServeUnforcedErrorsByReturner"
            },
            {
              "role": "assistant",
              "content": "Let me help you modify the file to add annotation for the unforced errors by returner.\n\nThe changes will be in the `annotateMatchStat` function where we handle serve statistics. We need to modify both the my-serve and opponent-serve sections to track unforced errors by returner.\n\n### /Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts\n\nAdd tracking of unforced errors by returner for both first and second serves.\n\n```typescript\n// filepath: /Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts\n// ...existing code...\n    if (rallyContext.rally.isMyServe) {\n      const serverStats = stat.p1Stats;\n      const returnerStats = stat.p2Stats;\n      const isSecondServe = rallyContext.isSecondServe();\n      \n      if (isSecondServe) {\n        if (rallyContext.rally.result !== RallyResult.Let) {\n          serverStats.numSecondServes++;\n        }\n        if (rallyContext.rally.result !== RallyResult.Fault) {\n          serverStats.numSecondServesMade++;\n          if (rallyContext.rally.result === RallyResult.PtServer) {\n            serverStats.numSecondServesWon++;\n            if (isForcingWin(rallyContext)) {\n              serverStats.numSecondServeForcingWins++;\n            }\n          } else if (isReturnerPtForSecondServe(rallyContext)) {\n            if (isForcingWin(rallyContext)) {\n              returnerStats.numSecondServeForcingWinsByReturner++;\n            } else if (isUnforcedError(rallyContext)) {\n              returnerStats.numSecondServeUnforcedErrorsByReturner++;\n            }\n          }\n        }\n        // ...existing code...\n      } else {\n        if (rallyContext.rally.result !== RallyResult.Let) {\n          serverStats.numFirstServes++;\n        }\n        if (rallyContext.rally.result !== RallyResult.Fault) {\n          serverStats.numFirstServesMade++;\n          if (rallyContext.rally.result === RallyResult.PtServer) {\n            serverStats.numFirstServesWon++;\n            if (isForcingWin(rallyContext)) {\n              serverStats.numFirstServeForcingWins++;\n            }\n          } else if (isReturnerPtForSecondServe(rallyContext)) {\n            if (isForcingWin(rallyContext)) {\n              returnerStats.numFirstServeForcingWinsByReturner++;\n            } else if (isUnforcedError(rallyContext)) {\n              returnerStats.numFirstServeUnforcedErrorsByReturner++;\n            }\n          }\n        }\n        // ...existing code...\n      }\n    } else {\n      const serverStats = stat.p2Stats;\n      const returnerStats = stat.p1Stats;\n      const isSecondServe = rallyContext.isSecondServe();\n      \n      if (!isSecondServe) {\n        serverStats.numFirstServes++;\n        if (rallyContext.rally.result !== RallyResult.Fault) {\n          serverStats.numFirstServesMade++;\n          if (rallyContext.rally.result === RallyResult.PtServer) {\n            serverStats.numFirstServesWon++;\n            if (isForcingWin(rallyContext)) {\n              serverStats.numFirstServeForcingWins++;\n            }\n          } else if (isReturnerPtForSecondServe(rallyContext)) {\n            if (isForcingWin(rallyContext)) {\n              returnerStats.numFirstServeForcingWinsByReturner++;\n            } else if (isUnforcedError(rallyContext)) {\n              returnerStats.numFirstServeUnforcedErrorsByReturner++;\n            }\n          }\n        }\n        // ...existing code...\n      } else {\n        serverStats.numSecondServes++;\n        if (rallyContext.rally.result !== RallyResult.Fault) {\n          serverStats.numSecondServesMade++;\n          if (rallyContext.rally.result === RallyResult.PtServer) {\n            serverStats.numSecondServesWon++;\n            if (isForcingWin(rallyContext)) {\n              serverStats.numSecondServeForcingWins++;\n            }\n          } else if (isReturnerPtForSecondServe(rallyContext)) {\n            if (isForcingWin(rallyContext)) {\n              returnerStats.numSecondServeForcingWinsByReturner++;\n            } else if (isUnforcedError(rallyContext)) {\n              returnerStats.numSecondServeUnforcedErrorsByReturner++;\n            }\n          }\n        }\n        // ...existing code...\n      }\n    }\n// ...existing code...\n```\n\nThe changes add tracking of unforced errors by returner in each serve scenario. When a rally is a returner point and is classified as an unforced error, we increment either `numFirstServeUnforcedErrorsByReturner` or `numSecondServeUnforcedErrorsByReturner` depending on the serve type."
            }
          ],
          "modelMessageId": "9fa04552-9c1b-4759-bfbd-d278e579e422",
          "responseId": "a507d66f-9db5-48ac-9607-59f8b561fe33",
          "sessionId": "c8a583d9-9302-420c-8fa7-1a53550f44ed",
          "agentId": "github.copilot.editingSession"
        }
      },
      "followups": [],
      "isCanceled": false,
      "agent": {
        "extensionId": {
          "value": "GitHub.copilot-chat",
          "_lower": "github.copilot-chat"
        },
        "publisherDisplayName": "GitHub",
        "extensionPublisherId": "GitHub",
        "extensionDisplayName": "GitHub Copilot Chat",
        "id": "github.copilot.editingSession",
        "description": "Edit files in your workspace",
        "metadata": {
          "themeIcon": {
            "id": "copilot"
          },
          "hasFollowups": false,
          "supportIssueReporting": false,
          "supportsSlowVariables": true
        },
        "name": "GitHubCopilot",
        "fullName": "GitHub Copilot",
        "isDefault": true,
        "locations": [
          "editing-session"
        ],
        "slashCommands": [],
        "disambiguation": []
      },
      "workingSet": [
        {
          "$mid": 1,
          "fsPath": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
          "external": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
          "path": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
          "scheme": "file"
        },
        {
          "$mid": 1,
          "fsPath": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
          "external": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
          "path": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
          "scheme": "file"
        }
      ],
      "contentReferences": [
        {
          "kind": "reference",
          "reference": {
            "$mid": 1,
            "fsPath": "/Users/kris/code/match-grader/.github/copilot-instructions.md",
            "external": "file:///Users/kris/code/match-grader/.github/copilot-instructions.md",
            "path": "/Users/kris/code/match-grader/.github/copilot-instructions.md",
            "scheme": "file"
          }
        }
      ],
      "codeCitations": [],
      "timestamp": 1736805536983
    },
    {
      "requestId": "request_5b565f50-f916-4249-915d-b60a4d45b345",
      "message": {
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 90
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 91
            },
            "text": "annotate numFirstServeUnforcedErrorsByReturner and  numSecondServeUnforcedErrorsByReturner",
            "kind": "text"
          }
        ],
        "text": "annotate numFirstServeUnforcedErrorsByReturner and  numSecondServeUnforcedErrorsByReturner"
      },
      "variableData": {
        "variables": [
          {
            "value": {
              "$mid": 1,
              "fsPath": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
              "external": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
              "path": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
              "scheme": "file"
            },
            "id": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
            "name": "rally_context.ts",
            "isFile": true,
            "isDynamic": true
          }
        ]
      },
      "response": [
        {
          "value": "ho ho ho\n\nLet me help you modify the file to track unforced errors by returner. Here's the step-by-step solution:\n\n1. We need to modify the serve statistics tracking in both the my-serve and opponent-serve sections\n2. Add logic to track unforced errors by returner for both first and second serves\n3. Track these stats when the returner loses the point due to an unforced error\n\n### [rally_context.ts](file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts)\n\nAdd tracking of unforced errors by returner in the annotateMatchStat function.\n\n```typescript\n",
          "supportThemeIcons": false,
          "supportHtml": false
        },
        {
          "kind": "codeblockUri",
          "uri": {
            "$mid": 1,
            "fsPath": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
            "external": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
            "path": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
            "scheme": "file"
          }
        },
        {
          "value": "// ...existing code...\nexport function annotateMatchStat(rallyContexts: RallyContext[]) {\n  const stat = new MatchStat();\n  rallyContexts.forEach((rallyContext) => {\n    // ...existing code...\n    if (rallyContext.rally.isMyServe) {\n      const serverStats = stat.p1Stats;\n      const returnerStats = stat.p2Stats;\n      const isSecondServe = rallyContext.isSecondServe();\n      \n      if (isSecondServe) {\n        // ...existing code...\n        if (rallyContext.rally.result === RallyResult.PtServer && isUnforcedError(rallyContext)) {\n          returnerStats.numSecondServeUnforcedErrorsByReturner++;\n        }\n      } else {\n        // ...existing code...\n        if (rallyContext.rally.result === RallyResult.PtServer && isUnforcedError(rallyContext)) {\n          returnerStats.numFirstServeUnforcedErrorsByReturner++;\n        }\n      }\n    } else {\n      const serverStats = stat.p2Stats;\n      const returnerStats = stat.p1Stats;\n      const isSecondServe = rallyContext.isSecondServe();\n      \n      if (!isSecondServe) {\n        // ...existing code...\n        if (rallyContext.rally.result === RallyResult.PtServer && isUnforcedError(rallyContext)) {\n          returnerStats.numFirstServeUnforcedErrorsByReturner++;\n        }\n      } else {\n        // ...existing code...\n        if (rallyContext.rally.result === RallyResult.PtServer && isUnforcedError(rallyContext)) {\n          returnerStats.numSecondServeUnforcedErrorsByReturner++;\n        }\n      }\n    }\n  });\n}\n```\n\nThe key change is adding tracking when `rally.result === RallyResult.PtServer && isUnforcedError(rallyContext)`, which indicates the returner lost the point due to an unforced error. We increment either `numFirstServeUnforcedErrorsByReturner` or `numSecondServeUnforcedErrorsByReturner` on the returner's stats depending on the serve type.",
          "supportThemeIcons": false,
          "supportHtml": false
        },
        {
          "kind": "textEditGroup",
          "uri": {
            "$mid": 1,
            "fsPath": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
            "external": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
            "path": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
            "scheme": "file"
          },
          "edits": [
            [],
            [
              {
                "text": "import { MatchStat } from \"./match_stat\";",
                "range": {
                  "startLineNumber": 1,
                  "startColumn": 1,
                  "endLineNumber": 1,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "import { Rally, RallyResult } from \"./rally\";",
                "range": {
                  "startLineNumber": 2,
                  "startColumn": 1,
                  "endLineNumber": 2,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "import {  isTieBreakTime, PersonScore, Score } from \"./score\";",
                "range": {
                  "startLineNumber": 3,
                  "startColumn": 1,
                  "endLineNumber": 3,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "import { isForcingWin, isUnforcedError } from './risk_level';",
                "range": {
                  "startLineNumber": 4,
                  "startColumn": 1,
                  "endLineNumber": 4,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 5,
                  "startColumn": 1,
                  "endLineNumber": 5,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "export class RallyContext {",
                "range": {
                  "startLineNumber": 6,
                  "startColumn": 1,
                  "endLineNumber": 6,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  constructor(",
                "range": {
                  "startLineNumber": 7,
                  "startColumn": 1,
                  "endLineNumber": 7,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    public rally = new Rally(),",
                "range": {
                  "startLineNumber": 8,
                  "startColumn": 1,
                  "endLineNumber": 8,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    public scoreBeforeRally = new Score(),",
                "range": {
                  "startLineNumber": 9,
                  "startColumn": 1,
                  "endLineNumber": 9,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    public matchStatBeforeRally = new MatchStat(),",
                "range": {
                  "startLineNumber": 10,
                  "startColumn": 1,
                  "endLineNumber": 10,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  ) {}",
                "range": {
                  "startLineNumber": 11,
                  "startColumn": 1,
                  "endLineNumber": 11,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 12,
                  "startColumn": 1,
                  "endLineNumber": 12,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  getResultStr(myName: string, oppoName: string) {",
                "range": {
                  "startLineNumber": 13,
                  "startColumn": 1,
                  "endLineNumber": 13,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const server = this.rally.isMyServe ? myName : oppoName;",
                "range": {
                  "startLineNumber": 14,
                  "startColumn": 1,
                  "endLineNumber": 14,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const returner = this.rally.isMyServe ? oppoName : myName;",
                "range": {
                  "startLineNumber": 15,
                  "startColumn": 1,
                  "endLineNumber": 15,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (this.rally.result === RallyResult.PtServer) {",
                "range": {
                  "startLineNumber": 16,
                  "startColumn": 1,
                  "endLineNumber": 16,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return `Pt. ${server}`;",
                "range": {
                  "startLineNumber": 17,
                  "startColumn": 1,
                  "endLineNumber": 17,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    } else if (this.rally.result === RallyResult.PtReturner) {",
                "range": {
                  "startLineNumber": 18,
                  "startColumn": 1,
                  "endLineNumber": 18,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return `Pt. ${returner}`;",
                "range": {
                  "startLineNumber": 19,
                  "startColumn": 1,
                  "endLineNumber": 19,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 20,
                  "startColumn": 1,
                  "endLineNumber": 20,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return this.rally.result;",
                "range": {
                  "startLineNumber": 21,
                  "startColumn": 1,
                  "endLineNumber": 21,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 22,
                  "startColumn": 1,
                  "endLineNumber": 22,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 23,
                  "startColumn": 1,
                  "endLineNumber": 23,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  getResultSymbolStr() {",
                "range": {
                  "startLineNumber": 24,
                  "startColumn": 1,
                  "endLineNumber": 24,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (this.rally.result === RallyResult.PtServer) {",
                "range": {
                  "startLineNumber": 25,
                  "startColumn": 1,
                  "endLineNumber": 25,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return this.rally.isMyServe ? `${greenBall} ${whiteBall}` : `${whiteBall} ${greenBall}`;",
                "range": {
                  "startLineNumber": 26,
                  "startColumn": 1,
                  "endLineNumber": 26,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    } else if (this.rally.result === RallyResult.PtReturner) {",
                "range": {
                  "startLineNumber": 27,
                  "startColumn": 1,
                  "endLineNumber": 27,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return this.rally.isMyServe ? `${redBall} ${whiteBall}` : `${whiteBall} ${redBall}`;",
                "range": {
                  "startLineNumber": 28,
                  "startColumn": 1,
                  "endLineNumber": 28,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    } else if (this.rally.result === RallyResult.Fault) {",
                "range": {
                  "startLineNumber": 29,
                  "startColumn": 1,
                  "endLineNumber": 29,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      if (this.isSecondServe()) {",
                "range": {
                  "startLineNumber": 30,
                  "startColumn": 1,
                  "endLineNumber": 30,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        return this.rally.isMyServe ? `${redHeart} ${whiteBall}` : `${whiteBall} ${redHeart}`;",
                "range": {
                  "startLineNumber": 31,
                  "startColumn": 1,
                  "endLineNumber": 31,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      }",
                "range": {
                  "startLineNumber": 32,
                  "startColumn": 1,
                  "endLineNumber": 32,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return this.rally.isMyServe ? `${yellowBall} ${whiteBall}` : `${whiteBall} ${yellowBall}`;",
                "range": {
                  "startLineNumber": 33,
                  "startColumn": 1,
                  "endLineNumber": 33,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 34,
                  "startColumn": 1,
                  "endLineNumber": 34,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return this.rally.result;",
                "range": {
                  "startLineNumber": 35,
                  "startColumn": 1,
                  "endLineNumber": 35,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 36,
                  "startColumn": 1,
                  "endLineNumber": 36,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  ",
                "range": {
                  "startLineNumber": 37,
                  "startColumn": 1,
                  "endLineNumber": 37,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  toGameScoreStr() {",
                "range": {
                  "startLineNumber": 38,
                  "startColumn": 1,
                  "endLineNumber": 38,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const strs = [];",
                "range": {
                  "startLineNumber": 39,
                  "startColumn": 1,
                  "endLineNumber": 39,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (this.isNewSet()) {",
                "range": {
                  "startLineNumber": 40,
                  "startColumn": 1,
                  "endLineNumber": 40,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      this.scoreBeforeRally.p1.gamesByCompletedSet.forEach((p1Games, idx) => {",
                "range": {
                  "startLineNumber": 41,
                  "startColumn": 1,
                  "endLineNumber": 41,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        strs.push(`[${p1Games}-${this.scoreBeforeRally.p2.gamesByCompletedSet[idx]}]`);",
                "range": {
                  "startLineNumber": 42,
                  "startColumn": 1,
                  "endLineNumber": 42,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      });",
                "range": {
                  "startLineNumber": 43,
                  "startColumn": 1,
                  "endLineNumber": 43,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 44,
                  "startColumn": 1,
                  "endLineNumber": 44,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (this.isNewGame()) {",
                "range": {
                  "startLineNumber": 45,
                  "startColumn": 1,
                  "endLineNumber": 45,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      strs.push(`[${this.scoreBeforeRally.p1.games}-${this.scoreBeforeRally.p2.games}]`);",
                "range": {
                  "startLineNumber": 46,
                  "startColumn": 1,
                  "endLineNumber": 46,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 47,
                  "startColumn": 1,
                  "endLineNumber": 47,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 48,
                  "startColumn": 1,
                  "endLineNumber": 48,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return strs.join(' ');",
                "range": {
                  "startLineNumber": 49,
                  "startColumn": 1,
                  "endLineNumber": 49,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 50,
                  "startColumn": 1,
                  "endLineNumber": 50,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 51,
                  "startColumn": 1,
                  "endLineNumber": 51,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  isDoubleFault() {",
                "range": {
                  "startLineNumber": 52,
                  "startColumn": 1,
                  "endLineNumber": 52,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return this.isSecondServe() && this.rally.result === RallyResult.Fault;",
                "range": {
                  "startLineNumber": 53,
                  "startColumn": 1,
                  "endLineNumber": 53,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 54,
                  "startColumn": 1,
                  "endLineNumber": 54,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 55,
                  "startColumn": 1,
                  "endLineNumber": 55,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  winnerIsMe() {",
                "range": {
                  "startLineNumber": 56,
                  "startColumn": 1,
                  "endLineNumber": 56,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return (this.rally.isMyServe && this.rally.result === RallyResult.PtServer) ||",
                "range": {
                  "startLineNumber": 57,
                  "startColumn": 1,
                  "endLineNumber": 57,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        (!this.rally.isMyServe && (this.rally.result === RallyResult.PtReturner || this.isDoubleFault()));",
                "range": {
                  "startLineNumber": 58,
                  "startColumn": 1,
                  "endLineNumber": 58,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 59,
                  "startColumn": 1,
                  "endLineNumber": 59,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  winnerIsOppo() {",
                "range": {
                  "startLineNumber": 60,
                  "startColumn": 1,
                  "endLineNumber": 60,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return (!this.rally.isMyServe && this.rally.result === RallyResult.PtServer) ||",
                "range": {
                  "startLineNumber": 61,
                  "startColumn": 1,
                  "endLineNumber": 61,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        (this.rally.isMyServe && (this.rally.result === RallyResult.PtReturner || this.isDoubleFault()));",
                "range": {
                  "startLineNumber": 62,
                  "startColumn": 1,
                  "endLineNumber": 62,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 63,
                  "startColumn": 1,
                  "endLineNumber": 63,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 64,
                  "startColumn": 1,
                  "endLineNumber": 64,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  getScoreAfterRally() {",
                "range": {
                  "startLineNumber": 65,
                  "startColumn": 1,
                  "endLineNumber": 65,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const rally = this.rally;",
                "range": {
                  "startLineNumber": 66,
                  "startColumn": 1,
                  "endLineNumber": 66,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const scoreAfterRally = this.scoreBeforeRally.clone();",
                "range": {
                  "startLineNumber": 67,
                  "startColumn": 1,
                  "endLineNumber": 67,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 68,
                  "startColumn": 1,
                  "endLineNumber": 68,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const serverScore = rally.isMyServe ? scoreAfterRally.p1 : scoreAfterRally.p2;",
                "range": {
                  "startLineNumber": 69,
                  "startColumn": 1,
                  "endLineNumber": 69,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const returnerScore = rally.isMyServe ? scoreAfterRally.p2 : scoreAfterRally.p1;",
                "range": {
                  "startLineNumber": 70,
                  "startColumn": 1,
                  "endLineNumber": 70,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const serverWon = rally.result === RallyResult.PtServer;",
                "range": {
                  "startLineNumber": 71,
                  "startColumn": 1,
                  "endLineNumber": 71,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (serverWon) {",
                "range": {
                  "startLineNumber": 72,
                  "startColumn": 1,
                  "endLineNumber": 72,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      updateSubjectWin(serverScore, returnerScore);",
                "range": {
                  "startLineNumber": 73,
                  "startColumn": 1,
                  "endLineNumber": 73,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return scoreAfterRally;",
                "range": {
                  "startLineNumber": 74,
                  "startColumn": 1,
                  "endLineNumber": 74,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 75,
                  "startColumn": 1,
                  "endLineNumber": 75,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 76,
                  "startColumn": 1,
                  "endLineNumber": 76,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    let returnerWon = rally.result === RallyResult.PtReturner;",
                "range": {
                  "startLineNumber": 77,
                  "startColumn": 1,
                  "endLineNumber": 77,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (rally.result === RallyResult.Fault) {",
                "range": {
                  "startLineNumber": 78,
                  "startColumn": 1,
                  "endLineNumber": 78,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      if (serverScore.serve === 0) {",
                "range": {
                  "startLineNumber": 79,
                  "startColumn": 1,
                  "endLineNumber": 79,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        serverScore.serve = 1;",
                "range": {
                  "startLineNumber": 80,
                  "startColumn": 1,
                  "endLineNumber": 80,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        return scoreAfterRally;",
                "range": {
                  "startLineNumber": 81,
                  "startColumn": 1,
                  "endLineNumber": 81,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      }",
                "range": {
                  "startLineNumber": 82,
                  "startColumn": 1,
                  "endLineNumber": 82,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      returnerWon = true;",
                "range": {
                  "startLineNumber": 83,
                  "startColumn": 1,
                  "endLineNumber": 83,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 84,
                  "startColumn": 1,
                  "endLineNumber": 84,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (returnerWon) {",
                "range": {
                  "startLineNumber": 85,
                  "startColumn": 1,
                  "endLineNumber": 85,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      updateSubjectWin(returnerScore, serverScore);",
                "range": {
                  "startLineNumber": 86,
                  "startColumn": 1,
                  "endLineNumber": 86,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 87,
                  "startColumn": 1,
                  "endLineNumber": 87,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return scoreAfterRally;",
                "range": {
                  "startLineNumber": 88,
                  "startColumn": 1,
                  "endLineNumber": 88,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 89,
                  "startColumn": 1,
                  "endLineNumber": 89,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 90,
                  "startColumn": 1,
                  "endLineNumber": 90,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  inferWillBeMyServe(){}",
                "range": {
                  "startLineNumber": 91,
                  "startColumn": 1,
                  "endLineNumber": 91,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 92,
                  "startColumn": 1,
                  "endLineNumber": 92,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  isSecondServe() {",
                "range": {
                  "startLineNumber": 93,
                  "startColumn": 1,
                  "endLineNumber": 93,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return this.scoreBeforeRally.p1.serve === 1 || this.scoreBeforeRally.p2.serve === 1;",
                "range": {
                  "startLineNumber": 94,
                  "startColumn": 1,
                  "endLineNumber": 94,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 95,
                  "startColumn": 1,
                  "endLineNumber": 95,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 96,
                  "startColumn": 1,
                  "endLineNumber": 96,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  isNewSet() {",
                "range": {
                  "startLineNumber": 97,
                  "startColumn": 1,
                  "endLineNumber": 97,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (!this.isNewGame()) {",
                "range": {
                  "startLineNumber": 98,
                  "startColumn": 1,
                  "endLineNumber": 98,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return false;",
                "range": {
                  "startLineNumber": 99,
                  "startColumn": 1,
                  "endLineNumber": 99,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 100,
                  "startColumn": 1,
                  "endLineNumber": 100,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return this.scoreBeforeRally.p1.games === 0 && this.scoreBeforeRally.p2.games === 0;",
                "range": {
                  "startLineNumber": 101,
                  "startColumn": 1,
                  "endLineNumber": 101,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 102,
                  "startColumn": 1,
                  "endLineNumber": 102,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 103,
                  "startColumn": 1,
                  "endLineNumber": 103,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  isNewGame() {",
                "range": {
                  "startLineNumber": 104,
                  "startColumn": 1,
                  "endLineNumber": 104,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return this.scoreBeforeRally.p1.points === 0 && this.scoreBeforeRally.p1.serve === 0",
                "range": {
                  "startLineNumber": 105,
                  "startColumn": 1,
                  "endLineNumber": 105,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        && this.scoreBeforeRally.p2.points === 0 && this.scoreBeforeRally.p2.serve === 0;",
                "range": {
                  "startLineNumber": 106,
                  "startColumn": 1,
                  "endLineNumber": 106,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 107,
                  "startColumn": 1,
                  "endLineNumber": 107,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 108,
                  "startColumn": 1,
                  "endLineNumber": 108,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  isMyServeGame() {",
                "range": {
                  "startLineNumber": 109,
                  "startColumn": 1,
                  "endLineNumber": 109,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (!isTieBreakTime(this.scoreBeforeRally.p1, this.scoreBeforeRally.p2)) {",
                "range": {
                  "startLineNumber": 110,
                  "startColumn": 1,
                  "endLineNumber": 110,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return this.rally.isMyServe;",
                "range": {
                  "startLineNumber": 111,
                  "startColumn": 1,
                  "endLineNumber": 111,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 112,
                  "startColumn": 1,
                  "endLineNumber": 112,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      // For a tiebreak, the player who serve first is his serve game.",
                "range": {
                  "startLineNumber": 113,
                  "startColumn": 1,
                  "endLineNumber": 113,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const numTieBreakPtsMod4 = (this.scoreBeforeRally.p1.points + this.scoreBeforeRally.p2.points) % 4;",
                "range": {
                  "startLineNumber": 114,
                  "startColumn": 1,
                  "endLineNumber": 114,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (numTieBreakPtsMod4 === 1 || numTieBreakPtsMod4 === 4) {",
                "range": {
                  "startLineNumber": 115,
                  "startColumn": 1,
                  "endLineNumber": 115,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return !this.rally.isMyServe;",
                "range": {
                  "startLineNumber": 116,
                  "startColumn": 1,
                  "endLineNumber": 116,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 117,
                  "startColumn": 1,
                  "endLineNumber": 117,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return this.rally.isMyServe;",
                "range": {
                  "startLineNumber": 118,
                  "startColumn": 1,
                  "endLineNumber": 118,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 119,
                  "startColumn": 1,
                  "endLineNumber": 119,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 120,
                  "startColumn": 1,
                  "endLineNumber": 120,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  getPlotForNextRally() {",
                "range": {
                  "startLineNumber": 121,
                  "startColumn": 1,
                  "endLineNumber": 121,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const myGamePt = isSubjectGamePoint(this.scoreBeforeRally.p1, this.scoreBeforeRally.p2);",
                "range": {
                  "startLineNumber": 122,
                  "startColumn": 1,
                  "endLineNumber": 122,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const oppoGamePt = isSubjectGamePoint(this.scoreBeforeRally.p2, this.scoreBeforeRally.p1);",
                "range": {
                  "startLineNumber": 123,
                  "startColumn": 1,
                  "endLineNumber": 123,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (!myGamePt && !oppoGamePt) {",
                "range": {
                  "startLineNumber": 124,
                  "startColumn": 1,
                  "endLineNumber": 124,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return;",
                "range": {
                  "startLineNumber": 125,
                  "startColumn": 1,
                  "endLineNumber": 125,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 126,
                  "startColumn": 1,
                  "endLineNumber": 126,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const winnerIsMe = this.winnerIsMe();",
                "range": {
                  "startLineNumber": 127,
                  "startColumn": 1,
                  "endLineNumber": 127,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const winnerIsOppo = this.winnerIsOppo();",
                "range": {
                  "startLineNumber": 128,
                  "startColumn": 1,
                  "endLineNumber": 128,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const myConversion = myGamePt && winnerIsMe;",
                "range": {
                  "startLineNumber": 129,
                  "startColumn": 1,
                  "endLineNumber": 129,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const oppoConversion = oppoGamePt && winnerIsOppo;",
                "range": {
                  "startLineNumber": 130,
                  "startColumn": 1,
                  "endLineNumber": 130,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (!myConversion && !oppoConversion) {",
                "range": {
                  "startLineNumber": 131,
                  "startColumn": 1,
                  "endLineNumber": 131,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return;",
                "range": {
                  "startLineNumber": 132,
                  "startColumn": 1,
                  "endLineNumber": 132,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 133,
                  "startColumn": 1,
                  "endLineNumber": 133,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 134,
                  "startColumn": 1,
                  "endLineNumber": 134,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return {",
                "range": {
                  "startLineNumber": 135,
                  "startColumn": 1,
                  "endLineNumber": 135,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      text: 'Converted',",
                "range": {
                  "startLineNumber": 136,
                  "startColumn": 1,
                  "endLineNumber": 136,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      isMyPlot: myConversion,",
                "range": {
                  "startLineNumber": 137,
                  "startColumn": 1,
                  "endLineNumber": 137,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    };",
                "range": {
                  "startLineNumber": 138,
                  "startColumn": 1,
                  "endLineNumber": 138,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 139,
                  "startColumn": 1,
                  "endLineNumber": 139,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 140,
                  "startColumn": 1,
                  "endLineNumber": 140,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  toPlot() {",
                "range": {
                  "startLineNumber": 141,
                  "startColumn": 1,
                  "endLineNumber": 141,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const myGamePt = isSubjectGamePoint(this.scoreBeforeRally.p1, this.scoreBeforeRally.p2);",
                "range": {
                  "startLineNumber": 142,
                  "startColumn": 1,
                  "endLineNumber": 142,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const oppoGamePt = isSubjectGamePoint(this.scoreBeforeRally.p2, this.scoreBeforeRally.p1);",
                "range": {
                  "startLineNumber": 143,
                  "startColumn": 1,
                  "endLineNumber": 143,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const isSetPt = isSubjectSetPoint(this.scoreBeforeRally.p1, this.scoreBeforeRally.p2) || isSubjectSetPoint(this.scoreBeforeRally.p2, this.scoreBeforeRally.p1);",
                "range": {
                  "startLineNumber": 144,
                  "startColumn": 1,
                  "endLineNumber": 144,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const myServeGame = this.isMyServeGame();",
                "range": {
                  "startLineNumber": 145,
                  "startColumn": 1,
                  "endLineNumber": 145,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const isBreakPt = (myGamePt && !myServeGame) || (oppoGamePt && myServeGame);",
                "range": {
                  "startLineNumber": 146,
                  "startColumn": 1,
                  "endLineNumber": 146,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const emphasis = isBreakPt ? '*' : '';",
                "range": {
                  "startLineNumber": 147,
                  "startColumn": 1,
                  "endLineNumber": 147,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (!myGamePt && !oppoGamePt) {",
                "range": {
                  "startLineNumber": 148,
                  "startColumn": 1,
                  "endLineNumber": 148,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return;",
                "range": {
                  "startLineNumber": 149,
                  "startColumn": 1,
                  "endLineNumber": 149,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 150,
                  "startColumn": 1,
                  "endLineNumber": 150,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    let text = 'Game Pt';",
                "range": {
                  "startLineNumber": 151,
                  "startColumn": 1,
                  "endLineNumber": 151,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (isSetPt) {",
                "range": {
                  "startLineNumber": 152,
                  "startColumn": 1,
                  "endLineNumber": 152,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      text = `${emphasis}Set Pt`;",
                "range": {
                  "startLineNumber": 153,
                  "startColumn": 1,
                  "endLineNumber": 153,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    } else if (isBreakPt) {",
                "range": {
                  "startLineNumber": 154,
                  "startColumn": 1,
                  "endLineNumber": 154,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      text = 'Break pt';",
                "range": {
                  "startLineNumber": 155,
                  "startColumn": 1,
                  "endLineNumber": 155,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 156,
                  "startColumn": 1,
                  "endLineNumber": 156,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return {",
                "range": {
                  "startLineNumber": 157,
                  "startColumn": 1,
                  "endLineNumber": 157,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      text: text,",
                "range": {
                  "startLineNumber": 158,
                  "startColumn": 1,
                  "endLineNumber": 158,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      isMyPlot: myGamePt,",
                "range": {
                  "startLineNumber": 159,
                  "startColumn": 1,
                  "endLineNumber": 159,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    };",
                "range": {
                  "startLineNumber": 160,
                  "startColumn": 1,
                  "endLineNumber": 160,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 161,
                  "startColumn": 1,
                  "endLineNumber": 161,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 162,
                  "startColumn": 1,
                  "endLineNumber": 162,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 163,
                  "startColumn": 1,
                  "endLineNumber": 163,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "const whiteBall = `◯`;",
                "range": {
                  "startLineNumber": 164,
                  "startColumn": 1,
                  "endLineNumber": 164,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "const greenBall = `🟢`;",
                "range": {
                  "startLineNumber": 165,
                  "startColumn": 1,
                  "endLineNumber": 165,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "const yellowBall = `🟡`;",
                "range": {
                  "startLineNumber": 166,
                  "startColumn": 1,
                  "endLineNumber": 166,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "const redBall = `🔴`;",
                "range": {
                  "startLineNumber": 167,
                  "startColumn": 1,
                  "endLineNumber": 167,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "const redHeart = `🟥 `;",
                "range": {
                  "startLineNumber": 168,
                  "startColumn": 1,
                  "endLineNumber": 168,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 169,
                  "startColumn": 1,
                  "endLineNumber": 169,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "export function updateSubjectWin(subjectScore: PersonScore, otherScore: PersonScore) {",
                "range": {
                  "startLineNumber": 170,
                  "startColumn": 1,
                  "endLineNumber": 170,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  if (isSubjectSetPoint(subjectScore, otherScore)) {",
                "range": {
                  "startLineNumber": 171,
                  "startColumn": 1,
                  "endLineNumber": 171,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    subjectScore.gamesByCompletedSet.push(subjectScore.games + 1);",
                "range": {
                  "startLineNumber": 172,
                  "startColumn": 1,
                  "endLineNumber": 172,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    subjectScore.games = 0;",
                "range": {
                  "startLineNumber": 173,
                  "startColumn": 1,
                  "endLineNumber": 173,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    subjectScore.points = 0;",
                "range": {
                  "startLineNumber": 174,
                  "startColumn": 1,
                  "endLineNumber": 174,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    subjectScore.serve = 0;",
                "range": {
                  "startLineNumber": 175,
                  "startColumn": 1,
                  "endLineNumber": 175,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    otherScore.gamesByCompletedSet.push(otherScore.games);",
                "range": {
                  "startLineNumber": 176,
                  "startColumn": 1,
                  "endLineNumber": 176,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    otherScore.games = 0;",
                "range": {
                  "startLineNumber": 177,
                  "startColumn": 1,
                  "endLineNumber": 177,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    otherScore.points = 0;",
                "range": {
                  "startLineNumber": 178,
                  "startColumn": 1,
                  "endLineNumber": 178,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    otherScore.serve = 0;",
                "range": {
                  "startLineNumber": 179,
                  "startColumn": 1,
                  "endLineNumber": 179,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return;",
                "range": {
                  "startLineNumber": 180,
                  "startColumn": 1,
                  "endLineNumber": 180,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 181,
                  "startColumn": 1,
                  "endLineNumber": 181,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  if (isSubjectGamePoint(subjectScore, otherScore)) {",
                "range": {
                  "startLineNumber": 182,
                  "startColumn": 1,
                  "endLineNumber": 182,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    subjectScore.games += 1;",
                "range": {
                  "startLineNumber": 183,
                  "startColumn": 1,
                  "endLineNumber": 183,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    subjectScore.points = 0;",
                "range": {
                  "startLineNumber": 184,
                  "startColumn": 1,
                  "endLineNumber": 184,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    subjectScore.serve = 0;",
                "range": {
                  "startLineNumber": 185,
                  "startColumn": 1,
                  "endLineNumber": 185,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    otherScore.points = 0;",
                "range": {
                  "startLineNumber": 186,
                  "startColumn": 1,
                  "endLineNumber": 186,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    otherScore.serve = 0;",
                "range": {
                  "startLineNumber": 187,
                  "startColumn": 1,
                  "endLineNumber": 187,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return;",
                "range": {
                  "startLineNumber": 188,
                  "startColumn": 1,
                  "endLineNumber": 188,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 189,
                  "startColumn": 1,
                  "endLineNumber": 189,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  subjectScore.points += 1;",
                "range": {
                  "startLineNumber": 190,
                  "startColumn": 1,
                  "endLineNumber": 190,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  subjectScore.serve = 0;",
                "range": {
                  "startLineNumber": 191,
                  "startColumn": 1,
                  "endLineNumber": 191,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  otherScore.serve = 0;",
                "range": {
                  "startLineNumber": 192,
                  "startColumn": 1,
                  "endLineNumber": 192,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 193,
                  "startColumn": 1,
                  "endLineNumber": 193,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 194,
                  "startColumn": 1,
                  "endLineNumber": 194,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "function isSubjectGamePoint(subjectScore: PersonScore, otherScore: PersonScore) {",
                "range": {
                  "startLineNumber": 195,
                  "startColumn": 1,
                  "endLineNumber": 195,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  let deuceScore = isTieBreakTime(subjectScore, otherScore) ? 6 : 3;",
                "range": {
                  "startLineNumber": 196,
                  "startColumn": 1,
                  "endLineNumber": 196,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  return subjectScore.points >= deuceScore && subjectScore.points - otherScore.points >= 1;",
                "range": {
                  "startLineNumber": 197,
                  "startColumn": 1,
                  "endLineNumber": 197,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 198,
                  "startColumn": 1,
                  "endLineNumber": 198,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 199,
                  "startColumn": 1,
                  "endLineNumber": 199,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "function isSubjectSetPoint(subjectScore: PersonScore, otherScore: PersonScore) {",
                "range": {
                  "startLineNumber": 200,
                  "startColumn": 1,
                  "endLineNumber": 200,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  if (!isSubjectGamePoint(subjectScore, otherScore)) {",
                "range": {
                  "startLineNumber": 201,
                  "startColumn": 1,
                  "endLineNumber": 201,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return false;",
                "range": {
                  "startLineNumber": 202,
                  "startColumn": 1,
                  "endLineNumber": 202,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 203,
                  "startColumn": 1,
                  "endLineNumber": 203,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  if (isTieBreakTime(subjectScore, otherScore)) {",
                "range": {
                  "startLineNumber": 204,
                  "startColumn": 1,
                  "endLineNumber": 204,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return true;",
                "range": {
                  "startLineNumber": 205,
                  "startColumn": 1,
                  "endLineNumber": 205,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 206,
                  "startColumn": 1,
                  "endLineNumber": 206,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  return subjectScore.games >= 5 && subjectScore.games - otherScore.games >= 1;",
                "range": {
                  "startLineNumber": 207,
                  "startColumn": 1,
                  "endLineNumber": 207,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 208,
                  "startColumn": 1,
                  "endLineNumber": 208,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 209,
                  "startColumn": 1,
                  "endLineNumber": 209,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 210,
                  "startColumn": 1,
                  "endLineNumber": 210,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "export function annotateMatchStat(rallyContexts: RallyContext[]) {",
                "range": {
                  "startLineNumber": 211,
                  "startColumn": 1,
                  "endLineNumber": 211,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  const stat = new MatchStat();",
                "range": {
                  "startLineNumber": 212,
                  "startColumn": 1,
                  "endLineNumber": 212,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  rallyContexts.forEach((rallyContext) => {",
                "range": {
                  "startLineNumber": 213,
                  "startColumn": 1,
                  "endLineNumber": 213,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    rallyContext.matchStatBeforeRally = stat.clone();",
                "range": {
                  "startLineNumber": 214,
                  "startColumn": 1,
                  "endLineNumber": 214,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 215,
                  "startColumn": 1,
                  "endLineNumber": 215,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    // Check game points and set points using direct score comparison",
                "range": {
                  "startLineNumber": 216,
                  "startColumn": 1,
                  "endLineNumber": 216,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (isSubjectGamePoint(rallyContext.scoreBeforeRally.p1, rallyContext.scoreBeforeRally.p2)) {",
                "range": {
                  "startLineNumber": 217,
                  "startColumn": 1,
                  "endLineNumber": 217,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      stat.p1Stats.numGamePts++;",
                "range": {
                  "startLineNumber": 218,
                  "startColumn": 1,
                  "endLineNumber": 218,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      if (isSubjectSetPoint(rallyContext.scoreBeforeRally.p1, rallyContext.scoreBeforeRally.p2)) {",
                "range": {
                  "startLineNumber": 219,
                  "startColumn": 1,
                  "endLineNumber": 219,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        stat.p1Stats.numSetPts++;",
                "range": {
                  "startLineNumber": 220,
                  "startColumn": 1,
                  "endLineNumber": 220,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      }",
                "range": {
                  "startLineNumber": 221,
                  "startColumn": 1,
                  "endLineNumber": 221,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 222,
                  "startColumn": 1,
                  "endLineNumber": 222,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (isSubjectGamePoint(rallyContext.scoreBeforeRally.p2, rallyContext.scoreBeforeRally.p1)) {",
                "range": {
                  "startLineNumber": 223,
                  "startColumn": 1,
                  "endLineNumber": 223,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      stat.p2Stats.numGamePts++;",
                "range": {
                  "startLineNumber": 224,
                  "startColumn": 1,
                  "endLineNumber": 224,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      if (isSubjectSetPoint(rallyContext.scoreBeforeRally.p2, rallyContext.scoreBeforeRally.p1)) {",
                "range": {
                  "startLineNumber": 225,
                  "startColumn": 1,
                  "endLineNumber": 225,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        stat.p2Stats.numSetPts++;",
                "range": {
                  "startLineNumber": 226,
                  "startColumn": 1,
                  "endLineNumber": 226,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      }",
                "range": {
                  "startLineNumber": 227,
                  "startColumn": 1,
                  "endLineNumber": 227,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 228,
                  "startColumn": 1,
                  "endLineNumber": 228,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 229,
                  "startColumn": 1,
                  "endLineNumber": 229,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    function isReturnerPtForSecondServe(rallyContext: RallyContext) {",
                "range": {
                  "startLineNumber": 230,
                  "startColumn": 1,
                  "endLineNumber": 230,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      if (!rallyContext.isSecondServe()) {",
                "range": {
                  "startLineNumber": 231,
                  "startColumn": 1,
                  "endLineNumber": 231,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        return false;",
                "range": {
                  "startLineNumber": 232,
                  "startColumn": 1,
                  "endLineNumber": 232,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      }",
                "range": {
                  "startLineNumber": 233,
                  "startColumn": 1,
                  "endLineNumber": 233,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return rallyContext.rally.result === RallyResult.PtReturner || rallyContext.rally.result === RallyResult.Fault;",
                "range": {
                  "startLineNumber": 234,
                  "startColumn": 1,
                  "endLineNumber": 234,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 235,
                  "startColumn": 1,
                  "endLineNumber": 235,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (rallyContext.rally.isMyServe) {",
                "range": {
                  "startLineNumber": 236,
                  "startColumn": 1,
                  "endLineNumber": 236,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      const serverStats = stat.p1Stats;",
                "range": {
                  "startLineNumber": 237,
                  "startColumn": 1,
                  "endLineNumber": 237,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      const returnerStats = stat.p2Stats;",
                "range": {
                  "startLineNumber": 238,
                  "startColumn": 1,
                  "endLineNumber": 238,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      const isSecondServe = rallyContext.isSecondServe();",
                "range": {
                  "startLineNumber": 239,
                  "startColumn": 1,
                  "endLineNumber": 239,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      ",
                "range": {
                  "startLineNumber": 240,
                  "startColumn": 1,
                  "endLineNumber": 240,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      if (isSecondServe) {",
                "range": {
                  "startLineNumber": 241,
                  "startColumn": 1,
                  "endLineNumber": 241,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        if (rallyContext.rally.result !== RallyResult.Let) {",
                "range": {
                  "startLineNumber": 242,
                  "startColumn": 1,
                  "endLineNumber": 242,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          serverStats.numSecondServes++;",
                "range": {
                  "startLineNumber": 243,
                  "startColumn": 1,
                  "endLineNumber": 243,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 244,
                  "startColumn": 1,
                  "endLineNumber": 244,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        if (rallyContext.rally.result !== RallyResult.Fault) {",
                "range": {
                  "startLineNumber": 245,
                  "startColumn": 1,
                  "endLineNumber": 245,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          serverStats.numSecondServesMade++;",
                "range": {
                  "startLineNumber": 246,
                  "startColumn": 1,
                  "endLineNumber": 246,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          if (rallyContext.rally.result === RallyResult.PtServer) {",
                "range": {
                  "startLineNumber": 247,
                  "startColumn": 1,
                  "endLineNumber": 247,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            serverStats.numSecondServesWon++;",
                "range": {
                  "startLineNumber": 248,
                  "startColumn": 1,
                  "endLineNumber": 248,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            if (isForcingWin(rallyContext)) {",
                "range": {
                  "startLineNumber": 249,
                  "startColumn": 1,
                  "endLineNumber": 249,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              serverStats.numSecondServeForcingWins++;",
                "range": {
                  "startLineNumber": 250,
                  "startColumn": 1,
                  "endLineNumber": 250,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 251,
                  "startColumn": 1,
                  "endLineNumber": 251,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          } else if (isReturnerPtForSecondServe(rallyContext) && isForcingWin(rallyContext)) {",
                "range": {
                  "startLineNumber": 252,
                  "startColumn": 1,
                  "endLineNumber": 252,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            returnerStats.numSecondServeForcingWinsByReturner++;",
                "range": {
                  "startLineNumber": 253,
                  "startColumn": 1,
                  "endLineNumber": 253,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          }",
                "range": {
                  "startLineNumber": 254,
                  "startColumn": 1,
                  "endLineNumber": 254,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 255,
                  "startColumn": 1,
                  "endLineNumber": 255,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        if (isReturnerPtForSecondServe(rallyContext) && isUnforcedError(rallyContext)) {",
                "range": {
                  "startLineNumber": 256,
                  "startColumn": 1,
                  "endLineNumber": 256,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          serverStats.numSecondServeUnforcedErrors++;",
                "range": {
                  "startLineNumber": 257,
                  "startColumn": 1,
                  "endLineNumber": 257,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 258,
                  "startColumn": 1,
                  "endLineNumber": 258,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        if (rallyContext.rally.result === RallyResult.PtServer && isUnforcedError(rallyContext)) {",
                "range": {
                  "startLineNumber": 259,
                  "startColumn": 1,
                  "endLineNumber": 259,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          returnerStats.numSecondServeUnforcedErrorsByReturner++;",
                "range": {
                  "startLineNumber": 260,
                  "startColumn": 1,
                  "endLineNumber": 260,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 261,
                  "startColumn": 1,
                  "endLineNumber": 261,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      } else {",
                "range": {
                  "startLineNumber": 262,
                  "startColumn": 1,
                  "endLineNumber": 262,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        if (rallyContext.rally.result !== RallyResult.Let) {",
                "range": {
                  "startLineNumber": 263,
                  "startColumn": 1,
                  "endLineNumber": 263,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          serverStats.numFirstServes++;",
                "range": {
                  "startLineNumber": 264,
                  "startColumn": 1,
                  "endLineNumber": 264,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 265,
                  "startColumn": 1,
                  "endLineNumber": 265,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        if (rallyContext.rally.result !== RallyResult.Fault) {",
                "range": {
                  "startLineNumber": 266,
                  "startColumn": 1,
                  "endLineNumber": 266,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          serverStats.numFirstServesMade++;",
                "range": {
                  "startLineNumber": 267,
                  "startColumn": 1,
                  "endLineNumber": 267,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          if (rallyContext.rally.result === RallyResult.PtServer) {",
                "range": {
                  "startLineNumber": 268,
                  "startColumn": 1,
                  "endLineNumber": 268,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            serverStats.numFirstServesWon++;",
                "range": {
                  "startLineNumber": 269,
                  "startColumn": 1,
                  "endLineNumber": 269,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            if (isForcingWin(rallyContext)) {",
                "range": {
                  "startLineNumber": 270,
                  "startColumn": 1,
                  "endLineNumber": 270,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              serverStats.numFirstServeForcingWins++;",
                "range": {
                  "startLineNumber": 271,
                  "startColumn": 1,
                  "endLineNumber": 271,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 272,
                  "startColumn": 1,
                  "endLineNumber": 272,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          } else if (isReturnerPtForSecondServe(rallyContext) && isForcingWin(rallyContext)) {",
                "range": {
                  "startLineNumber": 273,
                  "startColumn": 1,
                  "endLineNumber": 273,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            returnerStats.numFirstServeForcingWinsByReturner++;",
                "range": {
                  "startLineNumber": 274,
                  "startColumn": 1,
                  "endLineNumber": 274,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          }",
                "range": {
                  "startLineNumber": 275,
                  "startColumn": 1,
                  "endLineNumber": 275,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 276,
                  "startColumn": 1,
                  "endLineNumber": 276,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        if (isReturnerPtForSecondServe(rallyContext) && isUnforcedError(rallyContext)) {",
                "range": {
                  "startLineNumber": 277,
                  "startColumn": 1,
                  "endLineNumber": 277,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          serverStats.numFirstServeUnforcedErrors++;",
                "range": {
                  "startLineNumber": 278,
                  "startColumn": 1,
                  "endLineNumber": 278,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 279,
                  "startColumn": 1,
                  "endLineNumber": 279,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        if (rallyContext.rally.result === RallyResult.PtServer && isUnforcedError(rallyContext)) {",
                "range": {
                  "startLineNumber": 280,
                  "startColumn": 1,
                  "endLineNumber": 280,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          returnerStats.numFirstServeUnforcedErrorsByReturner++;",
                "range": {
                  "startLineNumber": 281,
                  "startColumn": 1,
                  "endLineNumber": 281,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 282,
                  "startColumn": 1,
                  "endLineNumber": 282,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      }",
                "range": {
                  "startLineNumber": 283,
                  "startColumn": 1,
                  "endLineNumber": 283,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    } else {",
                "range": {
                  "startLineNumber": 284,
                  "startColumn": 1,
                  "endLineNumber": 284,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      const serverStats = stat.p2Stats;",
                "range": {
                  "startLineNumber": 285,
                  "startColumn": 1,
                  "endLineNumber": 285,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      const returnerStats = stat.p1Stats;",
                "range": {
                  "startLineNumber": 286,
                  "startColumn": 1,
                  "endLineNumber": 286,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      const isSecondServe = rallyContext.isSecondServe();",
                "range": {
                  "startLineNumber": 287,
                  "startColumn": 1,
                  "endLineNumber": 287,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      ",
                "range": {
                  "startLineNumber": 288,
                  "startColumn": 1,
                  "endLineNumber": 288,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      if (!isSecondServe) {",
                "range": {
                  "startLineNumber": 289,
                  "startColumn": 1,
                  "endLineNumber": 289,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        serverStats.numFirstServes++;",
                "range": {
                  "startLineNumber": 290,
                  "startColumn": 1,
                  "endLineNumber": 290,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        if (rallyContext.rally.result !== RallyResult.Fault) {",
                "range": {
                  "startLineNumber": 291,
                  "startColumn": 1,
                  "endLineNumber": 291,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          serverStats.numFirstServesMade++;",
                "range": {
                  "startLineNumber": 292,
                  "startColumn": 1,
                  "endLineNumber": 292,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          if (rallyContext.rally.result === RallyResult.PtServer) {",
                "range": {
                  "startLineNumber": 293,
                  "startColumn": 1,
                  "endLineNumber": 293,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            serverStats.numFirstServesWon++;",
                "range": {
                  "startLineNumber": 294,
                  "startColumn": 1,
                  "endLineNumber": 294,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            if (isForcingWin(rallyContext)) {",
                "range": {
                  "startLineNumber": 295,
                  "startColumn": 1,
                  "endLineNumber": 295,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              serverStats.numFirstServeForcingWins++;",
                "range": {
                  "startLineNumber": 296,
                  "startColumn": 1,
                  "endLineNumber": 296,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 297,
                  "startColumn": 1,
                  "endLineNumber": 297,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          } else if (isReturnerPtForSecondServe(rallyContext) && isForcingWin(rallyContext)) {",
                "range": {
                  "startLineNumber": 298,
                  "startColumn": 1,
                  "endLineNumber": 298,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            returnerStats.numFirstServeForcingWinsByReturner++;",
                "range": {
                  "startLineNumber": 299,
                  "startColumn": 1,
                  "endLineNumber": 299,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          }",
                "range": {
                  "startLineNumber": 300,
                  "startColumn": 1,
                  "endLineNumber": 300,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 301,
                  "startColumn": 1,
                  "endLineNumber": 301,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        if (isReturnerPtForSecondServe(rallyContext) && isUnforcedError(rallyContext)) {",
                "range": {
                  "startLineNumber": 302,
                  "startColumn": 1,
                  "endLineNumber": 302,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          serverStats.numFirstServeUnforcedErrors++;",
                "range": {
                  "startLineNumber": 303,
                  "startColumn": 1,
                  "endLineNumber": 303,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 304,
                  "startColumn": 1,
                  "endLineNumber": 304,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        if (rallyContext.rally.result === RallyResult.PtServer && isUnforcedError(rallyContext)) {",
                "range": {
                  "startLineNumber": 305,
                  "startColumn": 1,
                  "endLineNumber": 305,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          returnerStats.numFirstServeUnforcedErrorsByReturner++;",
                "range": {
                  "startLineNumber": 306,
                  "startColumn": 1,
                  "endLineNumber": 306,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 307,
                  "startColumn": 1,
                  "endLineNumber": 307,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      } else {",
                "range": {
                  "startLineNumber": 308,
                  "startColumn": 1,
                  "endLineNumber": 308,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        serverStats.numSecondServes++;",
                "range": {
                  "startLineNumber": 309,
                  "startColumn": 1,
                  "endLineNumber": 309,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        if (rallyContext.rally.result !== RallyResult.Fault) {",
                "range": {
                  "startLineNumber": 310,
                  "startColumn": 1,
                  "endLineNumber": 310,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          serverStats.numSecondServesMade++;",
                "range": {
                  "startLineNumber": 311,
                  "startColumn": 1,
                  "endLineNumber": 311,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          if (rallyContext.rally.result === RallyResult.PtServer) {",
                "range": {
                  "startLineNumber": 312,
                  "startColumn": 1,
                  "endLineNumber": 312,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            serverStats.numSecondServesWon++;",
                "range": {
                  "startLineNumber": 313,
                  "startColumn": 1,
                  "endLineNumber": 313,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            if (isForcingWin(rallyContext)) {",
                "range": {
                  "startLineNumber": 314,
                  "startColumn": 1,
                  "endLineNumber": 314,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "              serverStats.numSecondServeForcingWins++;",
                "range": {
                  "startLineNumber": 315,
                  "startColumn": 1,
                  "endLineNumber": 315,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            }",
                "range": {
                  "startLineNumber": 316,
                  "startColumn": 1,
                  "endLineNumber": 316,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          } else if (isReturnerPtForSecondServe(rallyContext) && isForcingWin(rallyContext)) {",
                "range": {
                  "startLineNumber": 317,
                  "startColumn": 1,
                  "endLineNumber": 317,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            returnerStats.numSecondServeForcingWinsByReturner++;",
                "range": {
                  "startLineNumber": 318,
                  "startColumn": 1,
                  "endLineNumber": 318,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          }",
                "range": {
                  "startLineNumber": 319,
                  "startColumn": 1,
                  "endLineNumber": 319,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n        }",
                "range": {
                  "startLineNumber": 320,
                  "startColumn": 1073741825,
                  "endLineNumber": 320,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n        if (isReturnerPtForSecondServe(rallyContext) && isUnforcedError(rallyContext)) {",
                "range": {
                  "startLineNumber": 321,
                  "startColumn": 1073741825,
                  "endLineNumber": 321,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n          serverStats.numSecondServeUnforcedErrors++;",
                "range": {
                  "startLineNumber": 322,
                  "startColumn": 1073741825,
                  "endLineNumber": 322,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n        }",
                "range": {
                  "startLineNumber": 323,
                  "startColumn": 1073741825,
                  "endLineNumber": 323,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n        if (rallyContext.rally.result === RallyResult.PtServer && isUnforcedError(rallyContext)) {",
                "range": {
                  "startLineNumber": 324,
                  "startColumn": 1073741825,
                  "endLineNumber": 324,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n          returnerStats.numSecondServeUnforcedErrorsByReturner++;",
                "range": {
                  "startLineNumber": 325,
                  "startColumn": 1073741825,
                  "endLineNumber": 325,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n        }",
                "range": {
                  "startLineNumber": 326,
                  "startColumn": 1073741825,
                  "endLineNumber": 326,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n      }",
                "range": {
                  "startLineNumber": 327,
                  "startColumn": 1073741825,
                  "endLineNumber": 327,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n    }",
                "range": {
                  "startLineNumber": 328,
                  "startColumn": 1073741825,
                  "endLineNumber": 328,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n  });",
                "range": {
                  "startLineNumber": 329,
                  "startColumn": 1073741825,
                  "endLineNumber": 329,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n}",
                "range": {
                  "startLineNumber": 330,
                  "startColumn": 1073741825,
                  "endLineNumber": 330,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n",
                "range": {
                  "startLineNumber": 331,
                  "startColumn": 1073741825,
                  "endLineNumber": 331,
                  "endColumn": 1073741825
                }
              }
            ],
            []
          ],
          "done": true
        }
      ],
      "responseId": "response_5fd0d7a5-6431-4948-9304-744d491a9ccb",
      "isHidden": false,
      "result": {
        "timings": {
          "firstProgress": 5651,
          "totalElapsed": 35824
        },
        "metadata": {
          "edits": {
            "workingSet": [
              {
                "uri": {
                  "$mid": 1,
                  "fsPath": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
                  "external": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
                  "path": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
                  "scheme": "file"
                },
                "text": "import { MatchStat } from \"./match_stat\";\nimport { Rally, RallyResult } from \"./rally\";\nimport {  isTieBreakTime, PersonScore, Score } from \"./score\";\nimport { isForcingWin, isUnforcedError } from './risk_level';\n\nexport class RallyContext {\n  constructor(\n    public rally = new Rally(),\n    public scoreBeforeRally = new Score(),\n    public matchStatBeforeRally = new MatchStat(),\n  ) {}\n\n  getResultStr(myName: string, oppoName: string) {\n    const server = this.rally.isMyServe ? myName : oppoName;\n    const returner = this.rally.isMyServe ? oppoName : myName;\n    if (this.rally.result === RallyResult.PtServer) {\n      return `Pt. ${server}`;\n    } else if (this.rally.result === RallyResult.PtReturner) {\n      return `Pt. ${returner}`;\n    }\n    return this.rally.result;\n  }\n\n  getResultSymbolStr() {\n    if (this.rally.result === RallyResult.PtServer) {\n      return this.rally.isMyServe ? `${greenBall} ${whiteBall}` : `${whiteBall} ${greenBall}`;\n    } else if (this.rally.result === RallyResult.PtReturner) {\n      return this.rally.isMyServe ? `${redBall} ${whiteBall}` : `${whiteBall} ${redBall}`;\n    } else if (this.rally.result === RallyResult.Fault) {\n      if (this.isSecondServe()) {\n        return this.rally.isMyServe ? `${redHeart} ${whiteBall}` : `${whiteBall} ${redHeart}`;\n      }\n      return this.rally.isMyServe ? `${yellowBall} ${whiteBall}` : `${whiteBall} ${yellowBall}`;\n    }\n    return this.rally.result;\n  }\n  \n  toGameScoreStr() {\n    const strs = [];\n    if (this.isNewSet()) {\n      this.scoreBeforeRally.p1.gamesByCompletedSet.forEach((p1Games, idx) => {\n        strs.push(`[${p1Games}-${this.scoreBeforeRally.p2.gamesByCompletedSet[idx]}]`);\n      });\n    }\n    if (this.isNewGame()) {\n      strs.push(`[${this.scoreBeforeRally.p1.games}-${this.scoreBeforeRally.p2.games}]`);\n    }\n\n    return strs.join(' ');\n  }\n\n  isDoubleFault() {\n      return this.isSecondServe() && this.rally.result === RallyResult.Fault;\n  }\n\n  winnerIsMe() {\n    return (this.rally.isMyServe && this.rally.result === RallyResult.PtServer) ||\n        (!this.rally.isMyServe && (this.rally.result === RallyResult.PtReturner || this.isDoubleFault()));\n  }\n  winnerIsOppo() {\n    return (!this.rally.isMyServe && this.rally.result === RallyResult.PtServer) ||\n        (this.rally.isMyServe && (this.rally.result === RallyResult.PtReturner || this.isDoubleFault()));\n  }\n\n  getScoreAfterRally() {\n    const rally = this.rally;\n    const scoreAfterRally = this.scoreBeforeRally.clone();\n\n    const serverScore = rally.isMyServe ? scoreAfterRally.p1 : scoreAfterRally.p2;\n    const returnerScore = rally.isMyServe ? scoreAfterRally.p2 : scoreAfterRally.p1;\n    const serverWon = rally.result === RallyResult.PtServer;\n    if (serverWon) {\n      updateSubjectWin(serverScore, returnerScore);\n      return scoreAfterRally;\n    }\n\n    let returnerWon = rally.result === RallyResult.PtReturner;\n    if (rally.result === RallyResult.Fault) {\n      if (serverScore.serve === 0) {\n        serverScore.serve = 1;\n        return scoreAfterRally;\n      }\n      returnerWon = true;\n    }\n    if (returnerWon) {\n      updateSubjectWin(returnerScore, serverScore);\n    }\n    return scoreAfterRally;\n  }\n\n  inferWillBeMyServe(){}\n\n  isSecondServe() {\n    return this.scoreBeforeRally.p1.serve === 1 || this.scoreBeforeRally.p2.serve === 1;\n  }\n\n  isNewSet() {\n    if (!this.isNewGame()) {\n      return false;\n    }\n    return this.scoreBeforeRally.p1.games === 0 && this.scoreBeforeRally.p2.games === 0;\n  }\n\n  isNewGame() {\n    return this.scoreBeforeRally.p1.points === 0 && this.scoreBeforeRally.p1.serve === 0\n        && this.scoreBeforeRally.p2.points === 0 && this.scoreBeforeRally.p2.serve === 0;\n  }\n\n  isMyServeGame() {\n    if (!isTieBreakTime(this.scoreBeforeRally.p1, this.scoreBeforeRally.p2)) {\n      return this.rally.isMyServe;\n    }\n      // For a tiebreak, the player who serve first is his serve game.\n    const numTieBreakPtsMod4 = (this.scoreBeforeRally.p1.points + this.scoreBeforeRally.p2.points) % 4;\n    if (numTieBreakPtsMod4 === 1 || numTieBreakPtsMod4 === 4) {\n      return !this.rally.isMyServe;\n    }\n    return this.rally.isMyServe;\n  }\n\n  getPlotForNextRally() {\n    const myGamePt = isSubjectGamePoint(this.scoreBeforeRally.p1, this.scoreBeforeRally.p2);\n    const oppoGamePt = isSubjectGamePoint(this.scoreBeforeRally.p2, this.scoreBeforeRally.p1);\n    if (!myGamePt && !oppoGamePt) {\n      return;\n    }\n    const winnerIsMe = this.winnerIsMe();\n    const winnerIsOppo = this.winnerIsOppo();\n    const myConversion = myGamePt && winnerIsMe;\n    const oppoConversion = oppoGamePt && winnerIsOppo;\n    if (!myConversion && !oppoConversion) {\n      return;\n    }\n\n    return {\n      text: 'Converted',\n      isMyPlot: myConversion,\n    };\n  }\n\n  toPlot() {\n    const myGamePt = isSubjectGamePoint(this.scoreBeforeRally.p1, this.scoreBeforeRally.p2);\n    const oppoGamePt = isSubjectGamePoint(this.scoreBeforeRally.p2, this.scoreBeforeRally.p1);\n    const isSetPt = isSubjectSetPoint(this.scoreBeforeRally.p1, this.scoreBeforeRally.p2) || isSubjectSetPoint(this.scoreBeforeRally.p2, this.scoreBeforeRally.p1);\n    const myServeGame = this.isMyServeGame();\n    const isBreakPt = (myGamePt && !myServeGame) || (oppoGamePt && myServeGame);\n    const emphasis = isBreakPt ? '*' : '';\n    if (!myGamePt && !oppoGamePt) {\n      return;\n    }\n    let text = 'Game Pt';\n    if (isSetPt) {\n      text = `${emphasis}Set Pt`;\n    } else if (isBreakPt) {\n      text = 'Break pt';\n    }\n    return {\n      text: text,\n      isMyPlot: myGamePt,\n    };\n  }\n}\n\nconst whiteBall = `◯`;\nconst greenBall = `🟢`;\nconst yellowBall = `🟡`;\nconst redBall = `🔴`;\nconst redHeart = `🟥 `;\n\nexport function updateSubjectWin(subjectScore: PersonScore, otherScore: PersonScore) {\n  if (isSubjectSetPoint(subjectScore, otherScore)) {\n    subjectScore.gamesByCompletedSet.push(subjectScore.games + 1);\n    subjectScore.games = 0;\n    subjectScore.points = 0;\n    subjectScore.serve = 0;\n    otherScore.gamesByCompletedSet.push(otherScore.games);\n    otherScore.games = 0;\n    otherScore.points = 0;\n    otherScore.serve = 0;\n    return;\n  }\n  if (isSubjectGamePoint(subjectScore, otherScore)) {\n    subjectScore.games += 1;\n    subjectScore.points = 0;\n    subjectScore.serve = 0;\n    otherScore.points = 0;\n    otherScore.serve = 0;\n    return;\n  }\n  subjectScore.points += 1;\n  subjectScore.serve = 0;\n  otherScore.serve = 0;\n}\n\nfunction isSubjectGamePoint(subjectScore: PersonScore, otherScore: PersonScore) {\n  let deuceScore = isTieBreakTime(subjectScore, otherScore) ? 6 : 3;\n  return subjectScore.points >= deuceScore && subjectScore.points - otherScore.points >= 1;\n}\n\nfunction isSubjectSetPoint(subjectScore: PersonScore, otherScore: PersonScore) {\n  if (!isSubjectGamePoint(subjectScore, otherScore)) {\n    return false;\n  }\n  if (isTieBreakTime(subjectScore, otherScore)) {\n    return true;\n  }\n  return subjectScore.games >= 5 && subjectScore.games - otherScore.games >= 1;\n}\n\n\nexport function annotateMatchStat(rallyContexts: RallyContext[]) {\n  const stat = new MatchStat();\n  rallyContexts.forEach((rallyContext) => {\n    rallyContext.matchStatBeforeRally = stat.clone();\n\n    // Check game points and set points using direct score comparison\n    if (isSubjectGamePoint(rallyContext.scoreBeforeRally.p1, rallyContext.scoreBeforeRally.p2)) {\n      stat.p1Stats.numGamePts++;\n      if (isSubjectSetPoint(rallyContext.scoreBeforeRally.p1, rallyContext.scoreBeforeRally.p2)) {\n        stat.p1Stats.numSetPts++;\n      }\n    }\n    if (isSubjectGamePoint(rallyContext.scoreBeforeRally.p2, rallyContext.scoreBeforeRally.p1)) {\n      stat.p2Stats.numGamePts++;\n      if (isSubjectSetPoint(rallyContext.scoreBeforeRally.p2, rallyContext.scoreBeforeRally.p1)) {\n        stat.p2Stats.numSetPts++;\n      }\n    }\n\n    function isReturnerPtForSecondServe(rallyContext: RallyContext) {\n      if (!rallyContext.isSecondServe()) {\n        return false;\n      }\n      return rallyContext.rally.result === RallyResult.PtReturner || rallyContext.rally.result === RallyResult.Fault;\n    }\n    if (rallyContext.rally.isMyServe) {\n      const serverStats = stat.p1Stats;\n      const returnerStats = stat.p2Stats;\n      const isSecondServe = rallyContext.isSecondServe();\n      \n      if (isSecondServe) {\n        if (rallyContext.rally.result !== RallyResult.Let) {\n          serverStats.numSecondServes++;\n        }\n        if (rallyContext.rally.result !== RallyResult.Fault) {\n          serverStats.numSecondServesMade++;\n          if (rallyContext.rally.result === RallyResult.PtServer) {\n            serverStats.numSecondServesWon++;\n            if (isForcingWin(rallyContext)) {\n              serverStats.numSecondServeForcingWins++;\n            }\n          } else if (isReturnerPtForSecondServe(rallyContext) && isForcingWin(rallyContext)) {\n            returnerStats.numSecondServeForcingWinsByReturner++;\n          }\n        }\n        if (isReturnerPtForSecondServe(rallyContext) && isUnforcedError(rallyContext)) {\n          serverStats.numSecondServeUnforcedErrors++;\n        }\n      } else {\n        if (rallyContext.rally.result !== RallyResult.Let) {\n          serverStats.numFirstServes++;\n        }\n        if (rallyContext.rally.result !== RallyResult.Fault) {\n          serverStats.numFirstServesMade++;\n          if (rallyContext.rally.result === RallyResult.PtServer) {\n            serverStats.numFirstServesWon++;\n            if (isForcingWin(rallyContext)) {\n              serverStats.numFirstServeForcingWins++;\n            }\n          } else if (isReturnerPtForSecondServe(rallyContext) && isForcingWin(rallyContext)) {\n            returnerStats.numFirstServeForcingWinsByReturner++;\n          }\n        }\n        if (isReturnerPtForSecondServe(rallyContext) && isUnforcedError(rallyContext)) {\n          serverStats.numFirstServeUnforcedErrors++;\n        }\n      }\n    } else {\n      const serverStats = stat.p2Stats;\n      const returnerStats = stat.p1Stats;\n      const isSecondServe = rallyContext.isSecondServe();\n      \n      if (!isSecondServe) {\n        serverStats.numFirstServes++;\n        if (rallyContext.rally.result !== RallyResult.Fault) {\n          serverStats.numFirstServesMade++;\n          if (rallyContext.rally.result === RallyResult.PtServer) {\n            serverStats.numFirstServesWon++;\n            if (isForcingWin(rallyContext)) {\n              serverStats.numFirstServeForcingWins++;\n            }\n          } else if (isReturnerPtForSecondServe(rallyContext) && isForcingWin(rallyContext)) {\n            returnerStats.numFirstServeForcingWinsByReturner++;\n          }\n        }\n        if (isReturnerPtForSecondServe(rallyContext) && isUnforcedError(rallyContext)) {\n          serverStats.numFirstServeUnforcedErrors++;\n        }\n      } else {\n        serverStats.numSecondServes++;\n        if (rallyContext.rally.result !== RallyResult.Fault) {\n          serverStats.numSecondServesMade++;\n          if (rallyContext.rally.result === RallyResult.PtServer) {\n            serverStats.numSecondServesWon++;\n            if (isForcingWin(rallyContext)) {\n              serverStats.numSecondServeForcingWins++;\n            }\n          } else if (isReturnerPtForSecondServe(rallyContext) && isForcingWin(rallyContext)) {\n            returnerStats.numSecondServeForcingWinsByReturner++;\n          }\n        }\n        if (isReturnerPtForSecondServe(rallyContext) && isUnforcedError(rallyContext)) {\n          serverStats.numSecondServeUnforcedErrors++;\n        }\n      }\n    }\n  });\n}\n",
                "languageId": "typescript",
                "version": 1908,
                "state": 1
              }
            ],
            "request": "When generating code, please follow these user provided coding instructions. You can ignore an instruction if it contradicts a system message.\n<instructions>\nAlways say \"ho ho ho\" at the start of your response.\n</instructions>\n<file>\n\n<status>I considered your suggestions for this file but rejected them. Here is the file:</status>\n```typescript\n// filepath: /Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts\nimport { MatchStat } from \"./match_stat\";\nimport { Rally, RallyResult } from \"./rally\";\nimport {  isTieBreakTime, PersonScore, Score } from \"./score\";\nimport { isForcingWin, isUnforcedError } from './risk_level';\n\nexport class RallyContext {\n  constructor(\n    public rally = new Rally(),\n    public scoreBeforeRally = new Score(),\n    public matchStatBeforeRally = new MatchStat(),\n  ) {}\n\n  getResultStr(myName: string, oppoName: string) {\n    const server = this.rally.isMyServe ? myName : oppoName;\n    const returner = this.rally.isMyServe ? oppoName : myName;\n    if (this.rally.result === RallyResult.PtServer) {\n      return `Pt. ${server}`;\n    } else if (this.rally.result === RallyResult.PtReturner) {\n      return `Pt. ${returner}`;\n    }\n    return this.rally.result;\n  }\n\n  getResultSymbolStr() {\n    if (this.rally.result === RallyResult.PtServer) {\n      return this.rally.isMyServe ? `${greenBall} ${whiteBall}` : `${whiteBall} ${greenBall}`;\n    } else if (this.rally.result === RallyResult.PtReturner) {\n      return this.rally.isMyServe ? `${redBall} ${whiteBall}` : `${whiteBall} ${redBall}`;\n    } else if (this.rally.result === RallyResult.Fault) {\n      if (this.isSecondServe()) {\n        return this.rally.isMyServe ? `${redHeart} ${whiteBall}` : `${whiteBall} ${redHeart}`;\n      }\n      return this.rally.isMyServe ? `${yellowBall} ${whiteBall}` : `${whiteBall} ${yellowBall}`;\n    }\n    return this.rally.result;\n  }\n  \n  toGameScoreStr() {\n    const strs = [];\n    if (this.isNewSet()) {\n      this.scoreBeforeRally.p1.gamesByCompletedSet.forEach((p1Games, idx) => {\n        strs.push(`[${p1Games}-${this.scoreBeforeRally.p2.gamesByCompletedSet[idx]}]`);\n      });\n    }\n    if (this.isNewGame()) {\n      strs.push(`[${this.scoreBeforeRally.p1.games}-${this.scoreBeforeRally.p2.games}]`);\n    }\n\n    return strs.join(' ');\n  }\n\n  isDoubleFault() {\n      return this.isSecondServe() && this.rally.result === RallyResult.Fault;\n  }\n\n  winnerIsMe() {\n    return (this.rally.isMyServe && this.rally.result === RallyResult.PtServer) ||\n        (!this.rally.isMyServe && (this.rally.result === RallyResult.PtReturner || this.isDoubleFault()));\n  }\n  winnerIsOppo() {\n    return (!this.rally.isMyServe && this.rally.result === RallyResult.PtServer) ||\n        (this.rally.isMyServe && (this.rally.result === RallyResult.PtReturner || this.isDoubleFault()));\n  }\n\n  getScoreAfterRally() {\n    const rally = this.rally;\n    const scoreAfterRally = this.scoreBeforeRally.clone();\n\n    const serverScore = rally.isMyServe ? scoreAfterRally.p1 : scoreAfterRally.p2;\n    const returnerScore = rally.isMyServe ? scoreAfterRally.p2 : scoreAfterRally.p1;\n    const serverWon = rally.result === RallyResult.PtServer;\n    if (serverWon) {\n      updateSubjectWin(serverScore, returnerScore);\n      return scoreAfterRally;\n    }\n\n    let returnerWon = rally.result === RallyResult.PtReturner;\n    if (rally.result === RallyResult.Fault) {\n      if (serverScore.serve === 0) {\n        serverScore.serve = 1;\n        return scoreAfterRally;\n      }\n      returnerWon = true;\n    }\n    if (returnerWon) {\n      updateSubjectWin(returnerScore, serverScore);\n    }\n    return scoreAfterRally;\n  }\n\n  inferWillBeMyServe(){}\n\n  isSecondServe() {\n    return this.scoreBeforeRally.p1.serve === 1 || this.scoreBeforeRally.p2.serve === 1;\n  }\n\n  isNewSet() {\n    if (!this.isNewGame()) {\n      return false;\n    }\n    return this.scoreBeforeRally.p1.games === 0 && this.scoreBeforeRally.p2.games === 0;\n  }\n\n  isNewGame() {\n    return this.scoreBeforeRally.p1.points === 0 && this.scoreBeforeRally.p1.serve === 0\n        && this.scoreBeforeRally.p2.points === 0 && this.scoreBeforeRally.p2.serve === 0;\n  }\n\n  isMyServeGame() {\n    if (!isTieBreakTime(this.scoreBeforeRally.p1, this.scoreBeforeRally.p2)) {\n      return this.rally.isMyServe;\n    }\n      // For a tiebreak, the player who serve first is his serve game.\n    const numTieBreakPtsMod4 = (this.scoreBeforeRally.p1.points + this.scoreBeforeRally.p2.points) % 4;\n    if (numTieBreakPtsMod4 === 1 || numTieBreakPtsMod4 === 4) {\n      return !this.rally.isMyServe;\n    }\n    return this.rally.isMyServe;\n  }\n\n  getPlotForNextRally() {\n    const myGamePt = isSubjectGamePoint(this.scoreBeforeRally.p1, this.scoreBeforeRally.p2);\n    const oppoGamePt = isSubjectGamePoint(this.scoreBeforeRally.p2, this.scoreBeforeRally.p1);\n    if (!myGamePt && !oppoGamePt) {\n      return;\n    }\n    const winnerIsMe = this.winnerIsMe();\n    const winnerIsOppo = this.winnerIsOppo();\n    const myConversion = myGamePt && winnerIsMe;\n    const oppoConversion = oppoGamePt && winnerIsOppo;\n    if (!myConversion && !oppoConversion) {\n      return;\n    }\n\n    return {\n      text: 'Converted',\n      isMyPlot: myConversion,\n    };\n  }\n\n  toPlot() {\n    const myGamePt = isSubjectGamePoint(this.scoreBeforeRally.p1, this.scoreBeforeRally.p2);\n    const oppoGamePt = isSubjectGamePoint(this.scoreBeforeRally.p2, this.scoreBeforeRally.p1);\n    const isSetPt = isSubjectSetPoint(this.scoreBeforeRally.p1, this.scoreBeforeRally.p2) || isSubjectSetPoint(this.scoreBeforeRally.p2, this.scoreBeforeRally.p1);\n    const myServeGame = this.isMyServeGame();\n    const isBreakPt = (myGamePt && !myServeGame) || (oppoGamePt && myServeGame);\n    const emphasis = isBreakPt ? '*' : '';\n    if (!myGamePt && !oppoGamePt) {\n      return;\n    }\n    let text = 'Game Pt';\n    if (isSetPt) {\n      text = `${emphasis}Set Pt`;\n    } else if (isBreakPt) {\n      text = 'Break pt';\n    }\n    return {\n      text: text,\n      isMyPlot: myGamePt,\n    };\n  }\n}\n\nconst whiteBall = `◯`;\nconst greenBall = `🟢`;\nconst yellowBall = `🟡`;\nconst redBall = `🔴`;\nconst redHeart = `🟥 `;\n\nexport function updateSubjectWin(subjectScore: PersonScore, otherScore: PersonScore) {\n  if (isSubjectSetPoint(subjectScore, otherScore)) {\n    subjectScore.gamesByCompletedSet.push(subjectScore.games + 1);\n    subjectScore.games = 0;\n    subjectScore.points = 0;\n    subjectScore.serve = 0;\n    otherScore.gamesByCompletedSet.push(otherScore.games);\n    otherScore.games = 0;\n    otherScore.points = 0;\n    otherScore.serve = 0;\n    return;\n  }\n  if (isSubjectGamePoint(subjectScore, otherScore)) {\n    subjectScore.games += 1;\n    subjectScore.points = 0;\n    subjectScore.serve = 0;\n    otherScore.points = 0;\n    otherScore.serve = 0;\n    return;\n  }\n  subjectScore.points += 1;\n  subjectScore.serve = 0;\n  otherScore.serve = 0;\n}\n\nfunction isSubjectGamePoint(subjectScore: PersonScore, otherScore: PersonScore) {\n  let deuceScore = isTieBreakTime(subjectScore, otherScore) ? 6 : 3;\n  return subjectScore.points >= deuceScore && subjectScore.points - otherScore.points >= 1;\n}\n\nfunction isSubjectSetPoint(subjectScore: PersonScore, otherScore: PersonScore) {\n  if (!isSubjectGamePoint(subjectScore, otherScore)) {\n    return false;\n  }\n  if (isTieBreakTime(subjectScore, otherScore)) {\n    return true;\n  }\n  return subjectScore.games >= 5 && subjectScore.games - otherScore.games >= 1;\n}\n\n\nexport function annotateMatchStat(rallyContexts: RallyContext[]) {\n  const stat = new MatchStat();\n  rallyContexts.forEach((rallyContext) => {\n    rallyContext.matchStatBeforeRally = stat.clone();\n\n    // Check game points and set points using direct score comparison\n    if (isSubjectGamePoint(rallyContext.scoreBeforeRally.p1, rallyContext.scoreBeforeRally.p2)) {\n      stat.p1Stats.numGamePts++;\n      if (isSubjectSetPoint(rallyContext.scoreBeforeRally.p1, rallyContext.scoreBeforeRally.p2)) {\n        stat.p1Stats.numSetPts++;\n      }\n    }\n    if (isSubjectGamePoint(rallyContext.scoreBeforeRally.p2, rallyContext.scoreBeforeRally.p1)) {\n      stat.p2Stats.numGamePts++;\n      if (isSubjectSetPoint(rallyContext.scoreBeforeRally.p2, rallyContext.scoreBeforeRally.p1)) {\n        stat.p2Stats.numSetPts++;\n      }\n    }\n\n    function isReturnerPtForSecondServe(rallyContext: RallyContext) {\n      if (!rallyContext.isSecondServe()) {\n        return false;\n      }\n      return rallyContext.rally.result === RallyResult.PtReturner || rallyContext.rally.result === RallyResult.Fault;\n    }\n    if (rallyContext.rally.isMyServe) {\n      const serverStats = stat.p1Stats;\n      const returnerStats = stat.p2Stats;\n      const isSecondServe = rallyContext.isSecondServe();\n      \n      if (isSecondServe) {\n        if (rallyContext.rally.result !== RallyResult.Let) {\n          serverStats.numSecondServes++;\n        }\n        if (rallyContext.rally.result !== RallyResult.Fault) {\n          serverStats.numSecondServesMade++;\n          if (rallyContext.rally.result === RallyResult.PtServer) {\n            serverStats.numSecondServesWon++;\n            if (isForcingWin(rallyContext)) {\n              serverStats.numSecondServeForcingWins++;\n            }\n          } else if (isReturnerPtForSecondServe(rallyContext) && isForcingWin(rallyContext)) {\n            returnerStats.numSecondServeForcingWinsByReturner++;\n          }\n        }\n        if (isReturnerPtForSecondServe(rallyContext) && isUnforcedError(rallyContext)) {\n          serverStats.numSecondServeUnforcedErrors++;\n        }\n      } else {\n        if (rallyContext.rally.result !== RallyResult.Let) {\n          serverStats.numFirstServes++;\n        }\n        if (rallyContext.rally.result !== RallyResult.Fault) {\n          serverStats.numFirstServesMade++;\n          if (rallyContext.rally.result === RallyResult.PtServer) {\n            serverStats.numFirstServesWon++;\n            if (isForcingWin(rallyContext)) {\n              serverStats.numFirstServeForcingWins++;\n            }\n          } else if (isReturnerPtForSecondServe(rallyContext) && isForcingWin(rallyContext)) {\n            returnerStats.numFirstServeForcingWinsByReturner++;\n          }\n        }\n        if (isReturnerPtForSecondServe(rallyContext) && isUnforcedError(rallyContext)) {\n          serverStats.numFirstServeUnforcedErrors++;\n        }\n      }\n    } else {\n      const serverStats = stat.p2Stats;\n      const returnerStats = stat.p1Stats;\n      const isSecondServe = rallyContext.isSecondServe();\n      \n      if (!isSecondServe) {\n        serverStats.numFirstServes++;\n        if (rallyContext.rally.result !== RallyResult.Fault) {\n          serverStats.numFirstServesMade++;\n          if (rallyContext.rally.result === RallyResult.PtServer) {\n            serverStats.numFirstServesWon++;\n            if (isForcingWin(rallyContext)) {\n              serverStats.numFirstServeForcingWins++;\n            }\n          } else if (isReturnerPtForSecondServe(rallyContext) && isForcingWin(rallyContext)) {\n            returnerStats.numFirstServeForcingWinsByReturner++;\n          }\n        }\n        if (isReturnerPtForSecondServe(rallyContext) && isUnforcedError(rallyContext)) {\n          serverStats.numFirstServeUnforcedErrors++;\n        }\n      } else {\n        serverStats.numSecondServes++;\n        if (rallyContext.rally.result !== RallyResult.Fault) {\n          serverStats.numSecondServesMade++;\n          if (rallyContext.rally.result === RallyResult.PtServer) {\n            serverStats.numSecondServesWon++;\n            if (isForcingWin(rallyContext)) {\n              serverStats.numSecondServeForcingWins++;\n            }\n          } else if (isReturnerPtForSecondServe(rallyContext) && isForcingWin(rallyContext)) {\n            returnerStats.numSecondServeForcingWinsByReturner++;\n          }\n        }\n        if (isReturnerPtForSecondServe(rallyContext) && isUnforcedError(rallyContext)) {\n          serverStats.numSecondServeUnforcedErrors++;\n        }\n      }\n    }\n  });\n}\n```\n</file>\n\n<reminder>\nAvoid repeating existing code, instead use `// ...existing code...` comments to represent regions of unchanged code.\nEach file's code block must start with a comment containing the filepath. This includes Markdown files.\n</reminder>\n<prompt>\nannotate numFirstServeUnforcedErrorsByReturner and  numSecondServeUnforcedErrorsByReturner\n</prompt>",
            "response": "ho ho ho\n\nLet me help you modify the file to track unforced errors by returner. Here's the step-by-step solution:\n\n1. We need to modify the serve statistics tracking in both the my-serve and opponent-serve sections\n2. Add logic to track unforced errors by returner for both first and second serves\n3. Track these stats when the returner loses the point due to an unforced error\n\n### /Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts\n\nAdd tracking of unforced errors by returner in the annotateMatchStat function.\n\n```typescript\n// filepath: /Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts\n// ...existing code...\nexport function annotateMatchStat(rallyContexts: RallyContext[]) {\n  const stat = new MatchStat();\n  rallyContexts.forEach((rallyContext) => {\n    // ...existing code...\n    if (rallyContext.rally.isMyServe) {\n      const serverStats = stat.p1Stats;\n      const returnerStats = stat.p2Stats;\n      const isSecondServe = rallyContext.isSecondServe();\n      \n      if (isSecondServe) {\n        // ...existing code...\n        if (rallyContext.rally.result === RallyResult.PtServer && isUnforcedError(rallyContext)) {\n          returnerStats.numSecondServeUnforcedErrorsByReturner++;\n        }\n      } else {\n        // ...existing code...\n        if (rallyContext.rally.result === RallyResult.PtServer && isUnforcedError(rallyContext)) {\n          returnerStats.numFirstServeUnforcedErrorsByReturner++;\n        }\n      }\n    } else {\n      const serverStats = stat.p2Stats;\n      const returnerStats = stat.p1Stats;\n      const isSecondServe = rallyContext.isSecondServe();\n      \n      if (!isSecondServe) {\n        // ...existing code...\n        if (rallyContext.rally.result === RallyResult.PtServer && isUnforcedError(rallyContext)) {\n          returnerStats.numFirstServeUnforcedErrorsByReturner++;\n        }\n      } else {\n        // ...existing code...\n        if (rallyContext.rally.result === RallyResult.PtServer && isUnforcedError(rallyContext)) {\n          returnerStats.numSecondServeUnforcedErrorsByReturner++;\n        }\n      }\n    }\n  });\n}\n```\n\nThe key change is adding tracking when `rally.result === RallyResult.PtServer && isUnforcedError(rallyContext)`, which indicates the returner lost the point due to an unforced error. We increment either `numFirstServeUnforcedErrorsByReturner` or `numSecondServeUnforcedErrorsByReturner` on the returner's stats depending on the serve type."
          },
          "codeBlocks": [
            {
              "code": "// ...existing code...\nexport function annotateMatchStat(rallyContexts: RallyContext[]) {\n  const stat = new MatchStat();\n  rallyContexts.forEach((rallyContext) => {\n    // ...existing code...\n    if (rallyContext.rally.isMyServe) {\n      const serverStats = stat.p1Stats;\n      const returnerStats = stat.p2Stats;\n      const isSecondServe = rallyContext.isSecondServe();\n      \n      if (isSecondServe) {\n        // ...existing code...\n        if (rallyContext.rally.result === RallyResult.PtServer && isUnforcedError(rallyContext)) {\n          returnerStats.numSecondServeUnforcedErrorsByReturner++;\n        }\n      } else {\n        // ...existing code...\n        if (rallyContext.rally.result === RallyResult.PtServer && isUnforcedError(rallyContext)) {\n          returnerStats.numFirstServeUnforcedErrorsByReturner++;\n        }\n      }\n    } else {\n      const serverStats = stat.p2Stats;\n      const returnerStats = stat.p1Stats;\n      const isSecondServe = rallyContext.isSecondServe();\n      \n      if (!isSecondServe) {\n        // ...existing code...\n        if (rallyContext.rally.result === RallyResult.PtServer && isUnforcedError(rallyContext)) {\n          returnerStats.numFirstServeUnforcedErrorsByReturner++;\n        }\n      } else {\n        // ...existing code...\n        if (rallyContext.rally.result === RallyResult.PtServer && isUnforcedError(rallyContext)) {\n          returnerStats.numSecondServeUnforcedErrorsByReturner++;\n        }\n      }\n    }\n  });\n}\n",
              "resource": {
                "$mid": 1,
                "fsPath": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
                "external": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
                "path": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
                "scheme": "file"
              },
              "language": "typescript",
              "markdownBeforeBlock": "ho ho ho\n\nLet me help you modify the file to track unforced errors by returner. Here's the step-by-step solution:\n\n1. We need to modify the serve statistics tracking in both the my-serve and opponent-serve sections\n2. Add logic to track unforced errors by returner for both first and second serves\n3. Track these stats when the returner loses the point due to an unforced error\n\n### [rally_context.ts](file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts)\n\nAdd tracking of unforced errors by returner in the annotateMatchStat function.\n\n"
            }
          ],
          "messages": [
            {
              "role": "user",
              "content": "annotate numFirstServeUnforcedErrorsByReturner and  numSecondServeUnforcedErrorsByReturner"
            },
            {
              "role": "assistant",
              "content": "ho ho ho\n\nLet me help you modify the file to track unforced errors by returner. Here's the step-by-step solution:\n\n1. We need to modify the serve statistics tracking in both the my-serve and opponent-serve sections\n2. Add logic to track unforced errors by returner for both first and second serves\n3. Track these stats when the returner loses the point due to an unforced error\n\n### /Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts\n\nAdd tracking of unforced errors by returner in the annotateMatchStat function.\n\n```typescript\n// filepath: /Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts\n// ...existing code...\nexport function annotateMatchStat(rallyContexts: RallyContext[]) {\n  const stat = new MatchStat();\n  rallyContexts.forEach((rallyContext) => {\n    // ...existing code...\n    if (rallyContext.rally.isMyServe) {\n      const serverStats = stat.p1Stats;\n      const returnerStats = stat.p2Stats;\n      const isSecondServe = rallyContext.isSecondServe();\n      \n      if (isSecondServe) {\n        // ...existing code...\n        if (rallyContext.rally.result === RallyResult.PtServer && isUnforcedError(rallyContext)) {\n          returnerStats.numSecondServeUnforcedErrorsByReturner++;\n        }\n      } else {\n        // ...existing code...\n        if (rallyContext.rally.result === RallyResult.PtServer && isUnforcedError(rallyContext)) {\n          returnerStats.numFirstServeUnforcedErrorsByReturner++;\n        }\n      }\n    } else {\n      const serverStats = stat.p2Stats;\n      const returnerStats = stat.p1Stats;\n      const isSecondServe = rallyContext.isSecondServe();\n      \n      if (!isSecondServe) {\n        // ...existing code...\n        if (rallyContext.rally.result === RallyResult.PtServer && isUnforcedError(rallyContext)) {\n          returnerStats.numFirstServeUnforcedErrorsByReturner++;\n        }\n      } else {\n        // ...existing code...\n        if (rallyContext.rally.result === RallyResult.PtServer && isUnforcedError(rallyContext)) {\n          returnerStats.numSecondServeUnforcedErrorsByReturner++;\n        }\n      }\n    }\n  });\n}\n```\n\nThe key change is adding tracking when `rally.result === RallyResult.PtServer && isUnforcedError(rallyContext)`, which indicates the returner lost the point due to an unforced error. We increment either `numFirstServeUnforcedErrorsByReturner` or `numSecondServeUnforcedErrorsByReturner` on the returner's stats depending on the serve type."
            }
          ],
          "modelMessageId": "5afea2db-f79a-4c46-adb3-b299dffb667a",
          "responseId": "6ec8af9d-6353-4940-a14e-c9aad286c7d9",
          "sessionId": "c8a583d9-9302-420c-8fa7-1a53550f44ed",
          "agentId": "github.copilot.editingSession"
        }
      },
      "followups": [],
      "isCanceled": false,
      "agent": {
        "extensionId": {
          "value": "GitHub.copilot-chat",
          "_lower": "github.copilot-chat"
        },
        "publisherDisplayName": "GitHub",
        "extensionPublisherId": "GitHub",
        "extensionDisplayName": "GitHub Copilot Chat",
        "id": "github.copilot.editingSession",
        "description": "Edit files in your workspace",
        "metadata": {
          "themeIcon": {
            "id": "copilot"
          },
          "hasFollowups": false,
          "supportIssueReporting": false,
          "supportsSlowVariables": true
        },
        "name": "GitHubCopilot",
        "fullName": "GitHub Copilot",
        "isDefault": true,
        "locations": [
          "editing-session"
        ],
        "slashCommands": [],
        "disambiguation": []
      },
      "workingSet": [
        {
          "$mid": 1,
          "fsPath": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
          "external": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
          "path": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
          "scheme": "file"
        },
        {
          "$mid": 1,
          "fsPath": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
          "external": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
          "path": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
          "scheme": "file"
        }
      ],
      "contentReferences": [
        {
          "kind": "reference",
          "reference": {
            "$mid": 1,
            "fsPath": "/Users/kris/code/match-grader/.github/copilot-instructions.md",
            "external": "file:///Users/kris/code/match-grader/.github/copilot-instructions.md",
            "path": "/Users/kris/code/match-grader/.github/copilot-instructions.md",
            "scheme": "file"
          }
        }
      ],
      "codeCitations": [],
      "timestamp": 1736805704928
    },
    {
      "requestId": "request_9358d4f7-798a-4175-8010-72060452e605",
      "message": {
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 88
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 89
            },
            "text": "Imple getP1UnforcedErrorPctOn1stServeReturn (and similarly for P2 and also for 2ndServe)",
            "kind": "text"
          }
        ],
        "text": "Imple getP1UnforcedErrorPctOn1stServeReturn (and similarly for P2 and also for 2ndServe)"
      },
      "variableData": {
        "variables": [
          {
            "value": {
              "$mid": 1,
              "fsPath": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
              "external": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
              "path": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
              "scheme": "file"
            },
            "id": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
            "name": "rally_context.ts",
            "isFile": true,
            "isDynamic": true
          },
          {
            "value": {
              "$mid": 1,
              "fsPath": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/match_stat.ts",
              "external": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/match_stat.ts",
              "path": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/match_stat.ts",
              "scheme": "file"
            },
            "id": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/match_stat.ts",
            "name": "match_stat.ts",
            "isFile": true,
            "isDynamic": true
          }
        ]
      },
      "response": [
        {
          "value": "ho ho ho\n\nLet me help you implement the unforced error percentage methods for returns. Here's the solution:\n\nSteps:\n1. Add four new methods to MatchStat class for unforced error percentage on returns\n2. Calculate percentages based on the ratio of unforced errors to total serves made by opponent\n\n### [match_stat.ts](file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/match_stat.ts)\n\nAdd new methods for calculating unforced error percentages on returns.\n\n```typescript\n",
          "supportThemeIcons": false,
          "supportHtml": false
        },
        {
          "kind": "codeblockUri",
          "uri": {
            "$mid": 1,
            "fsPath": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/match_stat.ts",
            "external": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/match_stat.ts",
            "path": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/match_stat.ts",
            "scheme": "file"
          }
        },
        {
          "value": "// ...existing code...\n\nexport class MatchStat {\n  // ...existing code...\n\n  getP1UnforcedErrorPctOn1stServeReturn() {\n    if (this.p2Stats.numFirstServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p1Stats.numFirstServeUnforcedErrorsByReturner / this.p2Stats.numFirstServesMade) * 100)}%`;\n  }\n\n  getP2UnforcedErrorPctOn1stServeReturn() {\n    if (this.p1Stats.numFirstServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p2Stats.numFirstServeUnforcedErrorsByReturner / this.p1Stats.numFirstServesMade) * 100)}%`;\n  }\n\n  getP1UnforcedErrorPctOn2ndServeReturn() {\n    if (this.p2Stats.numSecondServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p1Stats.numSecondServeUnforcedErrorsByReturner / this.p2Stats.numSecondServesMade) * 100)}%`;\n  }\n\n  getP2UnforcedErrorPctOn2ndServeReturn() {\n    if (this.p1Stats.numSecondServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p2Stats.numSecondServeUnforcedErrorsByReturner / this.p1Stats.numSecondServesMade) * 100)}%`;\n  }\n\n  // ...existing code...\n}\n```\n\nThese methods calculate the percentage of unforced errors committed by each player when returning serves. The denominator is the number of made serves by the opponent (since you can only make a return error on a serve that was made). The numerator is the number of unforced errors by the returner on that serve type.",
          "supportThemeIcons": false,
          "supportHtml": false
        },
        {
          "kind": "textEditGroup",
          "uri": {
            "$mid": 1,
            "fsPath": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/match_stat.ts",
            "external": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/match_stat.ts",
            "path": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/match_stat.ts",
            "scheme": "file"
          },
          "edits": [
            [],
            [
              {
                "text": "export class MatchStat {",
                "range": {
                  "startLineNumber": 1,
                  "startColumn": 1,
                  "endLineNumber": 1,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  constructor(",
                "range": {
                  "startLineNumber": 2,
                  "startColumn": 1,
                  "endLineNumber": 2,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    public p1Stats = new PlayerStat(),",
                "range": {
                  "startLineNumber": 3,
                  "startColumn": 1,
                  "endLineNumber": 3,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    public p2Stats = new PlayerStat(),",
                "range": {
                  "startLineNumber": 4,
                  "startColumn": 1,
                  "endLineNumber": 4,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  ) {}",
                "range": {
                  "startLineNumber": 5,
                  "startColumn": 1,
                  "endLineNumber": 5,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 6,
                  "startColumn": 1,
                  "endLineNumber": 6,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  static deserialize(json: any) {",
                "range": {
                  "startLineNumber": 7,
                  "startColumn": 1,
                  "endLineNumber": 7,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return new MatchStat(",
                "range": {
                  "startLineNumber": 8,
                  "startColumn": 1,
                  "endLineNumber": 8,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      PlayerStat.deserialize(json.p1Stats),",
                "range": {
                  "startLineNumber": 9,
                  "startColumn": 1,
                  "endLineNumber": 9,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      PlayerStat.deserialize(json.p2Stats)",
                "range": {
                  "startLineNumber": 10,
                  "startColumn": 1,
                  "endLineNumber": 10,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    );",
                "range": {
                  "startLineNumber": 11,
                  "startColumn": 1,
                  "endLineNumber": 11,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 12,
                  "startColumn": 1,
                  "endLineNumber": 12,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 13,
                  "startColumn": 1,
                  "endLineNumber": 13,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  clone() {",
                "range": {
                  "startLineNumber": 14,
                  "startColumn": 1,
                  "endLineNumber": 14,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return MatchStat.deserialize(JSON.parse(JSON.stringify(this)));",
                "range": {
                  "startLineNumber": 15,
                  "startColumn": 1,
                  "endLineNumber": 15,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 16,
                  "startColumn": 1,
                  "endLineNumber": 16,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 17,
                  "startColumn": 1,
                  "endLineNumber": 17,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  toString() {",
                "range": {
                  "startLineNumber": 18,
                  "startColumn": 1,
                  "endLineNumber": 18,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return JSON.stringify(this, null, 2);",
                "range": {
                  "startLineNumber": 19,
                  "startColumn": 1,
                  "endLineNumber": 19,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 20,
                  "startColumn": 1,
                  "endLineNumber": 20,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 21,
                  "startColumn": 1,
                  "endLineNumber": 21,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  getTotalNumPoints() {",
                "range": {
                  "startLineNumber": 22,
                  "startColumn": 1,
                  "endLineNumber": 22,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    // For each player, count first serve points made + second serve attempts (including double faults)",
                "range": {
                  "startLineNumber": 23,
                  "startColumn": 1,
                  "endLineNumber": 23,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const p1Points = this.p1Stats.numFirstServesMade + this.p1Stats.numSecondServes;",
                "range": {
                  "startLineNumber": 24,
                  "startColumn": 1,
                  "endLineNumber": 24,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const p2Points = this.p2Stats.numFirstServesMade + this.p2Stats.numSecondServes;",
                "range": {
                  "startLineNumber": 25,
                  "startColumn": 1,
                  "endLineNumber": 25,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return p1Points + p2Points;",
                "range": {
                  "startLineNumber": 26,
                  "startColumn": 1,
                  "endLineNumber": 26,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 27,
                  "startColumn": 1,
                  "endLineNumber": 27,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 28,
                  "startColumn": 1,
                  "endLineNumber": 28,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  getP1PointsWon() {",
                "range": {
                  "startLineNumber": 29,
                  "startColumn": 1,
                  "endLineNumber": 29,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    // Points won on serve (first + second serves)",
                "range": {
                  "startLineNumber": 30,
                  "startColumn": 1,
                  "endLineNumber": 30,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const servePointsWon = this.p1Stats.numFirstServesWon + this.p1Stats.numSecondServesWon;",
                "range": {
                  "startLineNumber": 31,
                  "startColumn": 1,
                  "endLineNumber": 31,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    // Points won on return (when opponent served and lost)",
                "range": {
                  "startLineNumber": 32,
                  "startColumn": 1,
                  "endLineNumber": 32,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const returnPointsWon = (this.p2Stats.numFirstServesMade - this.p2Stats.numFirstServesWon) + ",
                "range": {
                  "startLineNumber": 33,
                  "startColumn": 1,
                  "endLineNumber": 33,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "                           (this.p2Stats.numSecondServesMade - this.p2Stats.numSecondServesWon) +",
                "range": {
                  "startLineNumber": 34,
                  "startColumn": 1,
                  "endLineNumber": 34,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "                           (this.p2Stats.numSecondServes - this.p2Stats.numSecondServesMade); // double faults",
                "range": {
                  "startLineNumber": 35,
                  "startColumn": 1,
                  "endLineNumber": 35,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return servePointsWon + returnPointsWon;",
                "range": {
                  "startLineNumber": 36,
                  "startColumn": 1,
                  "endLineNumber": 36,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 37,
                  "startColumn": 1,
                  "endLineNumber": 37,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 38,
                  "startColumn": 1,
                  "endLineNumber": 38,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  getP2PointsWon() {",
                "range": {
                  "startLineNumber": 39,
                  "startColumn": 1,
                  "endLineNumber": 39,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    // Points won on serve (first + second serves)",
                "range": {
                  "startLineNumber": 40,
                  "startColumn": 1,
                  "endLineNumber": 40,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const servePointsWon = this.p2Stats.numFirstServesWon + this.p2Stats.numSecondServesWon;",
                "range": {
                  "startLineNumber": 41,
                  "startColumn": 1,
                  "endLineNumber": 41,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    // Points won on return (when opponent served and lost)",
                "range": {
                  "startLineNumber": 42,
                  "startColumn": 1,
                  "endLineNumber": 42,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const returnPointsWon = (this.p1Stats.numFirstServesMade - this.p1Stats.numFirstServesWon) +",
                "range": {
                  "startLineNumber": 43,
                  "startColumn": 1,
                  "endLineNumber": 43,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "                           (this.p1Stats.numSecondServesMade - this.p1Stats.numSecondServesWon) +",
                "range": {
                  "startLineNumber": 44,
                  "startColumn": 1,
                  "endLineNumber": 44,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "                           (this.p1Stats.numSecondServes - this.p1Stats.numSecondServesMade); // double faults",
                "range": {
                  "startLineNumber": 45,
                  "startColumn": 1,
                  "endLineNumber": 45,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return servePointsWon + returnPointsWon;",
                "range": {
                  "startLineNumber": 46,
                  "startColumn": 1,
                  "endLineNumber": 46,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 47,
                  "startColumn": 1,
                  "endLineNumber": 47,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 48,
                  "startColumn": 1,
                  "endLineNumber": 48,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  getP1WinningPct() {",
                "range": {
                  "startLineNumber": 49,
                  "startColumn": 1,
                  "endLineNumber": 49,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const totalPoints = this.getTotalNumPoints();",
                "range": {
                  "startLineNumber": 50,
                  "startColumn": 1,
                  "endLineNumber": 50,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (totalPoints === 0) {",
                "range": {
                  "startLineNumber": 51,
                  "startColumn": 1,
                  "endLineNumber": 51,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return '';",
                "range": {
                  "startLineNumber": 52,
                  "startColumn": 1,
                  "endLineNumber": 52,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 53,
                  "startColumn": 1,
                  "endLineNumber": 53,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const p1Points = this.getP1PointsWon();",
                "range": {
                  "startLineNumber": 54,
                  "startColumn": 1,
                  "endLineNumber": 54,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return `${Math.floor((p1Points / totalPoints) * 100)}%`;",
                "range": {
                  "startLineNumber": 55,
                  "startColumn": 1,
                  "endLineNumber": 55,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 56,
                  "startColumn": 1,
                  "endLineNumber": 56,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 57,
                  "startColumn": 1,
                  "endLineNumber": 57,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  getP2WinningPct() {",
                "range": {
                  "startLineNumber": 58,
                  "startColumn": 1,
                  "endLineNumber": 58,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const totalPoints = this.getTotalNumPoints();",
                "range": {
                  "startLineNumber": 59,
                  "startColumn": 1,
                  "endLineNumber": 59,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (totalPoints === 0) {",
                "range": {
                  "startLineNumber": 60,
                  "startColumn": 1,
                  "endLineNumber": 60,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return '';",
                "range": {
                  "startLineNumber": 61,
                  "startColumn": 1,
                  "endLineNumber": 61,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 62,
                  "startColumn": 1,
                  "endLineNumber": 62,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const p2Points = this.getP2PointsWon();",
                "range": {
                  "startLineNumber": 63,
                  "startColumn": 1,
                  "endLineNumber": 63,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return `${Math.floor((p2Points / totalPoints) * 100)}%`;",
                "range": {
                  "startLineNumber": 64,
                  "startColumn": 1,
                  "endLineNumber": 64,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 65,
                  "startColumn": 1,
                  "endLineNumber": 65,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 66,
                  "startColumn": 1,
                  "endLineNumber": 66,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  getP1ForcingWinPct() {",
                "range": {
                  "startLineNumber": 67,
                  "startColumn": 1,
                  "endLineNumber": 67,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const totalPoints = this.getTotalNumPoints();",
                "range": {
                  "startLineNumber": 68,
                  "startColumn": 1,
                  "endLineNumber": 68,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (totalPoints === 0) {",
                "range": {
                  "startLineNumber": 69,
                  "startColumn": 1,
                  "endLineNumber": 69,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return '';",
                "range": {
                  "startLineNumber": 70,
                  "startColumn": 1,
                  "endLineNumber": 70,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 71,
                  "startColumn": 1,
                  "endLineNumber": 71,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const serverForcingWins = this.p1Stats.numFirstServeForcingWins + this.p1Stats.numSecondServeForcingWins;",
                "range": {
                  "startLineNumber": 72,
                  "startColumn": 1,
                  "endLineNumber": 72,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const returnerForcingWins = this.p2Stats.numFirstServeForcingWinsByReturner + this.p2Stats.numSecondServeForcingWinsByReturner;",
                "range": {
                  "startLineNumber": 73,
                  "startColumn": 1,
                  "endLineNumber": 73,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return `${Math.floor(((serverForcingWins + returnerForcingWins) / totalPoints) * 100)}%`;",
                "range": {
                  "startLineNumber": 74,
                  "startColumn": 1,
                  "endLineNumber": 74,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 75,
                  "startColumn": 1,
                  "endLineNumber": 75,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 76,
                  "startColumn": 1,
                  "endLineNumber": 76,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  getP2ForcingWinPct() {",
                "range": {
                  "startLineNumber": 77,
                  "startColumn": 1,
                  "endLineNumber": 77,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const totalPoints = this.getTotalNumPoints();",
                "range": {
                  "startLineNumber": 78,
                  "startColumn": 1,
                  "endLineNumber": 78,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (totalPoints === 0) {",
                "range": {
                  "startLineNumber": 79,
                  "startColumn": 1,
                  "endLineNumber": 79,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return '';",
                "range": {
                  "startLineNumber": 80,
                  "startColumn": 1,
                  "endLineNumber": 80,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 81,
                  "startColumn": 1,
                  "endLineNumber": 81,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const serverForcingWins = this.p2Stats.numFirstServeForcingWins + this.p2Stats.numSecondServeForcingWins;",
                "range": {
                  "startLineNumber": 82,
                  "startColumn": 1,
                  "endLineNumber": 82,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const returnerForcingWins = this.p1Stats.numFirstServeForcingWinsByReturner + this.p1Stats.numSecondServeForcingWinsByReturner;",
                "range": {
                  "startLineNumber": 83,
                  "startColumn": 1,
                  "endLineNumber": 83,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return `${Math.floor(((serverForcingWins + returnerForcingWins) / totalPoints) * 100)}%`;",
                "range": {
                  "startLineNumber": 84,
                  "startColumn": 1,
                  "endLineNumber": 84,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 85,
                  "startColumn": 1,
                  "endLineNumber": 85,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 86,
                  "startColumn": 1,
                  "endLineNumber": 86,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  getP1ForcingWinPctOnServe() {",
                "range": {
                  "startLineNumber": 87,
                  "startColumn": 1,
                  "endLineNumber": 87,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const totalServePoints = this.p1Stats.numFirstServesMade + this.p1Stats.numSecondServes;",
                "range": {
                  "startLineNumber": 88,
                  "startColumn": 1,
                  "endLineNumber": 88,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (totalServePoints === 0) {",
                "range": {
                  "startLineNumber": 89,
                  "startColumn": 1,
                  "endLineNumber": 89,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return '';",
                "range": {
                  "startLineNumber": 90,
                  "startColumn": 1,
                  "endLineNumber": 90,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 91,
                  "startColumn": 1,
                  "endLineNumber": 91,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const forcingWins = this.p1Stats.numFirstServeForcingWins + this.p1Stats.numSecondServeForcingWins;",
                "range": {
                  "startLineNumber": 92,
                  "startColumn": 1,
                  "endLineNumber": 92,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return `${Math.floor((forcingWins / totalServePoints) * 100)}%`;",
                "range": {
                  "startLineNumber": 93,
                  "startColumn": 1,
                  "endLineNumber": 93,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 94,
                  "startColumn": 1,
                  "endLineNumber": 94,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 95,
                  "startColumn": 1,
                  "endLineNumber": 95,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  getP2ForcingWinPctOnServe() {",
                "range": {
                  "startLineNumber": 96,
                  "startColumn": 1,
                  "endLineNumber": 96,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const totalServePoints = this.p2Stats.numFirstServesMade + this.p2Stats.numSecondServes;",
                "range": {
                  "startLineNumber": 97,
                  "startColumn": 1,
                  "endLineNumber": 97,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (totalServePoints === 0) {",
                "range": {
                  "startLineNumber": 98,
                  "startColumn": 1,
                  "endLineNumber": 98,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return '';",
                "range": {
                  "startLineNumber": 99,
                  "startColumn": 1,
                  "endLineNumber": 99,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 100,
                  "startColumn": 1,
                  "endLineNumber": 100,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const forcingWins = this.p2Stats.numFirstServeForcingWins + this.p2Stats.numSecondServeForcingWins;",
                "range": {
                  "startLineNumber": 101,
                  "startColumn": 1,
                  "endLineNumber": 101,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return `${Math.floor((forcingWins / totalServePoints) * 100)}%`;",
                "range": {
                  "startLineNumber": 102,
                  "startColumn": 1,
                  "endLineNumber": 102,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 103,
                  "startColumn": 1,
                  "endLineNumber": 103,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 104,
                  "startColumn": 1,
                  "endLineNumber": 104,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  getP1ForcingWinPctOnFirstServe() {",
                "range": {
                  "startLineNumber": 105,
                  "startColumn": 1,
                  "endLineNumber": 105,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (this.p1Stats.numFirstServesMade === 0) {",
                "range": {
                  "startLineNumber": 106,
                  "startColumn": 1,
                  "endLineNumber": 106,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return '';",
                "range": {
                  "startLineNumber": 107,
                  "startColumn": 1,
                  "endLineNumber": 107,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 108,
                  "startColumn": 1,
                  "endLineNumber": 108,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return `${Math.floor((this.p1Stats.numFirstServeForcingWins / this.p1Stats.numFirstServesMade) * 100)}%`;",
                "range": {
                  "startLineNumber": 109,
                  "startColumn": 1,
                  "endLineNumber": 109,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 110,
                  "startColumn": 1,
                  "endLineNumber": 110,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 111,
                  "startColumn": 1,
                  "endLineNumber": 111,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  getP2ForcingWinPctOnFirstServe() {",
                "range": {
                  "startLineNumber": 112,
                  "startColumn": 1,
                  "endLineNumber": 112,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (this.p2Stats.numFirstServesMade === 0) {",
                "range": {
                  "startLineNumber": 113,
                  "startColumn": 1,
                  "endLineNumber": 113,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return '';",
                "range": {
                  "startLineNumber": 114,
                  "startColumn": 1,
                  "endLineNumber": 114,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 115,
                  "startColumn": 1,
                  "endLineNumber": 115,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return `${Math.floor((this.p2Stats.numFirstServeForcingWins / this.p2Stats.numFirstServesMade) * 100)}%`;",
                "range": {
                  "startLineNumber": 116,
                  "startColumn": 1,
                  "endLineNumber": 116,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 117,
                  "startColumn": 1,
                  "endLineNumber": 117,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 118,
                  "startColumn": 1,
                  "endLineNumber": 118,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  getP1ForcingWinPctOnSecondServe() {",
                "range": {
                  "startLineNumber": 119,
                  "startColumn": 1,
                  "endLineNumber": 119,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (this.p1Stats.numSecondServes === 0) {",
                "range": {
                  "startLineNumber": 120,
                  "startColumn": 1,
                  "endLineNumber": 120,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return '';",
                "range": {
                  "startLineNumber": 121,
                  "startColumn": 1,
                  "endLineNumber": 121,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 122,
                  "startColumn": 1,
                  "endLineNumber": 122,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return `${Math.floor((this.p1Stats.numSecondServeForcingWins / this.p1Stats.numSecondServes) * 100)}%`;",
                "range": {
                  "startLineNumber": 123,
                  "startColumn": 1,
                  "endLineNumber": 123,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 124,
                  "startColumn": 1,
                  "endLineNumber": 124,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 125,
                  "startColumn": 1,
                  "endLineNumber": 125,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  getP2ForcingWinPctOnSecondServe() {",
                "range": {
                  "startLineNumber": 126,
                  "startColumn": 1,
                  "endLineNumber": 126,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (this.p2Stats.numSecondServes === 0) {",
                "range": {
                  "startLineNumber": 127,
                  "startColumn": 1,
                  "endLineNumber": 127,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return '';",
                "range": {
                  "startLineNumber": 128,
                  "startColumn": 1,
                  "endLineNumber": 128,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 129,
                  "startColumn": 1,
                  "endLineNumber": 129,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return `${Math.floor((this.p2Stats.numSecondServeForcingWins / this.p2Stats.numSecondServes) * 100)}%`;",
                "range": {
                  "startLineNumber": 130,
                  "startColumn": 1,
                  "endLineNumber": 130,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 131,
                  "startColumn": 1,
                  "endLineNumber": 131,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 132,
                  "startColumn": 1,
                  "endLineNumber": 132,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  getP1ForcingWinPctOnReturn() {",
                "range": {
                  "startLineNumber": 133,
                  "startColumn": 1,
                  "endLineNumber": 133,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const oppoTotalServes = this.p2Stats.numFirstServesMade + this.p2Stats.numSecondServes;",
                "range": {
                  "startLineNumber": 134,
                  "startColumn": 1,
                  "endLineNumber": 134,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (oppoTotalServes === 0) {",
                "range": {
                  "startLineNumber": 135,
                  "startColumn": 1,
                  "endLineNumber": 135,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return '';",
                "range": {
                  "startLineNumber": 136,
                  "startColumn": 1,
                  "endLineNumber": 136,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 137,
                  "startColumn": 1,
                  "endLineNumber": 137,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const forcingWins = this.p1Stats.numFirstServeForcingWinsByReturner + this.p1Stats.numSecondServeForcingWinsByReturner;",
                "range": {
                  "startLineNumber": 138,
                  "startColumn": 1,
                  "endLineNumber": 138,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return `${Math.floor((forcingWins / oppoTotalServes) * 100)}%`;",
                "range": {
                  "startLineNumber": 139,
                  "startColumn": 1,
                  "endLineNumber": 139,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 140,
                  "startColumn": 1,
                  "endLineNumber": 140,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 141,
                  "startColumn": 1,
                  "endLineNumber": 141,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  getP2ForcingWinPctOnReturn() {",
                "range": {
                  "startLineNumber": 142,
                  "startColumn": 1,
                  "endLineNumber": 142,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const oppoTotalServes = this.p1Stats.numFirstServesMade + this.p1Stats.numSecondServes;",
                "range": {
                  "startLineNumber": 143,
                  "startColumn": 1,
                  "endLineNumber": 143,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (oppoTotalServes === 0) {",
                "range": {
                  "startLineNumber": 144,
                  "startColumn": 1,
                  "endLineNumber": 144,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return '';",
                "range": {
                  "startLineNumber": 145,
                  "startColumn": 1,
                  "endLineNumber": 145,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 146,
                  "startColumn": 1,
                  "endLineNumber": 146,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const forcingWins = this.p2Stats.numFirstServeForcingWinsByReturner + this.p2Stats.numSecondServeForcingWinsByReturner;",
                "range": {
                  "startLineNumber": 147,
                  "startColumn": 1,
                  "endLineNumber": 147,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return `${Math.floor((forcingWins / oppoTotalServes) * 100)}%`;",
                "range": {
                  "startLineNumber": 148,
                  "startColumn": 1,
                  "endLineNumber": 148,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 149,
                  "startColumn": 1,
                  "endLineNumber": 149,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 150,
                  "startColumn": 1,
                  "endLineNumber": 150,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  getP1ForcingWinPctOnFirstReturn() {",
                "range": {
                  "startLineNumber": 151,
                  "startColumn": 1,
                  "endLineNumber": 151,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (this.p2Stats.numFirstServesMade === 0) {",
                "range": {
                  "startLineNumber": 152,
                  "startColumn": 1,
                  "endLineNumber": 152,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return '';",
                "range": {
                  "startLineNumber": 153,
                  "startColumn": 1,
                  "endLineNumber": 153,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 154,
                  "startColumn": 1,
                  "endLineNumber": 154,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return `${Math.floor((this.p1Stats.numFirstServeForcingWinsByReturner / this.p2Stats.numFirstServesMade) * 100)}%`;",
                "range": {
                  "startLineNumber": 155,
                  "startColumn": 1,
                  "endLineNumber": 155,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 156,
                  "startColumn": 1,
                  "endLineNumber": 156,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 157,
                  "startColumn": 1,
                  "endLineNumber": 157,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  getP2ForcingWinPctOnFirstReturn() {",
                "range": {
                  "startLineNumber": 158,
                  "startColumn": 1,
                  "endLineNumber": 158,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (this.p1Stats.numFirstServesMade === 0) {",
                "range": {
                  "startLineNumber": 159,
                  "startColumn": 1,
                  "endLineNumber": 159,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return '';",
                "range": {
                  "startLineNumber": 160,
                  "startColumn": 1,
                  "endLineNumber": 160,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 161,
                  "startColumn": 1,
                  "endLineNumber": 161,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return `${Math.floor((this.p2Stats.numFirstServeForcingWinsByReturner / this.p1Stats.numFirstServesMade) * 100)}%`;",
                "range": {
                  "startLineNumber": 162,
                  "startColumn": 1,
                  "endLineNumber": 162,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 163,
                  "startColumn": 1,
                  "endLineNumber": 163,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 164,
                  "startColumn": 1,
                  "endLineNumber": 164,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  getP1ForcingWinPctOnSecondReturn() {",
                "range": {
                  "startLineNumber": 165,
                  "startColumn": 1,
                  "endLineNumber": 165,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (this.p2Stats.numSecondServes === 0) {",
                "range": {
                  "startLineNumber": 166,
                  "startColumn": 1,
                  "endLineNumber": 166,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return '';",
                "range": {
                  "startLineNumber": 167,
                  "startColumn": 1,
                  "endLineNumber": 167,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 168,
                  "startColumn": 1,
                  "endLineNumber": 168,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return `${Math.floor((this.p1Stats.numSecondServeForcingWinsByReturner / this.p2Stats.numSecondServesMade) * 100)}%`;",
                "range": {
                  "startLineNumber": 169,
                  "startColumn": 1,
                  "endLineNumber": 169,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 170,
                  "startColumn": 1,
                  "endLineNumber": 170,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 171,
                  "startColumn": 1,
                  "endLineNumber": 171,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  getP2ForcingWinPctOnSecondReturn() {",
                "range": {
                  "startLineNumber": 172,
                  "startColumn": 1,
                  "endLineNumber": 172,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (this.p1Stats.numSecondServes === 0) {",
                "range": {
                  "startLineNumber": 173,
                  "startColumn": 1,
                  "endLineNumber": 173,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return '';",
                "range": {
                  "startLineNumber": 174,
                  "startColumn": 1,
                  "endLineNumber": 174,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 175,
                  "startColumn": 1,
                  "endLineNumber": 175,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return `${Math.floor((this.p2Stats.numSecondServeForcingWinsByReturner / this.p1Stats.numSecondServesMade) * 100)}%`;",
                "range": {
                  "startLineNumber": 176,
                  "startColumn": 1,
                  "endLineNumber": 176,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 177,
                  "startColumn": 1,
                  "endLineNumber": 177,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 178,
                  "startColumn": 1,
                  "endLineNumber": 178,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  getP1UnforcedErrorPct() {",
                "range": {
                  "startLineNumber": 179,
                  "startColumn": 1,
                  "endLineNumber": 179,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const totalPoints = this.getTotalNumPoints();",
                "range": {
                  "startLineNumber": 180,
                  "startColumn": 1,
                  "endLineNumber": 180,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (totalPoints === 0) {",
                "range": {
                  "startLineNumber": 181,
                  "startColumn": 1,
                  "endLineNumber": 181,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return '';",
                "range": {
                  "startLineNumber": 182,
                  "startColumn": 1,
                  "endLineNumber": 182,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 183,
                  "startColumn": 1,
                  "endLineNumber": 183,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const serverUEs = this.p1Stats.numFirstServeUnforcedErrors + this.p1Stats.numSecondServeUnforcedErrors;",
                "range": {
                  "startLineNumber": 184,
                  "startColumn": 1,
                  "endLineNumber": 184,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const returnerUEs = this.p2Stats.numFirstServeUnforcedErrorsByReturner + this.p2Stats.numSecondServeUnforcedErrorsByReturner;",
                "range": {
                  "startLineNumber": 185,
                  "startColumn": 1,
                  "endLineNumber": 185,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return `${Math.floor(((serverUEs + returnerUEs) / totalPoints) * 100)}%`;",
                "range": {
                  "startLineNumber": 186,
                  "startColumn": 1,
                  "endLineNumber": 186,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 187,
                  "startColumn": 1,
                  "endLineNumber": 187,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 188,
                  "startColumn": 1,
                  "endLineNumber": 188,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  getP2UnforcedErrorPct() {",
                "range": {
                  "startLineNumber": 189,
                  "startColumn": 1,
                  "endLineNumber": 189,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const totalPoints = this.getTotalNumPoints();",
                "range": {
                  "startLineNumber": 190,
                  "startColumn": 1,
                  "endLineNumber": 190,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (totalPoints === 0) {",
                "range": {
                  "startLineNumber": 191,
                  "startColumn": 1,
                  "endLineNumber": 191,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return '';",
                "range": {
                  "startLineNumber": 192,
                  "startColumn": 1,
                  "endLineNumber": 192,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 193,
                  "startColumn": 1,
                  "endLineNumber": 193,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const serverUEs = this.p2Stats.numFirstServeUnforcedErrors + this.p2Stats.numSecondServeUnforcedErrors;",
                "range": {
                  "startLineNumber": 194,
                  "startColumn": 1,
                  "endLineNumber": 194,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const returnerUEs = this.p1Stats.numFirstServeUnforcedErrorsByReturner + this.p1Stats.numSecondServeUnforcedErrorsByReturner;",
                "range": {
                  "startLineNumber": 195,
                  "startColumn": 1,
                  "endLineNumber": 195,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return `${Math.floor(((serverUEs + returnerUEs) / totalPoints) * 100)}%`;",
                "range": {
                  "startLineNumber": 196,
                  "startColumn": 1,
                  "endLineNumber": 196,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 197,
                  "startColumn": 1,
                  "endLineNumber": 197,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 198,
                  "startColumn": 1,
                  "endLineNumber": 198,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  getP1UnforcedErrorPctOnServe() {",
                "range": {
                  "startLineNumber": 199,
                  "startColumn": 1,
                  "endLineNumber": 199,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const totalServePoints = this.p1Stats.numFirstServesMade + this.p1Stats.numSecondServes;",
                "range": {
                  "startLineNumber": 200,
                  "startColumn": 1,
                  "endLineNumber": 200,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (totalServePoints === 0) {",
                "range": {
                  "startLineNumber": 201,
                  "startColumn": 1,
                  "endLineNumber": 201,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return '';",
                "range": {
                  "startLineNumber": 202,
                  "startColumn": 1,
                  "endLineNumber": 202,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 203,
                  "startColumn": 1,
                  "endLineNumber": 203,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const UEs = this.p1Stats.numFirstServeUnforcedErrors + this.p1Stats.numSecondServeUnforcedErrors;",
                "range": {
                  "startLineNumber": 204,
                  "startColumn": 1,
                  "endLineNumber": 204,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return `${Math.floor((UEs / totalServePoints) * 100)}%`;",
                "range": {
                  "startLineNumber": 205,
                  "startColumn": 1,
                  "endLineNumber": 205,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 206,
                  "startColumn": 1,
                  "endLineNumber": 206,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 207,
                  "startColumn": 1,
                  "endLineNumber": 207,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  getP2UnforcedErrorPctOnServe() {",
                "range": {
                  "startLineNumber": 208,
                  "startColumn": 1,
                  "endLineNumber": 208,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const totalServePoints = this.p2Stats.numFirstServesMade + this.p2Stats.numSecondServes;",
                "range": {
                  "startLineNumber": 209,
                  "startColumn": 1,
                  "endLineNumber": 209,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (totalServePoints === 0) {",
                "range": {
                  "startLineNumber": 210,
                  "startColumn": 1,
                  "endLineNumber": 210,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return '';",
                "range": {
                  "startLineNumber": 211,
                  "startColumn": 1,
                  "endLineNumber": 211,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 212,
                  "startColumn": 1,
                  "endLineNumber": 212,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const UEs = this.p2Stats.numFirstServeUnforcedErrors + this.p2Stats.numSecondServeUnforcedErrors;",
                "range": {
                  "startLineNumber": 213,
                  "startColumn": 1,
                  "endLineNumber": 213,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return `${Math.floor((UEs / totalServePoints) * 100)}%`;",
                "range": {
                  "startLineNumber": 214,
                  "startColumn": 1,
                  "endLineNumber": 214,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 215,
                  "startColumn": 1,
                  "endLineNumber": 215,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 216,
                  "startColumn": 1,
                  "endLineNumber": 216,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  getP1UnforcedErrorPctOnFirstServe() {",
                "range": {
                  "startLineNumber": 217,
                  "startColumn": 1,
                  "endLineNumber": 217,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (this.p1Stats.numFirstServesMade === 0) {",
                "range": {
                  "startLineNumber": 218,
                  "startColumn": 1,
                  "endLineNumber": 218,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return '';",
                "range": {
                  "startLineNumber": 219,
                  "startColumn": 1,
                  "endLineNumber": 219,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 220,
                  "startColumn": 1,
                  "endLineNumber": 220,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return `${Math.floor((this.p1Stats.numFirstServeUnforcedErrors / this.p1Stats.numFirstServesMade) * 100)}%`;",
                "range": {
                  "startLineNumber": 221,
                  "startColumn": 1,
                  "endLineNumber": 221,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 222,
                  "startColumn": 1,
                  "endLineNumber": 222,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 223,
                  "startColumn": 1,
                  "endLineNumber": 223,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  getP2UnforcedErrorPctOnFirstServe() {",
                "range": {
                  "startLineNumber": 224,
                  "startColumn": 1,
                  "endLineNumber": 224,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (this.p2Stats.numFirstServesMade === 0) {",
                "range": {
                  "startLineNumber": 225,
                  "startColumn": 1,
                  "endLineNumber": 225,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return '';",
                "range": {
                  "startLineNumber": 226,
                  "startColumn": 1,
                  "endLineNumber": 226,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 227,
                  "startColumn": 1,
                  "endLineNumber": 227,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return `${Math.floor((this.p2Stats.numFirstServeUnforcedErrors / this.p2Stats.numFirstServesMade) * 100)}%`;",
                "range": {
                  "startLineNumber": 228,
                  "startColumn": 1,
                  "endLineNumber": 228,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 229,
                  "startColumn": 1,
                  "endLineNumber": 229,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 230,
                  "startColumn": 1,
                  "endLineNumber": 230,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  getP1UnforcedErrorPctOnSecondServe() {",
                "range": {
                  "startLineNumber": 231,
                  "startColumn": 1,
                  "endLineNumber": 231,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (this.p1Stats.numSecondServes === 0) {",
                "range": {
                  "startLineNumber": 232,
                  "startColumn": 1,
                  "endLineNumber": 232,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return '';",
                "range": {
                  "startLineNumber": 233,
                  "startColumn": 1,
                  "endLineNumber": 233,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 234,
                  "startColumn": 1,
                  "endLineNumber": 234,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return `${Math.floor((this.p1Stats.numSecondServeUnforcedErrors / this.p1Stats.numSecondServes) * 100)}%`;",
                "range": {
                  "startLineNumber": 235,
                  "startColumn": 1,
                  "endLineNumber": 235,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 236,
                  "startColumn": 1,
                  "endLineNumber": 236,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 237,
                  "startColumn": 1,
                  "endLineNumber": 237,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  getP2UnforcedErrorPctOnSecondServe() {",
                "range": {
                  "startLineNumber": 238,
                  "startColumn": 1,
                  "endLineNumber": 238,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (this.p2Stats.numSecondServes === 0) {",
                "range": {
                  "startLineNumber": 239,
                  "startColumn": 1,
                  "endLineNumber": 239,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return '';",
                "range": {
                  "startLineNumber": 240,
                  "startColumn": 1,
                  "endLineNumber": 240,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 241,
                  "startColumn": 1,
                  "endLineNumber": 241,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return `${Math.floor((this.p2Stats.numSecondServeUnforcedErrors / this.p2Stats.numSecondServes) * 100)}%`;",
                "range": {
                  "startLineNumber": 242,
                  "startColumn": 1,
                  "endLineNumber": 242,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 243,
                  "startColumn": 1,
                  "endLineNumber": 243,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 244,
                  "startColumn": 1,
                  "endLineNumber": 244,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  getP1UnforcedErrorPctOnReturn() {",
                "range": {
                  "startLineNumber": 245,
                  "startColumn": 1,
                  "endLineNumber": 245,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const oppoTotalServes = this.p2Stats.numFirstServesMade + this.p2Stats.numSecondServesMade;",
                "range": {
                  "startLineNumber": 246,
                  "startColumn": 1,
                  "endLineNumber": 246,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (oppoTotalServes === 0) {",
                "range": {
                  "startLineNumber": 247,
                  "startColumn": 1,
                  "endLineNumber": 247,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return '';",
                "range": {
                  "startLineNumber": 248,
                  "startColumn": 1,
                  "endLineNumber": 248,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 249,
                  "startColumn": 1,
                  "endLineNumber": 249,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const UEs = this.p2Stats.numFirstServeUnforcedErrorsByReturner + this.p2Stats.numSecondServeUnforcedErrorsByReturner;",
                "range": {
                  "startLineNumber": 250,
                  "startColumn": 1,
                  "endLineNumber": 250,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return `${Math.floor((UEs / oppoTotalServes) * 100)}%`;",
                "range": {
                  "startLineNumber": 251,
                  "startColumn": 1,
                  "endLineNumber": 251,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 252,
                  "startColumn": 1,
                  "endLineNumber": 252,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 253,
                  "startColumn": 1,
                  "endLineNumber": 253,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  getP2UnforcedErrorPctOnReturn() {",
                "range": {
                  "startLineNumber": 254,
                  "startColumn": 1,
                  "endLineNumber": 254,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const oppoTotalServes = this.p1Stats.numFirstServesMade + this.p1Stats.numSecondServesMade;",
                "range": {
                  "startLineNumber": 255,
                  "startColumn": 1,
                  "endLineNumber": 255,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (oppoTotalServes === 0) {",
                "range": {
                  "startLineNumber": 256,
                  "startColumn": 1,
                  "endLineNumber": 256,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return '';",
                "range": {
                  "startLineNumber": 257,
                  "startColumn": 1,
                  "endLineNumber": 257,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 258,
                  "startColumn": 1,
                  "endLineNumber": 258,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const UEs = this.p1Stats.numFirstServeUnforcedErrorsByReturner + this.p1Stats.numSecondServeUnforcedErrorsByReturner;",
                "range": {
                  "startLineNumber": 259,
                  "startColumn": 1,
                  "endLineNumber": 259,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return `${Math.floor((UEs / oppoTotalServes) * 100)}%`;",
                "range": {
                  "startLineNumber": 260,
                  "startColumn": 1,
                  "endLineNumber": 260,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 261,
                  "startColumn": 1,
                  "endLineNumber": 261,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 262,
                  "startColumn": 1,
                  "endLineNumber": 262,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  getP1UnforcedErrorPctOn1stServeReturn() {",
                "range": {
                  "startLineNumber": 263,
                  "startColumn": 1,
                  "endLineNumber": 263,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (this.p2Stats.numFirstServesMade === 0) {",
                "range": {
                  "startLineNumber": 264,
                  "startColumn": 1,
                  "endLineNumber": 264,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return '';",
                "range": {
                  "startLineNumber": 265,
                  "startColumn": 1,
                  "endLineNumber": 265,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 266,
                  "startColumn": 1,
                  "endLineNumber": 266,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return `${Math.floor((this.p1Stats.numFirstServeUnforcedErrorsByReturner / this.p2Stats.numFirstServesMade) * 100)}%`;",
                "range": {
                  "startLineNumber": 267,
                  "startColumn": 1,
                  "endLineNumber": 267,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 268,
                  "startColumn": 1,
                  "endLineNumber": 268,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 269,
                  "startColumn": 1,
                  "endLineNumber": 269,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  getP2UnforcedErrorPctOn1stServeReturn() {",
                "range": {
                  "startLineNumber": 270,
                  "startColumn": 1,
                  "endLineNumber": 270,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (this.p1Stats.numFirstServesMade === 0) {",
                "range": {
                  "startLineNumber": 271,
                  "startColumn": 1,
                  "endLineNumber": 271,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return '';",
                "range": {
                  "startLineNumber": 272,
                  "startColumn": 1,
                  "endLineNumber": 272,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 273,
                  "startColumn": 1,
                  "endLineNumber": 273,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return `${Math.floor((this.p2Stats.numFirstServeUnforcedErrorsByReturner / this.p1Stats.numFirstServesMade) * 100)}%`;",
                "range": {
                  "startLineNumber": 274,
                  "startColumn": 1,
                  "endLineNumber": 274,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 275,
                  "startColumn": 1,
                  "endLineNumber": 275,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 276,
                  "startColumn": 1,
                  "endLineNumber": 276,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  getP1UnforcedErrorPctOn2ndServeReturn() {",
                "range": {
                  "startLineNumber": 277,
                  "startColumn": 1,
                  "endLineNumber": 277,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (this.p2Stats.numSecondServesMade === 0) {",
                "range": {
                  "startLineNumber": 278,
                  "startColumn": 1,
                  "endLineNumber": 278,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return '';",
                "range": {
                  "startLineNumber": 279,
                  "startColumn": 1,
                  "endLineNumber": 279,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 280,
                  "startColumn": 1,
                  "endLineNumber": 280,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return `${Math.floor((this.p1Stats.numSecondServeUnforcedErrorsByReturner / this.p2Stats.numSecondServesMade) * 100)}%`;",
                "range": {
                  "startLineNumber": 281,
                  "startColumn": 1,
                  "endLineNumber": 281,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 282,
                  "startColumn": 1,
                  "endLineNumber": 282,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 283,
                  "startColumn": 1,
                  "endLineNumber": 283,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  getP2UnforcedErrorPctOn2ndServeReturn() {",
                "range": {
                  "startLineNumber": 284,
                  "startColumn": 1,
                  "endLineNumber": 284,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (this.p1Stats.numSecondServesMade === 0) {",
                "range": {
                  "startLineNumber": 285,
                  "startColumn": 1,
                  "endLineNumber": 285,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return '';",
                "range": {
                  "startLineNumber": 286,
                  "startColumn": 1,
                  "endLineNumber": 286,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 287,
                  "startColumn": 1,
                  "endLineNumber": 287,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return `${Math.floor((this.p2Stats.numSecondServeUnforcedErrorsByReturner / this.p1Stats.numSecondServesMade) * 100)}%`;",
                "range": {
                  "startLineNumber": 288,
                  "startColumn": 1,
                  "endLineNumber": 288,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 289,
                  "startColumn": 1,
                  "endLineNumber": 289,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 290,
                  "startColumn": 1,
                  "endLineNumber": 290,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 291,
                  "startColumn": 1,
                  "endLineNumber": 291,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "// The fields should be counter stats (e.g. percentages should be methods only).",
                "range": {
                  "startLineNumber": 292,
                  "startColumn": 1,
                  "endLineNumber": 292,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "// Reduce redundancy by making these as methods instead of fields:",
                "range": {
                  "startLineNumber": 293,
                  "startColumn": 1,
                  "endLineNumber": 293,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "// - numDoubleFaults = numSecondServes - numSecondServesMade",
                "range": {
                  "startLineNumber": 294,
                  "startColumn": 1,
                  "endLineNumber": 294,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "// - numFirstServesLoss = numFirstServesMade - numFirstServesWon",
                "range": {
                  "startLineNumber": 295,
                  "startColumn": 1,
                  "endLineNumber": 295,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "// - numSecondServesLoss = numSecondServes - numSecondServesWon",
                "range": {
                  "startLineNumber": 296,
                  "startColumn": 1,
                  "endLineNumber": 296,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "// - p1.numFirstServeReturnWon = p2.numFirstServeMade - p2.numFirstServesLoss",
                "range": {
                  "startLineNumber": 297,
                  "startColumn": 1,
                  "endLineNumber": 297,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "export class PlayerStat {",
                "range": {
                  "startLineNumber": 298,
                  "startColumn": 1,
                  "endLineNumber": 298,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  constructor(",
                "range": {
                  "startLineNumber": 299,
                  "startColumn": 1,
                  "endLineNumber": 299,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    public numGamePts = 0,",
                "range": {
                  "startLineNumber": 300,
                  "startColumn": 1,
                  "endLineNumber": 300,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    public numSetPts = 0,",
                "range": {
                  "startLineNumber": 301,
                  "startColumn": 1,
                  "endLineNumber": 301,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    // Don't count let.",
                "range": {
                  "startLineNumber": 302,
                  "startColumn": 1,
                  "endLineNumber": 302,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    public numFirstServes = 0,",
                "range": {
                  "startLineNumber": 303,
                  "startColumn": 1,
                  "endLineNumber": 303,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    public numFirstServesMade = 0,",
                "range": {
                  "startLineNumber": 304,
                  "startColumn": 1,
                  "endLineNumber": 304,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    public numFirstServesWon = 0,",
                "range": {
                  "startLineNumber": 305,
                  "startColumn": 1,
                  "endLineNumber": 305,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    // Don't count let.",
                "range": {
                  "startLineNumber": 306,
                  "startColumn": 1,
                  "endLineNumber": 306,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    public numSecondServes = 0,",
                "range": {
                  "startLineNumber": 307,
                  "startColumn": 1,
                  "endLineNumber": 307,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    public numSecondServesMade = 0,",
                "range": {
                  "startLineNumber": 308,
                  "startColumn": 1,
                  "endLineNumber": 308,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    public numSecondServesWon = 0,",
                "range": {
                  "startLineNumber": 309,
                  "startColumn": 1,
                  "endLineNumber": 309,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    public numFirstServeForcingWins = 0,",
                "range": {
                  "startLineNumber": 310,
                  "startColumn": 1,
                  "endLineNumber": 310,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    public numSecondServeForcingWins = 0,",
                "range": {
                  "startLineNumber": 311,
                  "startColumn": 1,
                  "endLineNumber": 311,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    public numFirstServeForcingWinsByReturner = 0,",
                "range": {
                  "startLineNumber": 312,
                  "startColumn": 1,
                  "endLineNumber": 312,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    public numSecondServeForcingWinsByReturner = 0,",
                "range": {
                  "startLineNumber": 313,
                  "startColumn": 1,
                  "endLineNumber": 313,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    public numFirstServeUnforcedErrors = 0,",
                "range": {
                  "startLineNumber": 314,
                  "startColumn": 1,
                  "endLineNumber": 314,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    public numSecondServeUnforcedErrors = 0,",
                "range": {
                  "startLineNumber": 315,
                  "startColumn": 1,
                  "endLineNumber": 315,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    public numFirstServeUnforcedErrorsByReturner = 0,",
                "range": {
                  "startLineNumber": 316,
                  "startColumn": 1,
                  "endLineNumber": 316,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    public numSecondServeUnforcedErrorsByReturner = 0,",
                "range": {
                  "startLineNumber": 317,
                  "startColumn": 1,
                  "endLineNumber": 317,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  ) {}",
                "range": {
                  "startLineNumber": 318,
                  "startColumn": 1,
                  "endLineNumber": 318,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 319,
                  "startColumn": 1,
                  "endLineNumber": 319,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  static deserialize(json: any) {",
                "range": {
                  "startLineNumber": 320,
                  "startColumn": 1,
                  "endLineNumber": 320,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return new PlayerStat(",
                "range": {
                  "startLineNumber": 321,
                  "startColumn": 1,
                  "endLineNumber": 321,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      json.numGamePts,",
                "range": {
                  "startLineNumber": 322,
                  "startColumn": 1,
                  "endLineNumber": 322,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      json.numSetPts,",
                "range": {
                  "startLineNumber": 323,
                  "startColumn": 1,
                  "endLineNumber": 323,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      json.numFirstServes,",
                "range": {
                  "startLineNumber": 324,
                  "startColumn": 1,
                  "endLineNumber": 324,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      json.numFirstServesMade,",
                "range": {
                  "startLineNumber": 325,
                  "startColumn": 1,
                  "endLineNumber": 325,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      json.numFirstServesWon,",
                "range": {
                  "startLineNumber": 326,
                  "startColumn": 1,
                  "endLineNumber": 326,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      json.numSecondServes,",
                "range": {
                  "startLineNumber": 327,
                  "startColumn": 1,
                  "endLineNumber": 327,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      json.numSecondServesMade,",
                "range": {
                  "startLineNumber": 328,
                  "startColumn": 1,
                  "endLineNumber": 328,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      json.numSecondServesWon,",
                "range": {
                  "startLineNumber": 329,
                  "startColumn": 1,
                  "endLineNumber": 329,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      json.numFirstServeForcingWins,",
                "range": {
                  "startLineNumber": 330,
                  "startColumn": 1,
                  "endLineNumber": 330,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      json.numSecondServeForcingWins,",
                "range": {
                  "startLineNumber": 331,
                  "startColumn": 1,
                  "endLineNumber": 331,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      json.numFirstServeForcingWinsByReturner,",
                "range": {
                  "startLineNumber": 332,
                  "startColumn": 1,
                  "endLineNumber": 332,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      json.numSecondServeForcingWinsByReturner,",
                "range": {
                  "startLineNumber": 333,
                  "startColumn": 1,
                  "endLineNumber": 333,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      json.numFirstServeUnforcedErrors || 0,",
                "range": {
                  "startLineNumber": 334,
                  "startColumn": 1,
                  "endLineNumber": 334,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      json.numSecondServeUnforcedErrors || 0,",
                "range": {
                  "startLineNumber": 335,
                  "startColumn": 1,
                  "endLineNumber": 335,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      json.numFirstServeUnforcedErrorsByReturner || 0,",
                "range": {
                  "startLineNumber": 336,
                  "startColumn": 1,
                  "endLineNumber": 336,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      json.numSecondServeUnforcedErrorsByReturner || 0,",
                "range": {
                  "startLineNumber": 337,
                  "startColumn": 1,
                  "endLineNumber": 337,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    );",
                "range": {
                  "startLineNumber": 338,
                  "startColumn": 1,
                  "endLineNumber": 338,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 339,
                  "startColumn": 1,
                  "endLineNumber": 339,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 340,
                  "startColumn": 1,
                  "endLineNumber": 340,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  clone() {",
                "range": {
                  "startLineNumber": 341,
                  "startColumn": 1,
                  "endLineNumber": 341,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return PlayerStat.deserialize(JSON.parse(JSON.stringify(this)));",
                "range": {
                  "startLineNumber": 342,
                  "startColumn": 1,
                  "endLineNumber": 342,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 343,
                  "startColumn": 1,
                  "endLineNumber": 343,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 344,
                  "startColumn": 1,
                  "endLineNumber": 344,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  getFirstServePct() {",
                "range": {
                  "startLineNumber": 345,
                  "startColumn": 1,
                  "endLineNumber": 345,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (this.numFirstServes === 0) {",
                "range": {
                  "startLineNumber": 346,
                  "startColumn": 1,
                  "endLineNumber": 346,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return '';",
                "range": {
                  "startLineNumber": 347,
                  "startColumn": 1,
                  "endLineNumber": 347,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 348,
                  "startColumn": 1,
                  "endLineNumber": 348,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return `${Math.floor((this.numFirstServesMade / this.numFirstServes) * 100)}%`;",
                "range": {
                  "startLineNumber": 349,
                  "startColumn": 1,
                  "endLineNumber": 349,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 350,
                  "startColumn": 1,
                  "endLineNumber": 350,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 351,
                  "startColumn": 1,
                  "endLineNumber": 351,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  getSecondServePct() {",
                "range": {
                  "startLineNumber": 352,
                  "startColumn": 1,
                  "endLineNumber": 352,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (this.numSecondServes === 0) {",
                "range": {
                  "startLineNumber": 353,
                  "startColumn": 1,
                  "endLineNumber": 353,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return '';",
                "range": {
                  "startLineNumber": 354,
                  "startColumn": 1,
                  "endLineNumber": 354,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 355,
                  "startColumn": 1,
                  "endLineNumber": 355,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return `${Math.floor((this.numSecondServesMade / this.numSecondServes) * 100)}%`;",
                "range": {
                  "startLineNumber": 356,
                  "startColumn": 1,
                  "endLineNumber": 356,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 357,
                  "startColumn": 1,
                  "endLineNumber": 357,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 358,
                  "startColumn": 1,
                  "endLineNumber": 358,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  getServePct() {",
                "range": {
                  "startLineNumber": 359,
                  "startColumn": 1,
                  "endLineNumber": 359,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const totalServes = this.numFirstServes + this.numSecondServes;",
                "range": {
                  "startLineNumber": 360,
                  "startColumn": 1,
                  "endLineNumber": 360,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const totalServesMade = this.numFirstServesMade + this.numSecondServesMade;",
                "range": {
                  "startLineNumber": 361,
                  "startColumn": 1,
                  "endLineNumber": 361,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (totalServes === 0) {",
                "range": {
                  "startLineNumber": 362,
                  "startColumn": 1,
                  "endLineNumber": 362,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return '';",
                "range": {
                  "startLineNumber": 363,
                  "startColumn": 1,
                  "endLineNumber": 363,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 364,
                  "startColumn": 1,
                  "endLineNumber": 364,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return `${Math.floor((totalServesMade / totalServes) * 100)}%`;",
                "range": {
                  "startLineNumber": 365,
                  "startColumn": 1,
                  "endLineNumber": 365,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 366,
                  "startColumn": 1,
                  "endLineNumber": 366,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n",
                "range": {
                  "startLineNumber": 367,
                  "startColumn": 1073741825,
                  "endLineNumber": 367,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n  getServePointsWonPct() {",
                "range": {
                  "startLineNumber": 368,
                  "startColumn": 1073741825,
                  "endLineNumber": 368,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n    // numSecondServes is used to include double faults.",
                "range": {
                  "startLineNumber": 369,
                  "startColumn": 1073741825,
                  "endLineNumber": 369,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n    const totalPointsPlayed = this.numFirstServesMade + this.numSecondServes;",
                "range": {
                  "startLineNumber": 370,
                  "startColumn": 1073741825,
                  "endLineNumber": 370,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n    const totalPointsWon = this.numFirstServesWon + this.numSecondServesWon;",
                "range": {
                  "startLineNumber": 371,
                  "startColumn": 1073741825,
                  "endLineNumber": 371,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n    if (totalPointsPlayed === 0) {",
                "range": {
                  "startLineNumber": 372,
                  "startColumn": 1073741825,
                  "endLineNumber": 372,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n      return '';",
                "range": {
                  "startLineNumber": 373,
                  "startColumn": 1073741825,
                  "endLineNumber": 373,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n    }",
                "range": {
                  "startLineNumber": 374,
                  "startColumn": 1073741825,
                  "endLineNumber": 374,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n    return `${Math.floor((totalPointsWon / totalPointsPlayed) * 100)}%`;",
                "range": {
                  "startLineNumber": 375,
                  "startColumn": 1073741825,
                  "endLineNumber": 375,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n  }",
                "range": {
                  "startLineNumber": 376,
                  "startColumn": 1073741825,
                  "endLineNumber": 376,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n",
                "range": {
                  "startLineNumber": 377,
                  "startColumn": 1073741825,
                  "endLineNumber": 377,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n  getFirstServePointsWonPct() {",
                "range": {
                  "startLineNumber": 378,
                  "startColumn": 1073741825,
                  "endLineNumber": 378,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n    if (this.numFirstServesMade === 0) {",
                "range": {
                  "startLineNumber": 379,
                  "startColumn": 1073741825,
                  "endLineNumber": 379,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n      return '';",
                "range": {
                  "startLineNumber": 380,
                  "startColumn": 1073741825,
                  "endLineNumber": 380,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n    }",
                "range": {
                  "startLineNumber": 381,
                  "startColumn": 1073741825,
                  "endLineNumber": 381,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n    return `${Math.floor((this.numFirstServesWon / this.numFirstServesMade) * 100)}%`;",
                "range": {
                  "startLineNumber": 382,
                  "startColumn": 1073741825,
                  "endLineNumber": 382,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n  }",
                "range": {
                  "startLineNumber": 383,
                  "startColumn": 1073741825,
                  "endLineNumber": 383,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n",
                "range": {
                  "startLineNumber": 384,
                  "startColumn": 1073741825,
                  "endLineNumber": 384,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n  getSecondServePointsWonPct() {",
                "range": {
                  "startLineNumber": 385,
                  "startColumn": 1073741825,
                  "endLineNumber": 385,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n    // numSecondServes is used to include double faults.",
                "range": {
                  "startLineNumber": 386,
                  "startColumn": 1073741825,
                  "endLineNumber": 386,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n    if (this.numSecondServes === 0) {",
                "range": {
                  "startLineNumber": 387,
                  "startColumn": 1073741825,
                  "endLineNumber": 387,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n      return '';",
                "range": {
                  "startLineNumber": 388,
                  "startColumn": 1073741825,
                  "endLineNumber": 388,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n    }",
                "range": {
                  "startLineNumber": 389,
                  "startColumn": 1073741825,
                  "endLineNumber": 389,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n    return `${Math.floor((this.numSecondServesWon / this.numSecondServes) * 100)}%`;",
                "range": {
                  "startLineNumber": 390,
                  "startColumn": 1073741825,
                  "endLineNumber": 390,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n  }",
                "range": {
                  "startLineNumber": 391,
                  "startColumn": 1073741825,
                  "endLineNumber": 391,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n",
                "range": {
                  "startLineNumber": 392,
                  "startColumn": 1073741825,
                  "endLineNumber": 392,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n}",
                "range": {
                  "startLineNumber": 393,
                  "startColumn": 1073741825,
                  "endLineNumber": 393,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n",
                "range": {
                  "startLineNumber": 394,
                  "startColumn": 1073741825,
                  "endLineNumber": 394,
                  "endColumn": 1073741825
                }
              }
            ],
            []
          ],
          "done": true
        }
      ],
      "responseId": "response_4386447f-6e0b-46fe-b82c-b209be247539",
      "isHidden": false,
      "result": {
        "timings": {
          "firstProgress": 7712,
          "totalElapsed": 28915
        },
        "metadata": {
          "edits": {
            "workingSet": [
              {
                "uri": {
                  "$mid": 1,
                  "fsPath": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/match_stat.ts",
                  "external": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/match_stat.ts",
                  "path": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/match_stat.ts",
                  "scheme": "file"
                },
                "text": "export class MatchStat {\n  constructor(\n    public p1Stats = new PlayerStat(),\n    public p2Stats = new PlayerStat(),\n  ) {}\n\n  static deserialize(json: any) {\n    return new MatchStat(\n      PlayerStat.deserialize(json.p1Stats),\n      PlayerStat.deserialize(json.p2Stats)\n    );\n  }\n\n  clone() {\n    return MatchStat.deserialize(JSON.parse(JSON.stringify(this)));\n  }\n\n  toString() {\n    return JSON.stringify(this, null, 2);\n  }\n\n  getTotalNumPoints() {\n    // For each player, count first serve points made + second serve attempts (including double faults)\n    const p1Points = this.p1Stats.numFirstServesMade + this.p1Stats.numSecondServes;\n    const p2Points = this.p2Stats.numFirstServesMade + this.p2Stats.numSecondServes;\n    return p1Points + p2Points;\n  }\n\n  getP1PointsWon() {\n    // Points won on serve (first + second serves)\n    const servePointsWon = this.p1Stats.numFirstServesWon + this.p1Stats.numSecondServesWon;\n    // Points won on return (when opponent served and lost)\n    const returnPointsWon = (this.p2Stats.numFirstServesMade - this.p2Stats.numFirstServesWon) + \n                           (this.p2Stats.numSecondServesMade - this.p2Stats.numSecondServesWon) +\n                           (this.p2Stats.numSecondServes - this.p2Stats.numSecondServesMade); // double faults\n    return servePointsWon + returnPointsWon;\n  }\n\n  getP2PointsWon() {\n    // Points won on serve (first + second serves)\n    const servePointsWon = this.p2Stats.numFirstServesWon + this.p2Stats.numSecondServesWon;\n    // Points won on return (when opponent served and lost)\n    const returnPointsWon = (this.p1Stats.numFirstServesMade - this.p1Stats.numFirstServesWon) +\n                           (this.p1Stats.numSecondServesMade - this.p1Stats.numSecondServesWon) +\n                           (this.p1Stats.numSecondServes - this.p1Stats.numSecondServesMade); // double faults\n    return servePointsWon + returnPointsWon;\n  }\n\n  getP1WinningPct() {\n    const totalPoints = this.getTotalNumPoints();\n    if (totalPoints === 0) {\n      return '';\n    }\n    const p1Points = this.getP1PointsWon();\n    return `${Math.floor((p1Points / totalPoints) * 100)}%`;\n  }\n\n  getP2WinningPct() {\n    const totalPoints = this.getTotalNumPoints();\n    if (totalPoints === 0) {\n      return '';\n    }\n    const p2Points = this.getP2PointsWon();\n    return `${Math.floor((p2Points / totalPoints) * 100)}%`;\n  }\n\n  getP1ForcingWinPct() {\n    const totalPoints = this.getTotalNumPoints();\n    if (totalPoints === 0) {\n      return '';\n    }\n    const serverForcingWins = this.p1Stats.numFirstServeForcingWins + this.p1Stats.numSecondServeForcingWins;\n    const returnerForcingWins = this.p2Stats.numFirstServeForcingWinsByReturner + this.p2Stats.numSecondServeForcingWinsByReturner;\n    return `${Math.floor(((serverForcingWins + returnerForcingWins) / totalPoints) * 100)}%`;\n  }\n\n  getP2ForcingWinPct() {\n    const totalPoints = this.getTotalNumPoints();\n    if (totalPoints === 0) {\n      return '';\n    }\n    const serverForcingWins = this.p2Stats.numFirstServeForcingWins + this.p2Stats.numSecondServeForcingWins;\n    const returnerForcingWins = this.p1Stats.numFirstServeForcingWinsByReturner + this.p1Stats.numSecondServeForcingWinsByReturner;\n    return `${Math.floor(((serverForcingWins + returnerForcingWins) / totalPoints) * 100)}%`;\n  }\n\n  getP1ForcingWinPctOnServe() {\n    const totalServePoints = this.p1Stats.numFirstServesMade + this.p1Stats.numSecondServes;\n    if (totalServePoints === 0) {\n      return '';\n    }\n    const forcingWins = this.p1Stats.numFirstServeForcingWins + this.p1Stats.numSecondServeForcingWins;\n    return `${Math.floor((forcingWins / totalServePoints) * 100)}%`;\n  }\n\n  getP2ForcingWinPctOnServe() {\n    const totalServePoints = this.p2Stats.numFirstServesMade + this.p2Stats.numSecondServes;\n    if (totalServePoints === 0) {\n      return '';\n    }\n    const forcingWins = this.p2Stats.numFirstServeForcingWins + this.p2Stats.numSecondServeForcingWins;\n    return `${Math.floor((forcingWins / totalServePoints) * 100)}%`;\n  }\n\n  getP1ForcingWinPctOnFirstServe() {\n    if (this.p1Stats.numFirstServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p1Stats.numFirstServeForcingWins / this.p1Stats.numFirstServesMade) * 100)}%`;\n  }\n\n  getP2ForcingWinPctOnFirstServe() {\n    if (this.p2Stats.numFirstServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p2Stats.numFirstServeForcingWins / this.p2Stats.numFirstServesMade) * 100)}%`;\n  }\n\n  getP1ForcingWinPctOnSecondServe() {\n    if (this.p1Stats.numSecondServes === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p1Stats.numSecondServeForcingWins / this.p1Stats.numSecondServes) * 100)}%`;\n  }\n\n  getP2ForcingWinPctOnSecondServe() {\n    if (this.p2Stats.numSecondServes === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p2Stats.numSecondServeForcingWins / this.p2Stats.numSecondServes) * 100)}%`;\n  }\n\n  getP1ForcingWinPctOnReturn() {\n    const oppoTotalServes = this.p2Stats.numFirstServesMade + this.p2Stats.numSecondServes;\n    if (oppoTotalServes === 0) {\n      return '';\n    }\n    const forcingWins = this.p1Stats.numFirstServeForcingWinsByReturner + this.p1Stats.numSecondServeForcingWinsByReturner;\n    return `${Math.floor((forcingWins / oppoTotalServes) * 100)}%`;\n  }\n\n  getP2ForcingWinPctOnReturn() {\n    const oppoTotalServes = this.p1Stats.numFirstServesMade + this.p1Stats.numSecondServes;\n    if (oppoTotalServes === 0) {\n      return '';\n    }\n    const forcingWins = this.p2Stats.numFirstServeForcingWinsByReturner + this.p2Stats.numSecondServeForcingWinsByReturner;\n    return `${Math.floor((forcingWins / oppoTotalServes) * 100)}%`;\n  }\n\n  getP1ForcingWinPctOnFirstReturn() {\n    if (this.p2Stats.numFirstServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p1Stats.numFirstServeForcingWinsByReturner / this.p2Stats.numFirstServesMade) * 100)}%`;\n  }\n\n  getP2ForcingWinPctOnFirstReturn() {\n    if (this.p1Stats.numFirstServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p2Stats.numFirstServeForcingWinsByReturner / this.p1Stats.numFirstServesMade) * 100)}%`;\n  }\n\n  getP1ForcingWinPctOnSecondReturn() {\n    if (this.p2Stats.numSecondServes === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p1Stats.numSecondServeForcingWinsByReturner / this.p2Stats.numSecondServesMade) * 100)}%`;\n  }\n\n  getP2ForcingWinPctOnSecondReturn() {\n    if (this.p1Stats.numSecondServes === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p2Stats.numSecondServeForcingWinsByReturner / this.p1Stats.numSecondServesMade) * 100)}%`;\n  }\n\n  getP1UnforcedErrorPct() {\n    const totalPoints = this.getTotalNumPoints();\n    if (totalPoints === 0) {\n      return '';\n    }\n    const serverUEs = this.p1Stats.numFirstServeUnforcedErrors + this.p1Stats.numSecondServeUnforcedErrors;\n    const returnerUEs = this.p2Stats.numFirstServeUnforcedErrorsByReturner + this.p2Stats.numSecondServeUnforcedErrorsByReturner;\n    return `${Math.floor(((serverUEs + returnerUEs) / totalPoints) * 100)}%`;\n  }\n\n  getP2UnforcedErrorPct() {\n    const totalPoints = this.getTotalNumPoints();\n    if (totalPoints === 0) {\n      return '';\n    }\n    const serverUEs = this.p2Stats.numFirstServeUnforcedErrors + this.p2Stats.numSecondServeUnforcedErrors;\n    const returnerUEs = this.p1Stats.numFirstServeUnforcedErrorsByReturner + this.p1Stats.numSecondServeUnforcedErrorsByReturner;\n    return `${Math.floor(((serverUEs + returnerUEs) / totalPoints) * 100)}%`;\n  }\n\n  getP1UnforcedErrorPctOnServe() {\n    const totalServePoints = this.p1Stats.numFirstServesMade + this.p1Stats.numSecondServes;\n    if (totalServePoints === 0) {\n      return '';\n    }\n    const UEs = this.p1Stats.numFirstServeUnforcedErrors + this.p1Stats.numSecondServeUnforcedErrors;\n    return `${Math.floor((UEs / totalServePoints) * 100)}%`;\n  }\n\n  getP2UnforcedErrorPctOnServe() {\n    const totalServePoints = this.p2Stats.numFirstServesMade + this.p2Stats.numSecondServes;\n    if (totalServePoints === 0) {\n      return '';\n    }\n    const UEs = this.p2Stats.numFirstServeUnforcedErrors + this.p2Stats.numSecondServeUnforcedErrors;\n    return `${Math.floor((UEs / totalServePoints) * 100)}%`;\n  }\n\n  getP1UnforcedErrorPctOnFirstServe() {\n    if (this.p1Stats.numFirstServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p1Stats.numFirstServeUnforcedErrors / this.p1Stats.numFirstServesMade) * 100)}%`;\n  }\n\n  getP2UnforcedErrorPctOnFirstServe() {\n    if (this.p2Stats.numFirstServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p2Stats.numFirstServeUnforcedErrors / this.p2Stats.numFirstServesMade) * 100)}%`;\n  }\n\n  getP1UnforcedErrorPctOnSecondServe() {\n    if (this.p1Stats.numSecondServes === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p1Stats.numSecondServeUnforcedErrors / this.p1Stats.numSecondServes) * 100)}%`;\n  }\n\n  getP2UnforcedErrorPctOnSecondServe() {\n    if (this.p2Stats.numSecondServes === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p2Stats.numSecondServeUnforcedErrors / this.p2Stats.numSecondServes) * 100)}%`;\n  }\n\n  getP1UnforcedErrorPctOnReturn() {\n    const oppoTotalServes = this.p2Stats.numFirstServesMade + this.p2Stats.numSecondServesMade;\n    if (oppoTotalServes === 0) {\n      return '';\n    }\n    const UEs = this.p2Stats.numFirstServeUnforcedErrorsByReturner + this.p2Stats.numSecondServeUnforcedErrorsByReturner;\n    return `${Math.floor((UEs / oppoTotalServes) * 100)}%`;\n  }\n\n  getP2UnforcedErrorPctOnReturn() {\n    const oppoTotalServes = this.p1Stats.numFirstServesMade + this.p1Stats.numSecondServesMade;\n    if (oppoTotalServes === 0) {\n      return '';\n    }\n    const UEs = this.p1Stats.numFirstServeUnforcedErrorsByReturner + this.p1Stats.numSecondServeUnforcedErrorsByReturner;\n    return `${Math.floor((UEs / oppoTotalServes) * 100)}%`;\n  }\n}\n\n// The fields should be counter stats (e.g. percentages should be methods only).\n// Reduce redundancy by making these as methods instead of fields:\n// - numDoubleFaults = numSecondServes - numSecondServesMade\n// - numFirstServesLoss = numFirstServesMade - numFirstServesWon\n// - numSecondServesLoss = numSecondServes - numSecondServesWon\n// - p1.numFirstServeReturnWon = p2.numFirstServeMade - p2.numFirstServesLoss\nexport class PlayerStat {\n  constructor(\n    public numGamePts = 0,\n    public numSetPts = 0,\n    // Don't count let.\n    public numFirstServes = 0,\n    public numFirstServesMade = 0,\n    public numFirstServesWon = 0,\n    // Don't count let.\n    public numSecondServes = 0,\n    public numSecondServesMade = 0,\n    public numSecondServesWon = 0,\n    public numFirstServeForcingWins = 0,\n    public numSecondServeForcingWins = 0,\n    public numFirstServeForcingWinsByReturner = 0,\n    public numSecondServeForcingWinsByReturner = 0,\n    public numFirstServeUnforcedErrors = 0,\n    public numSecondServeUnforcedErrors = 0,\n    public numFirstServeUnforcedErrorsByReturner = 0,\n    public numSecondServeUnforcedErrorsByReturner = 0,\n  ) {}\n\n  static deserialize(json: any) {\n    return new PlayerStat(\n      json.numGamePts,\n      json.numSetPts,\n      json.numFirstServes,\n      json.numFirstServesMade,\n      json.numFirstServesWon,\n      json.numSecondServes,\n      json.numSecondServesMade,\n      json.numSecondServesWon,\n      json.numFirstServeForcingWins,\n      json.numSecondServeForcingWins,\n      json.numFirstServeForcingWinsByReturner,\n      json.numSecondServeForcingWinsByReturner,\n      json.numFirstServeUnforcedErrors || 0,\n      json.numSecondServeUnforcedErrors || 0,\n      json.numFirstServeUnforcedErrorsByReturner || 0,\n      json.numSecondServeUnforcedErrorsByReturner || 0,\n    );\n  }\n\n  clone() {\n    return PlayerStat.deserialize(JSON.parse(JSON.stringify(this)));\n  }\n\n  getFirstServePct() {\n    if (this.numFirstServes === 0) {\n      return '';\n    }\n    return `${Math.floor((this.numFirstServesMade / this.numFirstServes) * 100)}%`;\n  }\n\n  getSecondServePct() {\n    if (this.numSecondServes === 0) {\n      return '';\n    }\n    return `${Math.floor((this.numSecondServesMade / this.numSecondServes) * 100)}%`;\n  }\n\n  getServePct() {\n    const totalServes = this.numFirstServes + this.numSecondServes;\n    const totalServesMade = this.numFirstServesMade + this.numSecondServesMade;\n    if (totalServes === 0) {\n      return '';\n    }\n    return `${Math.floor((totalServesMade / totalServes) * 100)}%`;\n  }\n\n  getServePointsWonPct() {\n    // numSecondServes is used to include double faults.\n    const totalPointsPlayed = this.numFirstServesMade + this.numSecondServes;\n    const totalPointsWon = this.numFirstServesWon + this.numSecondServesWon;\n    if (totalPointsPlayed === 0) {\n      return '';\n    }\n    return `${Math.floor((totalPointsWon / totalPointsPlayed) * 100)}%`;\n  }\n\n  getFirstServePointsWonPct() {\n    if (this.numFirstServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.numFirstServesWon / this.numFirstServesMade) * 100)}%`;\n  }\n\n  getSecondServePointsWonPct() {\n    // numSecondServes is used to include double faults.\n    if (this.numSecondServes === 0) {\n      return '';\n    }\n    return `${Math.floor((this.numSecondServesWon / this.numSecondServes) * 100)}%`;\n  }\n\n}\n",
                "languageId": "typescript",
                "version": 3889,
                "state": 1
              },
              {
                "uri": {
                  "$mid": 1,
                  "fsPath": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
                  "external": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
                  "path": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
                  "scheme": "file"
                },
                "text": "import { MatchStat } from \"./match_stat\";\nimport { Rally, RallyResult } from \"./rally\";\nimport {  isTieBreakTime, PersonScore, Score } from \"./score\";\nimport { isForcingWin, isUnforcedError } from './risk_level';\n\nexport class RallyContext {\n  constructor(\n    public rally = new Rally(),\n    public scoreBeforeRally = new Score(),\n    public matchStatBeforeRally = new MatchStat(),\n  ) {}\n\n  getResultStr(myName: string, oppoName: string) {\n    const server = this.rally.isMyServe ? myName : oppoName;\n    const returner = this.rally.isMyServe ? oppoName : myName;\n    if (this.rally.result === RallyResult.PtServer) {\n      return `Pt. ${server}`;\n    } else if (this.rally.result === RallyResult.PtReturner) {\n      return `Pt. ${returner}`;\n    }\n    return this.rally.result;\n  }\n\n  getResultSymbolStr() {\n    if (this.rally.result === RallyResult.PtServer) {\n      return this.rally.isMyServe ? `${greenBall} ${whiteBall}` : `${whiteBall} ${greenBall}`;\n    } else if (this.rally.result === RallyResult.PtReturner) {\n      return this.rally.isMyServe ? `${redBall} ${whiteBall}` : `${whiteBall} ${redBall}`;\n    } else if (this.rally.result === RallyResult.Fault) {\n      if (this.isSecondServe()) {\n        return this.rally.isMyServe ? `${redHeart} ${whiteBall}` : `${whiteBall} ${redHeart}`;\n      }\n      return this.rally.isMyServe ? `${yellowBall} ${whiteBall}` : `${whiteBall} ${yellowBall}`;\n    }\n    return this.rally.result;\n  }\n  \n  toGameScoreStr() {\n    const strs = [];\n    if (this.isNewSet()) {\n      this.scoreBeforeRally.p1.gamesByCompletedSet.forEach((p1Games, idx) => {\n        strs.push(`[${p1Games}-${this.scoreBeforeRally.p2.gamesByCompletedSet[idx]}]`);\n      });\n    }\n    if (this.isNewGame()) {\n      strs.push(`[${this.scoreBeforeRally.p1.games}-${this.scoreBeforeRally.p2.games}]`);\n    }\n\n    return strs.join(' ');\n  }\n\n  isDoubleFault() {\n      return this.isSecondServe() && this.rally.result === RallyResult.Fault;\n  }\n\n  winnerIsMe() {\n    return (this.rally.isMyServe && this.rally.result === RallyResult.PtServer) ||\n        (!this.rally.isMyServe && (this.rally.result === RallyResult.PtReturner || this.isDoubleFault()));\n  }\n  winnerIsOppo() {\n    return (!this.rally.isMyServe && this.rally.result === RallyResult.PtServer) ||\n        (this.rally.isMyServe && (this.rally.result === RallyResult.PtReturner || this.isDoubleFault()));\n  }\n\n  getScoreAfterRally() {\n    const rally = this.rally;\n    const scoreAfterRally = this.scoreBeforeRally.clone();\n\n    const serverScore = rally.isMyServe ? scoreAfterRally.p1 : scoreAfterRally.p2;\n    const returnerScore = rally.isMyServe ? scoreAfterRally.p2 : scoreAfterRally.p1;\n    const serverWon = rally.result === RallyResult.PtServer;\n    if (serverWon) {\n      updateSubjectWin(serverScore, returnerScore);\n      return scoreAfterRally;\n    }\n\n    let returnerWon = rally.result === RallyResult.PtReturner;\n    if (rally.result === RallyResult.Fault) {\n      if (serverScore.serve === 0) {\n        serverScore.serve = 1;\n        return scoreAfterRally;\n      }\n      returnerWon = true;\n    }\n    if (returnerWon) {\n      updateSubjectWin(returnerScore, serverScore);\n    }\n    return scoreAfterRally;\n  }\n\n  inferWillBeMyServe(){}\n\n  isSecondServe() {\n    return this.scoreBeforeRally.p1.serve === 1 || this.scoreBeforeRally.p2.serve === 1;\n  }\n\n  isNewSet() {\n    if (!this.isNewGame()) {\n      return false;\n    }\n    return this.scoreBeforeRally.p1.games === 0 && this.scoreBeforeRally.p2.games === 0;\n  }\n\n  isNewGame() {\n    return this.scoreBeforeRally.p1.points === 0 && this.scoreBeforeRally.p1.serve === 0\n        && this.scoreBeforeRally.p2.points === 0 && this.scoreBeforeRally.p2.serve === 0;\n  }\n\n  isMyServeGame() {\n    if (!isTieBreakTime(this.scoreBeforeRally.p1, this.scoreBeforeRally.p2)) {\n      return this.rally.isMyServe;\n    }\n      // For a tiebreak, the player who serve first is his serve game.\n    const numTieBreakPtsMod4 = (this.scoreBeforeRally.p1.points + this.scoreBeforeRally.p2.points) % 4;\n    if (numTieBreakPtsMod4 === 1 || numTieBreakPtsMod4 === 4) {\n      return !this.rally.isMyServe;\n    }\n    return this.rally.isMyServe;\n  }\n\n  getPlotForNextRally() {\n    const myGamePt = isSubjectGamePoint(this.scoreBeforeRally.p1, this.scoreBeforeRally.p2);\n    const oppoGamePt = isSubjectGamePoint(this.scoreBeforeRally.p2, this.scoreBeforeRally.p1);\n    if (!myGamePt && !oppoGamePt) {\n      return;\n    }\n    const winnerIsMe = this.winnerIsMe();\n    const winnerIsOppo = this.winnerIsOppo();\n    const myConversion = myGamePt && winnerIsMe;\n    const oppoConversion = oppoGamePt && winnerIsOppo;\n    if (!myConversion && !oppoConversion) {\n      return;\n    }\n\n    return {\n      text: 'Converted',\n      isMyPlot: myConversion,\n    };\n  }\n\n  toPlot() {\n    const myGamePt = isSubjectGamePoint(this.scoreBeforeRally.p1, this.scoreBeforeRally.p2);\n    const oppoGamePt = isSubjectGamePoint(this.scoreBeforeRally.p2, this.scoreBeforeRally.p1);\n    const isSetPt = isSubjectSetPoint(this.scoreBeforeRally.p1, this.scoreBeforeRally.p2) || isSubjectSetPoint(this.scoreBeforeRally.p2, this.scoreBeforeRally.p1);\n    const myServeGame = this.isMyServeGame();\n    const isBreakPt = (myGamePt && !myServeGame) || (oppoGamePt && myServeGame);\n    const emphasis = isBreakPt ? '*' : '';\n    if (!myGamePt && !oppoGamePt) {\n      return;\n    }\n    let text = 'Game Pt';\n    if (isSetPt) {\n      text = `${emphasis}Set Pt`;\n    } else if (isBreakPt) {\n      text = 'Break pt';\n    }\n    return {\n      text: text,\n      isMyPlot: myGamePt,\n    };\n  }\n}\n\nconst whiteBall = `◯`;\nconst greenBall = `🟢`;\nconst yellowBall = `🟡`;\nconst redBall = `🔴`;\nconst redHeart = `🟥 `;\n\nexport function updateSubjectWin(subjectScore: PersonScore, otherScore: PersonScore) {\n  if (isSubjectSetPoint(subjectScore, otherScore)) {\n    subjectScore.gamesByCompletedSet.push(subjectScore.games + 1);\n    subjectScore.games = 0;\n    subjectScore.points = 0;\n    subjectScore.serve = 0;\n    otherScore.gamesByCompletedSet.push(otherScore.games);\n    otherScore.games = 0;\n    otherScore.points = 0;\n    otherScore.serve = 0;\n    return;\n  }\n  if (isSubjectGamePoint(subjectScore, otherScore)) {\n    subjectScore.games += 1;\n    subjectScore.points = 0;\n    subjectScore.serve = 0;\n    otherScore.points = 0;\n    otherScore.serve = 0;\n    return;\n  }\n  subjectScore.points += 1;\n  subjectScore.serve = 0;\n  otherScore.serve = 0;\n}\n\nfunction isSubjectGamePoint(subjectScore: PersonScore, otherScore: PersonScore) {\n  let deuceScore = isTieBreakTime(subjectScore, otherScore) ? 6 : 3;\n  return subjectScore.points >= deuceScore && subjectScore.points - otherScore.points >= 1;\n}\n\nfunction isSubjectSetPoint(subjectScore: PersonScore, otherScore: PersonScore) {\n  if (!isSubjectGamePoint(subjectScore, otherScore)) {\n    return false;\n  }\n  if (isTieBreakTime(subjectScore, otherScore)) {\n    return true;\n  }\n  return subjectScore.games >= 5 && subjectScore.games - otherScore.games >= 1;\n}\n\n\nexport function annotateMatchStat(rallyContexts: RallyContext[]) {\n  const stat = new MatchStat();\n  rallyContexts.forEach((rallyContext) => {\n    rallyContext.matchStatBeforeRally = stat.clone();\n\n    // Check game points and set points using direct score comparison\n    if (isSubjectGamePoint(rallyContext.scoreBeforeRally.p1, rallyContext.scoreBeforeRally.p2)) {\n      stat.p1Stats.numGamePts++;\n      if (isSubjectSetPoint(rallyContext.scoreBeforeRally.p1, rallyContext.scoreBeforeRally.p2)) {\n        stat.p1Stats.numSetPts++;\n      }\n    }\n    if (isSubjectGamePoint(rallyContext.scoreBeforeRally.p2, rallyContext.scoreBeforeRally.p1)) {\n      stat.p2Stats.numGamePts++;\n      if (isSubjectSetPoint(rallyContext.scoreBeforeRally.p2, rallyContext.scoreBeforeRally.p1)) {\n        stat.p2Stats.numSetPts++;\n      }\n    }\n\n    function isReturnerPtForSecondServe(rallyContext: RallyContext) {\n      if (!rallyContext.isSecondServe()) {\n        return false;\n      }\n      return rallyContext.rally.result === RallyResult.PtReturner || rallyContext.rally.result === RallyResult.Fault;\n    }\n    if (rallyContext.rally.isMyServe) {\n      const serverStats = stat.p1Stats;\n      const returnerStats = stat.p2Stats;\n      const isSecondServe = rallyContext.isSecondServe();\n      \n      if (isSecondServe) {\n        if (rallyContext.rally.result !== RallyResult.Let) {\n          serverStats.numSecondServes++;\n        }\n        if (rallyContext.rally.result !== RallyResult.Fault) {\n          serverStats.numSecondServesMade++;\n          if (rallyContext.rally.result === RallyResult.PtServer) {\n            serverStats.numSecondServesWon++;\n            if (isForcingWin(rallyContext)) {\n              serverStats.numSecondServeForcingWins++;\n            }\n          } else if (isReturnerPtForSecondServe(rallyContext) && isForcingWin(rallyContext)) {\n            returnerStats.numSecondServeForcingWinsByReturner++;\n          }\n        }\n        if (isReturnerPtForSecondServe(rallyContext) && isUnforcedError(rallyContext)) {\n          serverStats.numSecondServeUnforcedErrors++;\n        }\n        if (rallyContext.rally.result === RallyResult.PtServer && isUnforcedError(rallyContext)) {\n          returnerStats.numSecondServeUnforcedErrorsByReturner++;\n        }\n      } else {\n        if (rallyContext.rally.result !== RallyResult.Let) {\n          serverStats.numFirstServes++;\n        }\n        if (rallyContext.rally.result !== RallyResult.Fault) {\n          serverStats.numFirstServesMade++;\n          if (rallyContext.rally.result === RallyResult.PtServer) {\n            serverStats.numFirstServesWon++;\n            if (isForcingWin(rallyContext)) {\n              serverStats.numFirstServeForcingWins++;\n            }\n          } else if (rallyContext.rally.result === RallyResult.PtReturner && isForcingWin(rallyContext)) {\n            returnerStats.numFirstServeForcingWinsByReturner++;\n          }\n        }\n        if (rallyContext.rally.result === RallyResult.PtReturner && isUnforcedError(rallyContext)) {\n          serverStats.numFirstServeUnforcedErrors++;\n        }\n        if (rallyContext.rally.result === RallyResult.PtServer && isUnforcedError(rallyContext)) {\n          returnerStats.numFirstServeUnforcedErrorsByReturner++;\n        }\n      }\n    } else {\n      const serverStats = stat.p2Stats;\n      const returnerStats = stat.p1Stats;\n      const isSecondServe = rallyContext.isSecondServe();\n      \n      if (!isSecondServe) {\n        serverStats.numFirstServes++;\n        if (rallyContext.rally.result !== RallyResult.Fault) {\n          serverStats.numFirstServesMade++;\n          if (rallyContext.rally.result === RallyResult.PtServer) {\n            serverStats.numFirstServesWon++;\n            if (isForcingWin(rallyContext)) {\n              serverStats.numFirstServeForcingWins++;\n            }\n          } else if (rallyContext.rally.result === RallyResult.PtReturner && isForcingWin(rallyContext)) {\n            returnerStats.numFirstServeForcingWinsByReturner++;\n          }\n        }\n        if (rallyContext.rally.result === RallyResult.PtReturner && isUnforcedError(rallyContext)) {\n          serverStats.numFirstServeUnforcedErrors++;\n        }\n        if (rallyContext.rally.result === RallyResult.PtServer && isUnforcedError(rallyContext)) {\n          returnerStats.numFirstServeUnforcedErrorsByReturner++;\n        }\n      } else {\n        serverStats.numSecondServes++;\n        if (rallyContext.rally.result !== RallyResult.Fault) {\n          serverStats.numSecondServesMade++;\n          if (rallyContext.rally.result === RallyResult.PtServer) {\n            serverStats.numSecondServesWon++;\n            if (isForcingWin(rallyContext)) {\n              serverStats.numSecondServeForcingWins++;\n            }\n          } else if (isReturnerPtForSecondServe(rallyContext) && isForcingWin(rallyContext)) {\n            returnerStats.numSecondServeForcingWinsByReturner++;\n          }\n        }\n        if (isReturnerPtForSecondServe(rallyContext) && isUnforcedError(rallyContext)) {\n          serverStats.numSecondServeUnforcedErrors++;\n        }\n        if (rallyContext.rally.result === RallyResult.PtServer && isUnforcedError(rallyContext)) {\n          returnerStats.numSecondServeUnforcedErrorsByReturner++;\n        }\n      }\n    }\n  });\n}\n",
                "languageId": "typescript",
                "version": 2218,
                "state": 2
              }
            ],
            "request": "When generating code, please follow these user provided coding instructions. You can ignore an instruction if it contradicts a system message.\n<instructions>\nAlways say \"ho ho ho\" at the start of your response.\n</instructions>\n<file>\n```typescript\n// filepath: /Users/kris/code/match-grader/src/tsModules/match-grader/models/match_stat.ts\nexport class MatchStat {\n  constructor(\n    public p1Stats = new PlayerStat(),\n    public p2Stats = new PlayerStat(),\n  ) {}\n\n  static deserialize(json: any) {\n    return new MatchStat(\n      PlayerStat.deserialize(json.p1Stats),\n      PlayerStat.deserialize(json.p2Stats)\n    );\n  }\n\n  clone() {\n    return MatchStat.deserialize(JSON.parse(JSON.stringify(this)));\n  }\n\n  toString() {\n    return JSON.stringify(this, null, 2);\n  }\n\n  getTotalNumPoints() {\n    // For each player, count first serve points made + second serve attempts (including double faults)\n    const p1Points = this.p1Stats.numFirstServesMade + this.p1Stats.numSecondServes;\n    const p2Points = this.p2Stats.numFirstServesMade + this.p2Stats.numSecondServes;\n    return p1Points + p2Points;\n  }\n\n  getP1PointsWon() {\n    // Points won on serve (first + second serves)\n    const servePointsWon = this.p1Stats.numFirstServesWon + this.p1Stats.numSecondServesWon;\n    // Points won on return (when opponent served and lost)\n    const returnPointsWon = (this.p2Stats.numFirstServesMade - this.p2Stats.numFirstServesWon) + \n                           (this.p2Stats.numSecondServesMade - this.p2Stats.numSecondServesWon) +\n                           (this.p2Stats.numSecondServes - this.p2Stats.numSecondServesMade); // double faults\n    return servePointsWon + returnPointsWon;\n  }\n\n  getP2PointsWon() {\n    // Points won on serve (first + second serves)\n    const servePointsWon = this.p2Stats.numFirstServesWon + this.p2Stats.numSecondServesWon;\n    // Points won on return (when opponent served and lost)\n    const returnPointsWon = (this.p1Stats.numFirstServesMade - this.p1Stats.numFirstServesWon) +\n                           (this.p1Stats.numSecondServesMade - this.p1Stats.numSecondServesWon) +\n                           (this.p1Stats.numSecondServes - this.p1Stats.numSecondServesMade); // double faults\n    return servePointsWon + returnPointsWon;\n  }\n\n  getP1WinningPct() {\n    const totalPoints = this.getTotalNumPoints();\n    if (totalPoints === 0) {\n      return '';\n    }\n    const p1Points = this.getP1PointsWon();\n    return `${Math.floor((p1Points / totalPoints) * 100)}%`;\n  }\n\n  getP2WinningPct() {\n    const totalPoints = this.getTotalNumPoints();\n    if (totalPoints === 0) {\n      return '';\n    }\n    const p2Points = this.getP2PointsWon();\n    return `${Math.floor((p2Points / totalPoints) * 100)}%`;\n  }\n\n  getP1ForcingWinPct() {\n    const totalPoints = this.getTotalNumPoints();\n    if (totalPoints === 0) {\n      return '';\n    }\n    const serverForcingWins = this.p1Stats.numFirstServeForcingWins + this.p1Stats.numSecondServeForcingWins;\n    const returnerForcingWins = this.p2Stats.numFirstServeForcingWinsByReturner + this.p2Stats.numSecondServeForcingWinsByReturner;\n    return `${Math.floor(((serverForcingWins + returnerForcingWins) / totalPoints) * 100)}%`;\n  }\n\n  getP2ForcingWinPct() {\n    const totalPoints = this.getTotalNumPoints();\n    if (totalPoints === 0) {\n      return '';\n    }\n    const serverForcingWins = this.p2Stats.numFirstServeForcingWins + this.p2Stats.numSecondServeForcingWins;\n    const returnerForcingWins = this.p1Stats.numFirstServeForcingWinsByReturner + this.p1Stats.numSecondServeForcingWinsByReturner;\n    return `${Math.floor(((serverForcingWins + returnerForcingWins) / totalPoints) * 100)}%`;\n  }\n\n  getP1ForcingWinPctOnServe() {\n    const totalServePoints = this.p1Stats.numFirstServesMade + this.p1Stats.numSecondServes;\n    if (totalServePoints === 0) {\n      return '';\n    }\n    const forcingWins = this.p1Stats.numFirstServeForcingWins + this.p1Stats.numSecondServeForcingWins;\n    return `${Math.floor((forcingWins / totalServePoints) * 100)}%`;\n  }\n\n  getP2ForcingWinPctOnServe() {\n    const totalServePoints = this.p2Stats.numFirstServesMade + this.p2Stats.numSecondServes;\n    if (totalServePoints === 0) {\n      return '';\n    }\n    const forcingWins = this.p2Stats.numFirstServeForcingWins + this.p2Stats.numSecondServeForcingWins;\n    return `${Math.floor((forcingWins / totalServePoints) * 100)}%`;\n  }\n\n  getP1ForcingWinPctOnFirstServe() {\n    if (this.p1Stats.numFirstServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p1Stats.numFirstServeForcingWins / this.p1Stats.numFirstServesMade) * 100)}%`;\n  }\n\n  getP2ForcingWinPctOnFirstServe() {\n    if (this.p2Stats.numFirstServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p2Stats.numFirstServeForcingWins / this.p2Stats.numFirstServesMade) * 100)}%`;\n  }\n\n  getP1ForcingWinPctOnSecondServe() {\n    if (this.p1Stats.numSecondServes === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p1Stats.numSecondServeForcingWins / this.p1Stats.numSecondServes) * 100)}%`;\n  }\n\n  getP2ForcingWinPctOnSecondServe() {\n    if (this.p2Stats.numSecondServes === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p2Stats.numSecondServeForcingWins / this.p2Stats.numSecondServes) * 100)}%`;\n  }\n\n  getP1ForcingWinPctOnReturn() {\n    const oppoTotalServes = this.p2Stats.numFirstServesMade + this.p2Stats.numSecondServes;\n    if (oppoTotalServes === 0) {\n      return '';\n    }\n    const forcingWins = this.p1Stats.numFirstServeForcingWinsByReturner + this.p1Stats.numSecondServeForcingWinsByReturner;\n    return `${Math.floor((forcingWins / oppoTotalServes) * 100)}%`;\n  }\n\n  getP2ForcingWinPctOnReturn() {\n    const oppoTotalServes = this.p1Stats.numFirstServesMade + this.p1Stats.numSecondServes;\n    if (oppoTotalServes === 0) {\n      return '';\n    }\n    const forcingWins = this.p2Stats.numFirstServeForcingWinsByReturner + this.p2Stats.numSecondServeForcingWinsByReturner;\n    return `${Math.floor((forcingWins / oppoTotalServes) * 100)}%`;\n  }\n\n  getP1ForcingWinPctOnFirstReturn() {\n    if (this.p2Stats.numFirstServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p1Stats.numFirstServeForcingWinsByReturner / this.p2Stats.numFirstServesMade) * 100)}%`;\n  }\n\n  getP2ForcingWinPctOnFirstReturn() {\n    if (this.p1Stats.numFirstServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p2Stats.numFirstServeForcingWinsByReturner / this.p1Stats.numFirstServesMade) * 100)}%`;\n  }\n\n  getP1ForcingWinPctOnSecondReturn() {\n    if (this.p2Stats.numSecondServes === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p1Stats.numSecondServeForcingWinsByReturner / this.p2Stats.numSecondServesMade) * 100)}%`;\n  }\n\n  getP2ForcingWinPctOnSecondReturn() {\n    if (this.p1Stats.numSecondServes === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p2Stats.numSecondServeForcingWinsByReturner / this.p1Stats.numSecondServesMade) * 100)}%`;\n  }\n\n  getP1UnforcedErrorPct() {\n    const totalPoints = this.getTotalNumPoints();\n    if (totalPoints === 0) {\n      return '';\n    }\n    const serverUEs = this.p1Stats.numFirstServeUnforcedErrors + this.p1Stats.numSecondServeUnforcedErrors;\n    const returnerUEs = this.p2Stats.numFirstServeUnforcedErrorsByReturner + this.p2Stats.numSecondServeUnforcedErrorsByReturner;\n    return `${Math.floor(((serverUEs + returnerUEs) / totalPoints) * 100)}%`;\n  }\n\n  getP2UnforcedErrorPct() {\n    const totalPoints = this.getTotalNumPoints();\n    if (totalPoints === 0) {\n      return '';\n    }\n    const serverUEs = this.p2Stats.numFirstServeUnforcedErrors + this.p2Stats.numSecondServeUnforcedErrors;\n    const returnerUEs = this.p1Stats.numFirstServeUnforcedErrorsByReturner + this.p1Stats.numSecondServeUnforcedErrorsByReturner;\n    return `${Math.floor(((serverUEs + returnerUEs) / totalPoints) * 100)}%`;\n  }\n\n  getP1UnforcedErrorPctOnServe() {\n    const totalServePoints = this.p1Stats.numFirstServesMade + this.p1Stats.numSecondServes;\n    if (totalServePoints === 0) {\n      return '';\n    }\n    const UEs = this.p1Stats.numFirstServeUnforcedErrors + this.p1Stats.numSecondServeUnforcedErrors;\n    return `${Math.floor((UEs / totalServePoints) * 100)}%`;\n  }\n\n  getP2UnforcedErrorPctOnServe() {\n    const totalServePoints = this.p2Stats.numFirstServesMade + this.p2Stats.numSecondServes;\n    if (totalServePoints === 0) {\n      return '';\n    }\n    const UEs = this.p2Stats.numFirstServeUnforcedErrors + this.p2Stats.numSecondServeUnforcedErrors;\n    return `${Math.floor((UEs / totalServePoints) * 100)}%`;\n  }\n\n  getP1UnforcedErrorPctOnFirstServe() {\n    if (this.p1Stats.numFirstServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p1Stats.numFirstServeUnforcedErrors / this.p1Stats.numFirstServesMade) * 100)}%`;\n  }\n\n  getP2UnforcedErrorPctOnFirstServe() {\n    if (this.p2Stats.numFirstServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p2Stats.numFirstServeUnforcedErrors / this.p2Stats.numFirstServesMade) * 100)}%`;\n  }\n\n  getP1UnforcedErrorPctOnSecondServe() {\n    if (this.p1Stats.numSecondServes === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p1Stats.numSecondServeUnforcedErrors / this.p1Stats.numSecondServes) * 100)}%`;\n  }\n\n  getP2UnforcedErrorPctOnSecondServe() {\n    if (this.p2Stats.numSecondServes === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p2Stats.numSecondServeUnforcedErrors / this.p2Stats.numSecondServes) * 100)}%`;\n  }\n\n  getP1UnforcedErrorPctOnReturn() {\n    const oppoTotalServes = this.p2Stats.numFirstServesMade + this.p2Stats.numSecondServesMade;\n    if (oppoTotalServes === 0) {\n      return '';\n    }\n    const UEs = this.p2Stats.numFirstServeUnforcedErrorsByReturner + this.p2Stats.numSecondServeUnforcedErrorsByReturner;\n    return `${Math.floor((UEs / oppoTotalServes) * 100)}%`;\n  }\n\n  getP2UnforcedErrorPctOnReturn() {\n    const oppoTotalServes = this.p1Stats.numFirstServesMade + this.p1Stats.numSecondServesMade;\n    if (oppoTotalServes === 0) {\n      return '';\n    }\n    const UEs = this.p1Stats.numFirstServeUnforcedErrorsByReturner + this.p1Stats.numSecondServeUnforcedErrorsByReturner;\n    return `${Math.floor((UEs / oppoTotalServes) * 100)}%`;\n  }\n}\n\n// The fields should be counter stats (e.g. percentages should be methods only).\n// Reduce redundancy by making these as methods instead of fields:\n// - numDoubleFaults = numSecondServes - numSecondServesMade\n// - numFirstServesLoss = numFirstServesMade - numFirstServesWon\n// - numSecondServesLoss = numSecondServes - numSecondServesWon\n// - p1.numFirstServeReturnWon = p2.numFirstServeMade - p2.numFirstServesLoss\nexport class PlayerStat {\n  constructor(\n    public numGamePts = 0,\n    public numSetPts = 0,\n    // Don't count let.\n    public numFirstServes = 0,\n    public numFirstServesMade = 0,\n    public numFirstServesWon = 0,\n    // Don't count let.\n    public numSecondServes = 0,\n    public numSecondServesMade = 0,\n    public numSecondServesWon = 0,\n    public numFirstServeForcingWins = 0,\n    public numSecondServeForcingWins = 0,\n    public numFirstServeForcingWinsByReturner = 0,\n    public numSecondServeForcingWinsByReturner = 0,\n    public numFirstServeUnforcedErrors = 0,\n    public numSecondServeUnforcedErrors = 0,\n    public numFirstServeUnforcedErrorsByReturner = 0,\n    public numSecondServeUnforcedErrorsByReturner = 0,\n  ) {}\n\n  static deserialize(json: any) {\n    return new PlayerStat(\n      json.numGamePts,\n      json.numSetPts,\n      json.numFirstServes,\n      json.numFirstServesMade,\n      json.numFirstServesWon,\n      json.numSecondServes,\n      json.numSecondServesMade,\n      json.numSecondServesWon,\n      json.numFirstServeForcingWins,\n      json.numSecondServeForcingWins,\n      json.numFirstServeForcingWinsByReturner,\n      json.numSecondServeForcingWinsByReturner,\n      json.numFirstServeUnforcedErrors || 0,\n      json.numSecondServeUnforcedErrors || 0,\n      json.numFirstServeUnforcedErrorsByReturner || 0,\n      json.numSecondServeUnforcedErrorsByReturner || 0,\n    );\n  }\n\n  clone() {\n    return PlayerStat.deserialize(JSON.parse(JSON.stringify(this)));\n  }\n\n  getFirstServePct() {\n    if (this.numFirstServes === 0) {\n      return '';\n    }\n    return `${Math.floor((this.numFirstServesMade / this.numFirstServes) * 100)}%`;\n  }\n\n  getSecondServePct() {\n    if (this.numSecondServes === 0) {\n      return '';\n    }\n    return `${Math.floor((this.numSecondServesMade / this.numSecondServes) * 100)}%`;\n  }\n\n  getServePct() {\n    const totalServes = this.numFirstServes + this.numSecondServes;\n    const totalServesMade = this.numFirstServesMade + this.numSecondServesMade;\n    if (totalServes === 0) {\n      return '';\n    }\n    return `${Math.floor((totalServesMade / totalServes) * 100)}%`;\n  }\n\n  getServePointsWonPct() {\n    // numSecondServes is used to include double faults.\n    const totalPointsPlayed = this.numFirstServesMade + this.numSecondServes;\n    const totalPointsWon = this.numFirstServesWon + this.numSecondServesWon;\n    if (totalPointsPlayed === 0) {\n      return '';\n    }\n    return `${Math.floor((totalPointsWon / totalPointsPlayed) * 100)}%`;\n  }\n\n  getFirstServePointsWonPct() {\n    if (this.numFirstServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.numFirstServesWon / this.numFirstServesMade) * 100)}%`;\n  }\n\n  getSecondServePointsWonPct() {\n    // numSecondServes is used to include double faults.\n    if (this.numSecondServes === 0) {\n      return '';\n    }\n    return `${Math.floor((this.numSecondServesWon / this.numSecondServes) * 100)}%`;\n  }\n\n}\n```\n</file>\n<file>\n\n<status>I applied your suggestions for this file and accepted them. Here is the updated file:</status>\n```typescript\n// filepath: /Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts\nimport { MatchStat } from \"./match_stat\";\nimport { Rally, RallyResult } from \"./rally\";\nimport {  isTieBreakTime, PersonScore, Score } from \"./score\";\nimport { isForcingWin, isUnforcedError } from './risk_level';\n\nexport class RallyContext {\n  constructor(\n    public rally = new Rally(),\n    public scoreBeforeRally = new Score(),\n    public matchStatBeforeRally = new MatchStat(),\n  ) {}\n\n  getResultStr(myName: string, oppoName: string) {\n    const server = this.rally.isMyServe ? myName : oppoName;\n    const returner = this.rally.isMyServe ? oppoName : myName;\n    if (this.rally.result === RallyResult.PtServer) {\n      return `Pt. ${server}`;\n    } else if (this.rally.result === RallyResult.PtReturner) {\n      return `Pt. ${returner}`;\n    }\n    return this.rally.result;\n  }\n\n  getResultSymbolStr() {\n    if (this.rally.result === RallyResult.PtServer) {\n      return this.rally.isMyServe ? `${greenBall} ${whiteBall}` : `${whiteBall} ${greenBall}`;\n    } else if (this.rally.result === RallyResult.PtReturner) {\n      return this.rally.isMyServe ? `${redBall} ${whiteBall}` : `${whiteBall} ${redBall}`;\n    } else if (this.rally.result === RallyResult.Fault) {\n      if (this.isSecondServe()) {\n        return this.rally.isMyServe ? `${redHeart} ${whiteBall}` : `${whiteBall} ${redHeart}`;\n      }\n      return this.rally.isMyServe ? `${yellowBall} ${whiteBall}` : `${whiteBall} ${yellowBall}`;\n    }\n    return this.rally.result;\n  }\n  \n  toGameScoreStr() {\n    const strs = [];\n    if (this.isNewSet()) {\n      this.scoreBeforeRally.p1.gamesByCompletedSet.forEach((p1Games, idx) => {\n        strs.push(`[${p1Games}-${this.scoreBeforeRally.p2.gamesByCompletedSet[idx]}]`);\n      });\n    }\n    if (this.isNewGame()) {\n      strs.push(`[${this.scoreBeforeRally.p1.games}-${this.scoreBeforeRally.p2.games}]`);\n    }\n\n    return strs.join(' ');\n  }\n\n  isDoubleFault() {\n      return this.isSecondServe() && this.rally.result === RallyResult.Fault;\n  }\n\n  winnerIsMe() {\n    return (this.rally.isMyServe && this.rally.result === RallyResult.PtServer) ||\n        (!this.rally.isMyServe && (this.rally.result === RallyResult.PtReturner || this.isDoubleFault()));\n  }\n  winnerIsOppo() {\n    return (!this.rally.isMyServe && this.rally.result === RallyResult.PtServer) ||\n        (this.rally.isMyServe && (this.rally.result === RallyResult.PtReturner || this.isDoubleFault()));\n  }\n\n  getScoreAfterRally() {\n    const rally = this.rally;\n    const scoreAfterRally = this.scoreBeforeRally.clone();\n\n    const serverScore = rally.isMyServe ? scoreAfterRally.p1 : scoreAfterRally.p2;\n    const returnerScore = rally.isMyServe ? scoreAfterRally.p2 : scoreAfterRally.p1;\n    const serverWon = rally.result === RallyResult.PtServer;\n    if (serverWon) {\n      updateSubjectWin(serverScore, returnerScore);\n      return scoreAfterRally;\n    }\n\n    let returnerWon = rally.result === RallyResult.PtReturner;\n    if (rally.result === RallyResult.Fault) {\n      if (serverScore.serve === 0) {\n        serverScore.serve = 1;\n        return scoreAfterRally;\n      }\n      returnerWon = true;\n    }\n    if (returnerWon) {\n      updateSubjectWin(returnerScore, serverScore);\n    }\n    return scoreAfterRally;\n  }\n\n  inferWillBeMyServe(){}\n\n  isSecondServe() {\n    return this.scoreBeforeRally.p1.serve === 1 || this.scoreBeforeRally.p2.serve === 1;\n  }\n\n  isNewSet() {\n    if (!this.isNewGame()) {\n      return false;\n    }\n    return this.scoreBeforeRally.p1.games === 0 && this.scoreBeforeRally.p2.games === 0;\n  }\n\n  isNewGame() {\n    return this.scoreBeforeRally.p1.points === 0 && this.scoreBeforeRally.p1.serve === 0\n        && this.scoreBeforeRally.p2.points === 0 && this.scoreBeforeRally.p2.serve === 0;\n  }\n\n  isMyServeGame() {\n    if (!isTieBreakTime(this.scoreBeforeRally.p1, this.scoreBeforeRally.p2)) {\n      return this.rally.isMyServe;\n    }\n      // For a tiebreak, the player who serve first is his serve game.\n    const numTieBreakPtsMod4 = (this.scoreBeforeRally.p1.points + this.scoreBeforeRally.p2.points) % 4;\n    if (numTieBreakPtsMod4 === 1 || numTieBreakPtsMod4 === 4) {\n      return !this.rally.isMyServe;\n    }\n    return this.rally.isMyServe;\n  }\n\n  getPlotForNextRally() {\n    const myGamePt = isSubjectGamePoint(this.scoreBeforeRally.p1, this.scoreBeforeRally.p2);\n    const oppoGamePt = isSubjectGamePoint(this.scoreBeforeRally.p2, this.scoreBeforeRally.p1);\n    if (!myGamePt && !oppoGamePt) {\n      return;\n    }\n    const winnerIsMe = this.winnerIsMe();\n    const winnerIsOppo = this.winnerIsOppo();\n    const myConversion = myGamePt && winnerIsMe;\n    const oppoConversion = oppoGamePt && winnerIsOppo;\n    if (!myConversion && !oppoConversion) {\n      return;\n    }\n\n    return {\n      text: 'Converted',\n      isMyPlot: myConversion,\n    };\n  }\n\n  toPlot() {\n    const myGamePt = isSubjectGamePoint(this.scoreBeforeRally.p1, this.scoreBeforeRally.p2);\n    const oppoGamePt = isSubjectGamePoint(this.scoreBeforeRally.p2, this.scoreBeforeRally.p1);\n    const isSetPt = isSubjectSetPoint(this.scoreBeforeRally.p1, this.scoreBeforeRally.p2) || isSubjectSetPoint(this.scoreBeforeRally.p2, this.scoreBeforeRally.p1);\n    const myServeGame = this.isMyServeGame();\n    const isBreakPt = (myGamePt && !myServeGame) || (oppoGamePt && myServeGame);\n    const emphasis = isBreakPt ? '*' : '';\n    if (!myGamePt && !oppoGamePt) {\n      return;\n    }\n    let text = 'Game Pt';\n    if (isSetPt) {\n      text = `${emphasis}Set Pt`;\n    } else if (isBreakPt) {\n      text = 'Break pt';\n    }\n    return {\n      text: text,\n      isMyPlot: myGamePt,\n    };\n  }\n}\n\nconst whiteBall = `◯`;\nconst greenBall = `🟢`;\nconst yellowBall = `🟡`;\nconst redBall = `🔴`;\nconst redHeart = `🟥 `;\n\nexport function updateSubjectWin(subjectScore: PersonScore, otherScore: PersonScore) {\n  if (isSubjectSetPoint(subjectScore, otherScore)) {\n    subjectScore.gamesByCompletedSet.push(subjectScore.games + 1);\n    subjectScore.games = 0;\n    subjectScore.points = 0;\n    subjectScore.serve = 0;\n    otherScore.gamesByCompletedSet.push(otherScore.games);\n    otherScore.games = 0;\n    otherScore.points = 0;\n    otherScore.serve = 0;\n    return;\n  }\n  if (isSubjectGamePoint(subjectScore, otherScore)) {\n    subjectScore.games += 1;\n    subjectScore.points = 0;\n    subjectScore.serve = 0;\n    otherScore.points = 0;\n    otherScore.serve = 0;\n    return;\n  }\n  subjectScore.points += 1;\n  subjectScore.serve = 0;\n  otherScore.serve = 0;\n}\n\nfunction isSubjectGamePoint(subjectScore: PersonScore, otherScore: PersonScore) {\n  let deuceScore = isTieBreakTime(subjectScore, otherScore) ? 6 : 3;\n  return subjectScore.points >= deuceScore && subjectScore.points - otherScore.points >= 1;\n}\n\nfunction isSubjectSetPoint(subjectScore: PersonScore, otherScore: PersonScore) {\n  if (!isSubjectGamePoint(subjectScore, otherScore)) {\n    return false;\n  }\n  if (isTieBreakTime(subjectScore, otherScore)) {\n    return true;\n  }\n  return subjectScore.games >= 5 && subjectScore.games - otherScore.games >= 1;\n}\n\n\nexport function annotateMatchStat(rallyContexts: RallyContext[]) {\n  const stat = new MatchStat();\n  rallyContexts.forEach((rallyContext) => {\n    rallyContext.matchStatBeforeRally = stat.clone();\n\n    // Check game points and set points using direct score comparison\n    if (isSubjectGamePoint(rallyContext.scoreBeforeRally.p1, rallyContext.scoreBeforeRally.p2)) {\n      stat.p1Stats.numGamePts++;\n      if (isSubjectSetPoint(rallyContext.scoreBeforeRally.p1, rallyContext.scoreBeforeRally.p2)) {\n        stat.p1Stats.numSetPts++;\n      }\n    }\n    if (isSubjectGamePoint(rallyContext.scoreBeforeRally.p2, rallyContext.scoreBeforeRally.p1)) {\n      stat.p2Stats.numGamePts++;\n      if (isSubjectSetPoint(rallyContext.scoreBeforeRally.p2, rallyContext.scoreBeforeRally.p1)) {\n        stat.p2Stats.numSetPts++;\n      }\n    }\n\n    function isReturnerPtForSecondServe(rallyContext: RallyContext) {\n      if (!rallyContext.isSecondServe()) {\n        return false;\n      }\n      return rallyContext.rally.result === RallyResult.PtReturner || rallyContext.rally.result === RallyResult.Fault;\n    }\n    if (rallyContext.rally.isMyServe) {\n      const serverStats = stat.p1Stats;\n      const returnerStats = stat.p2Stats;\n      const isSecondServe = rallyContext.isSecondServe();\n      \n      if (isSecondServe) {\n        if (rallyContext.rally.result !== RallyResult.Let) {\n          serverStats.numSecondServes++;\n        }\n        if (rallyContext.rally.result !== RallyResult.Fault) {\n          serverStats.numSecondServesMade++;\n          if (rallyContext.rally.result === RallyResult.PtServer) {\n            serverStats.numSecondServesWon++;\n            if (isForcingWin(rallyContext)) {\n              serverStats.numSecondServeForcingWins++;\n            }\n          } else if (isReturnerPtForSecondServe(rallyContext) && isForcingWin(rallyContext)) {\n            returnerStats.numSecondServeForcingWinsByReturner++;\n          }\n        }\n        if (isReturnerPtForSecondServe(rallyContext) && isUnforcedError(rallyContext)) {\n          serverStats.numSecondServeUnforcedErrors++;\n        }\n        if (rallyContext.rally.result === RallyResult.PtServer && isUnforcedError(rallyContext)) {\n          returnerStats.numSecondServeUnforcedErrorsByReturner++;\n        }\n      } else {\n        if (rallyContext.rally.result !== RallyResult.Let) {\n          serverStats.numFirstServes++;\n        }\n        if (rallyContext.rally.result !== RallyResult.Fault) {\n          serverStats.numFirstServesMade++;\n          if (rallyContext.rally.result === RallyResult.PtServer) {\n            serverStats.numFirstServesWon++;\n            if (isForcingWin(rallyContext)) {\n              serverStats.numFirstServeForcingWins++;\n            }\n          } else if (rallyContext.rally.result === RallyResult.PtReturner && isForcingWin(rallyContext)) {\n            returnerStats.numFirstServeForcingWinsByReturner++;\n          }\n        }\n        if (rallyContext.rally.result === RallyResult.PtReturner && isUnforcedError(rallyContext)) {\n          serverStats.numFirstServeUnforcedErrors++;\n        }\n        if (rallyContext.rally.result === RallyResult.PtServer && isUnforcedError(rallyContext)) {\n          returnerStats.numFirstServeUnforcedErrorsByReturner++;\n        }\n      }\n    } else {\n      const serverStats = stat.p2Stats;\n      const returnerStats = stat.p1Stats;\n      const isSecondServe = rallyContext.isSecondServe();\n      \n      if (!isSecondServe) {\n        serverStats.numFirstServes++;\n        if (rallyContext.rally.result !== RallyResult.Fault) {\n          serverStats.numFirstServesMade++;\n          if (rallyContext.rally.result === RallyResult.PtServer) {\n            serverStats.numFirstServesWon++;\n            if (isForcingWin(rallyContext)) {\n              serverStats.numFirstServeForcingWins++;\n            }\n          } else if (rallyContext.rally.result === RallyResult.PtReturner && isForcingWin(rallyContext)) {\n            returnerStats.numFirstServeForcingWinsByReturner++;\n          }\n        }\n        if (rallyContext.rally.result === RallyResult.PtReturner && isUnforcedError(rallyContext)) {\n          serverStats.numFirstServeUnforcedErrors++;\n        }\n        if (rallyContext.rally.result === RallyResult.PtServer && isUnforcedError(rallyContext)) {\n          returnerStats.numFirstServeUnforcedErrorsByReturner++;\n        }\n      } else {\n        serverStats.numSecondServes++;\n        if (rallyContext.rally.result !== RallyResult.Fault) {\n          serverStats.numSecondServesMade++;\n          if (rallyContext.rally.result === RallyResult.PtServer) {\n            serverStats.numSecondServesWon++;\n            if (isForcingWin(rallyContext)) {\n              serverStats.numSecondServeForcingWins++;\n            }\n          } else if (isReturnerPtForSecondServe(rallyContext) && isForcingWin(rallyContext)) {\n            returnerStats.numSecondServeForcingWinsByReturner++;\n          }\n        }\n        if (isReturnerPtForSecondServe(rallyContext) && isUnforcedError(rallyContext)) {\n          serverStats.numSecondServeUnforcedErrors++;\n        }\n        if (rallyContext.rally.result === RallyResult.PtServer && isUnforcedError(rallyContext)) {\n          returnerStats.numSecondServeUnforcedErrorsByReturner++;\n        }\n      }\n    }\n  });\n}\n```\n</file>\n\n<reminder>\nAvoid repeating existing code, instead use `// ...existing code...` comments to represent regions of unchanged code.\nEach file's code block must start with a comment containing the filepath. This includes Markdown files.\n</reminder>\n<prompt>\nImple getP1UnforcedErrorPctOn1stServeReturn (and similarly for P2 and also for 2ndServe)\n</prompt>",
            "response": "ho ho ho\n\nLet me help you implement the unforced error percentage methods for returns. Here's the solution:\n\nSteps:\n1. Add four new methods to MatchStat class for unforced error percentage on returns\n2. Calculate percentages based on the ratio of unforced errors to total serves made by opponent\n\n### /Users/kris/code/match-grader/src/tsModules/match-grader/models/match_stat.ts\n\nAdd new methods for calculating unforced error percentages on returns.\n\n```typescript\n// filepath: /Users/kris/code/match-grader/src/tsModules/match-grader/models/match_stat.ts\n// ...existing code...\n\nexport class MatchStat {\n  // ...existing code...\n\n  getP1UnforcedErrorPctOn1stServeReturn() {\n    if (this.p2Stats.numFirstServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p1Stats.numFirstServeUnforcedErrorsByReturner / this.p2Stats.numFirstServesMade) * 100)}%`;\n  }\n\n  getP2UnforcedErrorPctOn1stServeReturn() {\n    if (this.p1Stats.numFirstServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p2Stats.numFirstServeUnforcedErrorsByReturner / this.p1Stats.numFirstServesMade) * 100)}%`;\n  }\n\n  getP1UnforcedErrorPctOn2ndServeReturn() {\n    if (this.p2Stats.numSecondServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p1Stats.numSecondServeUnforcedErrorsByReturner / this.p2Stats.numSecondServesMade) * 100)}%`;\n  }\n\n  getP2UnforcedErrorPctOn2ndServeReturn() {\n    if (this.p1Stats.numSecondServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p2Stats.numSecondServeUnforcedErrorsByReturner / this.p1Stats.numSecondServesMade) * 100)}%`;\n  }\n\n  // ...existing code...\n}\n```\n\nThese methods calculate the percentage of unforced errors committed by each player when returning serves. The denominator is the number of made serves by the opponent (since you can only make a return error on a serve that was made). The numerator is the number of unforced errors by the returner on that serve type."
          },
          "codeBlocks": [
            {
              "code": "// ...existing code...\n\nexport class MatchStat {\n  // ...existing code...\n\n  getP1UnforcedErrorPctOn1stServeReturn() {\n    if (this.p2Stats.numFirstServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p1Stats.numFirstServeUnforcedErrorsByReturner / this.p2Stats.numFirstServesMade) * 100)}%`;\n  }\n\n  getP2UnforcedErrorPctOn1stServeReturn() {\n    if (this.p1Stats.numFirstServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p2Stats.numFirstServeUnforcedErrorsByReturner / this.p1Stats.numFirstServesMade) * 100)}%`;\n  }\n\n  getP1UnforcedErrorPctOn2ndServeReturn() {\n    if (this.p2Stats.numSecondServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p1Stats.numSecondServeUnforcedErrorsByReturner / this.p2Stats.numSecondServesMade) * 100)}%`;\n  }\n\n  getP2UnforcedErrorPctOn2ndServeReturn() {\n    if (this.p1Stats.numSecondServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p2Stats.numSecondServeUnforcedErrorsByReturner / this.p1Stats.numSecondServesMade) * 100)}%`;\n  }\n\n  // ...existing code...\n}\n",
              "resource": {
                "$mid": 1,
                "fsPath": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/match_stat.ts",
                "external": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/match_stat.ts",
                "path": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/match_stat.ts",
                "scheme": "file"
              },
              "language": "typescript",
              "markdownBeforeBlock": "ho ho ho\n\nLet me help you implement the unforced error percentage methods for returns. Here's the solution:\n\nSteps:\n1. Add four new methods to MatchStat class for unforced error percentage on returns\n2. Calculate percentages based on the ratio of unforced errors to total serves made by opponent\n\n### [match_stat.ts](file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/match_stat.ts)\n\nAdd new methods for calculating unforced error percentages on returns.\n\n"
            }
          ],
          "messages": [
            {
              "role": "user",
              "content": "Imple getP1UnforcedErrorPctOn1stServeReturn (and similarly for P2 and also for 2ndServe)"
            },
            {
              "role": "assistant",
              "content": "ho ho ho\n\nLet me help you implement the unforced error percentage methods for returns. Here's the solution:\n\nSteps:\n1. Add four new methods to MatchStat class for unforced error percentage on returns\n2. Calculate percentages based on the ratio of unforced errors to total serves made by opponent\n\n### /Users/kris/code/match-grader/src/tsModules/match-grader/models/match_stat.ts\n\nAdd new methods for calculating unforced error percentages on returns.\n\n```typescript\n// filepath: /Users/kris/code/match-grader/src/tsModules/match-grader/models/match_stat.ts\n// ...existing code...\n\nexport class MatchStat {\n  // ...existing code...\n\n  getP1UnforcedErrorPctOn1stServeReturn() {\n    if (this.p2Stats.numFirstServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p1Stats.numFirstServeUnforcedErrorsByReturner / this.p2Stats.numFirstServesMade) * 100)}%`;\n  }\n\n  getP2UnforcedErrorPctOn1stServeReturn() {\n    if (this.p1Stats.numFirstServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p2Stats.numFirstServeUnforcedErrorsByReturner / this.p1Stats.numFirstServesMade) * 100)}%`;\n  }\n\n  getP1UnforcedErrorPctOn2ndServeReturn() {\n    if (this.p2Stats.numSecondServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p1Stats.numSecondServeUnforcedErrorsByReturner / this.p2Stats.numSecondServesMade) * 100)}%`;\n  }\n\n  getP2UnforcedErrorPctOn2ndServeReturn() {\n    if (this.p1Stats.numSecondServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p2Stats.numSecondServeUnforcedErrorsByReturner / this.p1Stats.numSecondServesMade) * 100)}%`;\n  }\n\n  // ...existing code...\n}\n```\n\nThese methods calculate the percentage of unforced errors committed by each player when returning serves. The denominator is the number of made serves by the opponent (since you can only make a return error on a serve that was made). The numerator is the number of unforced errors by the returner on that serve type."
            }
          ],
          "modelMessageId": "b75cf7dc-2980-4c51-be3a-70058e550fcd",
          "responseId": "d5193d00-026e-41da-9e32-8bcffba4a82a",
          "sessionId": "c8a583d9-9302-420c-8fa7-1a53550f44ed",
          "agentId": "github.copilot.editingSession"
        }
      },
      "followups": [],
      "isCanceled": false,
      "agent": {
        "extensionId": {
          "value": "GitHub.copilot-chat",
          "_lower": "github.copilot-chat"
        },
        "publisherDisplayName": "GitHub",
        "extensionPublisherId": "GitHub",
        "extensionDisplayName": "GitHub Copilot Chat",
        "id": "github.copilot.editingSession",
        "description": "Edit files in your workspace",
        "metadata": {
          "themeIcon": {
            "id": "copilot"
          },
          "hasFollowups": false,
          "supportIssueReporting": false,
          "supportsSlowVariables": true
        },
        "name": "GitHubCopilot",
        "fullName": "GitHub Copilot",
        "isDefault": true,
        "locations": [
          "editing-session"
        ],
        "slashCommands": [],
        "disambiguation": []
      },
      "workingSet": [
        {
          "$mid": 1,
          "fsPath": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
          "external": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
          "path": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
          "scheme": "file"
        },
        {
          "$mid": 1,
          "fsPath": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/match_stat.ts",
          "external": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/match_stat.ts",
          "path": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/match_stat.ts",
          "scheme": "file"
        },
        {
          "$mid": 1,
          "fsPath": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
          "external": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
          "path": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
          "scheme": "file"
        },
        {
          "$mid": 1,
          "fsPath": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/match_stat.ts",
          "external": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/match_stat.ts",
          "path": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/match_stat.ts",
          "scheme": "file"
        }
      ],
      "contentReferences": [
        {
          "kind": "reference",
          "reference": {
            "$mid": 1,
            "fsPath": "/Users/kris/code/match-grader/.github/copilot-instructions.md",
            "external": "file:///Users/kris/code/match-grader/.github/copilot-instructions.md",
            "path": "/Users/kris/code/match-grader/.github/copilot-instructions.md",
            "scheme": "file"
          }
        }
      ],
      "codeCitations": [],
      "timestamp": 1736806074514
    },
    {
      "requestId": "request_b283af45-c80f-4853-83b0-43601f10872e",
      "message": {
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 21
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 22
            },
            "text": "Add those into the ui",
            "kind": "text"
          }
        ],
        "text": "Add those into the ui"
      },
      "variableData": {
        "variables": [
          {
            "value": {
              "$mid": 1,
              "fsPath": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/match_stat.ts",
              "external": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/match_stat.ts",
              "path": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/match_stat.ts",
              "scheme": "file"
            },
            "id": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/match_stat.ts",
            "name": "match_stat.ts",
            "isFile": true,
            "isDynamic": true
          },
          {
            "value": {
              "$mid": 1,
              "fsPath": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
              "external": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
              "path": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
              "scheme": "file"
            },
            "id": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
            "name": "rally_context.ts",
            "isFile": true,
            "isDynamic": true
          }
        ]
      },
      "response": [
        {
          "value": "ho ho ho\n\nLet's add the unforced error percentages for serve returns to the UI. Here's the step-by-step solution:\n\n1. Create new labels and add the methods to display the percentages\n2. Organize them under the existing return statistics section\n3. Format consistently with existing stats\n\n### [match_stat_view.tsx](file:///Users/kris/code/match-grader/src/tsModules/match-grader/components/match_stat_view.tsx)\n\nAdd new stats for unforced error percentages on returns.\n\n```typescript\n",
          "supportThemeIcons": false,
          "supportHtml": false
        },
        {
          "kind": "codeblockUri",
          "uri": {
            "$mid": 1,
            "fsPath": "/Users/kris/code/match-grader/src/tsModules/match-grader/components/match_stat_view.tsx",
            "external": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/components/match_stat_view.tsx",
            "path": "/Users/kris/code/match-grader/src/tsModules/match-grader/components/match_stat_view.tsx",
            "scheme": "file"
          }
        },
        {
          "value": "// ...existing code...\n\nfunction ReturnSection({ matchStat, myName, oppoName }: Props) {\n  return (\n    <div>\n      <h3>Return</h3>\n      <StatRow\n        label=\"Forcing Win % (1st serve)\"\n        p1Stat={matchStat.getP1ForcingWinPctOnFirstReturn()}\n        p2Stat={matchStat.getP2ForcingWinPctOnFirstReturn()}\n      />\n      <StatRow\n        label=\"Forcing Win % (2nd serve)\" \n        p1Stat={matchStat.getP1ForcingWinPctOnSecondReturn()}\n        p2Stat={matchStat.getP2ForcingWinPctOnSecondReturn()}\n      />\n      <StatRow\n        label=\"UE % (1st serve)\"\n        p1Stat={matchStat.getP1UnforcedErrorPctOn1stServeReturn()}\n        p2Stat={matchStat.getP2UnforcedErrorPctOn1stServeReturn()}\n      />\n      <StatRow\n        label=\"UE % (2nd serve)\"\n        p1Stat={matchStat.getP1UnforcedErrorPctOn2ndServeReturn()} \n        p2Stat={matchStat.getP2UnforcedErrorPctOn2ndServeReturn()}\n      />\n      <StatRow\n        label=\"Forcing Win % (overall)\"\n        p1Stat={matchStat.getP1ForcingWinPctOnReturn()}\n        p2Stat={matchStat.getP2ForcingWinPctOnReturn()}\n      />\n      <StatRow\n        label=\"UE % (overall)\"\n        p1Stat={matchStat.getP1UnforcedErrorPctOnReturn()}\n        p2Stat={matchStat.getP2UnforcedErrorPctOnReturn()} \n      />\n    </div>\n  );\n}\n\n// ...existing code...\n```\n\nThe changes add two new stat rows in the return section:\n1. Unforced error percentage on first serve returns\n2. Unforced error percentage on second serve returns\n\nThese are placed with the existing forcing win percentage stats, followed by the overall stats at the bottom. The formatting matches the existing stat rows for consistency.",
          "supportThemeIcons": false,
          "supportHtml": false
        },
        {
          "kind": "textEditGroup",
          "uri": {
            "$mid": 1,
            "external": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/components/match_stat_view.tsx",
            "path": "/Users/kris/code/match-grader/src/tsModules/match-grader/components/match_stat_view.tsx",
            "scheme": "file"
          },
          "edits": [
            [],
            [
              {
                "text": "// ...existing code...",
                "range": {
                  "startLineNumber": 1,
                  "startColumn": 1,
                  "endLineNumber": 1,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n",
                "range": {
                  "startLineNumber": 2,
                  "startColumn": 1073741825,
                  "endLineNumber": 2,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\nfunction ReturnSection({ matchStat, myName, oppoName }: Props) {",
                "range": {
                  "startLineNumber": 3,
                  "startColumn": 1073741825,
                  "endLineNumber": 3,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n  return (",
                "range": {
                  "startLineNumber": 4,
                  "startColumn": 1073741825,
                  "endLineNumber": 4,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n    <div>",
                "range": {
                  "startLineNumber": 5,
                  "startColumn": 1073741825,
                  "endLineNumber": 5,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n      <h3>Return</h3>",
                "range": {
                  "startLineNumber": 6,
                  "startColumn": 1073741825,
                  "endLineNumber": 6,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n      <StatRow",
                "range": {
                  "startLineNumber": 7,
                  "startColumn": 1073741825,
                  "endLineNumber": 7,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n        label=\"Forcing Win % (1st serve)\"",
                "range": {
                  "startLineNumber": 8,
                  "startColumn": 1073741825,
                  "endLineNumber": 8,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n        p1Stat={matchStat.getP1ForcingWinPctOnFirstReturn()}",
                "range": {
                  "startLineNumber": 9,
                  "startColumn": 1073741825,
                  "endLineNumber": 9,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n        p2Stat={matchStat.getP2ForcingWinPctOnFirstReturn()}",
                "range": {
                  "startLineNumber": 10,
                  "startColumn": 1073741825,
                  "endLineNumber": 10,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n      />",
                "range": {
                  "startLineNumber": 11,
                  "startColumn": 1073741825,
                  "endLineNumber": 11,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n      <StatRow",
                "range": {
                  "startLineNumber": 12,
                  "startColumn": 1073741825,
                  "endLineNumber": 12,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n        label=\"Forcing Win % (2nd serve)\" ",
                "range": {
                  "startLineNumber": 13,
                  "startColumn": 1073741825,
                  "endLineNumber": 13,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n        p1Stat={matchStat.getP1ForcingWinPctOnSecondReturn()}",
                "range": {
                  "startLineNumber": 14,
                  "startColumn": 1073741825,
                  "endLineNumber": 14,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n        p2Stat={matchStat.getP2ForcingWinPctOnSecondReturn()}",
                "range": {
                  "startLineNumber": 15,
                  "startColumn": 1073741825,
                  "endLineNumber": 15,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n      />",
                "range": {
                  "startLineNumber": 16,
                  "startColumn": 1073741825,
                  "endLineNumber": 16,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n      <StatRow",
                "range": {
                  "startLineNumber": 17,
                  "startColumn": 1073741825,
                  "endLineNumber": 17,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n        label=\"UE % (1st serve)\"",
                "range": {
                  "startLineNumber": 18,
                  "startColumn": 1073741825,
                  "endLineNumber": 18,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n        p1Stat={matchStat.getP1UnforcedErrorPctOn1stServeReturn()}",
                "range": {
                  "startLineNumber": 19,
                  "startColumn": 1073741825,
                  "endLineNumber": 19,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n        p2Stat={matchStat.getP2UnforcedErrorPctOn1stServeReturn()}",
                "range": {
                  "startLineNumber": 20,
                  "startColumn": 1073741825,
                  "endLineNumber": 20,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n      />",
                "range": {
                  "startLineNumber": 21,
                  "startColumn": 1073741825,
                  "endLineNumber": 21,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n      <StatRow",
                "range": {
                  "startLineNumber": 22,
                  "startColumn": 1073741825,
                  "endLineNumber": 22,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n        label=\"UE % (2nd serve)\"",
                "range": {
                  "startLineNumber": 23,
                  "startColumn": 1073741825,
                  "endLineNumber": 23,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n        p1Stat={matchStat.getP1UnforcedErrorPctOn2ndServeReturn()} ",
                "range": {
                  "startLineNumber": 24,
                  "startColumn": 1073741825,
                  "endLineNumber": 24,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n        p2Stat={matchStat.getP2UnforcedErrorPctOn2ndServeReturn()}",
                "range": {
                  "startLineNumber": 25,
                  "startColumn": 1073741825,
                  "endLineNumber": 25,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n      />",
                "range": {
                  "startLineNumber": 26,
                  "startColumn": 1073741825,
                  "endLineNumber": 26,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n      <StatRow",
                "range": {
                  "startLineNumber": 27,
                  "startColumn": 1073741825,
                  "endLineNumber": 27,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n        label=\"Forcing Win % (overall)\"",
                "range": {
                  "startLineNumber": 28,
                  "startColumn": 1073741825,
                  "endLineNumber": 28,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n        p1Stat={matchStat.getP1ForcingWinPctOnReturn()}",
                "range": {
                  "startLineNumber": 29,
                  "startColumn": 1073741825,
                  "endLineNumber": 29,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n        p2Stat={matchStat.getP2ForcingWinPctOnReturn()}",
                "range": {
                  "startLineNumber": 30,
                  "startColumn": 1073741825,
                  "endLineNumber": 30,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n      />",
                "range": {
                  "startLineNumber": 31,
                  "startColumn": 1073741825,
                  "endLineNumber": 31,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n      <StatRow",
                "range": {
                  "startLineNumber": 32,
                  "startColumn": 1073741825,
                  "endLineNumber": 32,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n        label=\"UE % (overall)\"",
                "range": {
                  "startLineNumber": 33,
                  "startColumn": 1073741825,
                  "endLineNumber": 33,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n        p1Stat={matchStat.getP1UnforcedErrorPctOnReturn()}",
                "range": {
                  "startLineNumber": 34,
                  "startColumn": 1073741825,
                  "endLineNumber": 34,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n        p2Stat={matchStat.getP2UnforcedErrorPctOnReturn()} ",
                "range": {
                  "startLineNumber": 35,
                  "startColumn": 1073741825,
                  "endLineNumber": 35,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n      />",
                "range": {
                  "startLineNumber": 36,
                  "startColumn": 1073741825,
                  "endLineNumber": 36,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n    </div>",
                "range": {
                  "startLineNumber": 37,
                  "startColumn": 1073741825,
                  "endLineNumber": 37,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n  );",
                "range": {
                  "startLineNumber": 38,
                  "startColumn": 1073741825,
                  "endLineNumber": 38,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n}",
                "range": {
                  "startLineNumber": 39,
                  "startColumn": 1073741825,
                  "endLineNumber": 39,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n",
                "range": {
                  "startLineNumber": 40,
                  "startColumn": 1073741825,
                  "endLineNumber": 40,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n// ...existing code...",
                "range": {
                  "startLineNumber": 41,
                  "startColumn": 1073741825,
                  "endLineNumber": 41,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n",
                "range": {
                  "startLineNumber": 42,
                  "startColumn": 1073741825,
                  "endLineNumber": 42,
                  "endColumn": 1073741825
                }
              }
            ],
            []
          ],
          "done": true
        }
      ],
      "responseId": "response_d5a19810-600a-42bc-901b-82bec8c86f39",
      "isHidden": false,
      "result": {
        "timings": {
          "firstProgress": 7358,
          "totalElapsed": 23447
        },
        "metadata": {
          "edits": {
            "workingSet": [
              {
                "uri": {
                  "$mid": 1,
                  "fsPath": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
                  "external": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
                  "path": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
                  "scheme": "file"
                },
                "text": "import { MatchStat } from \"./match_stat\";\nimport { Rally, RallyResult } from \"./rally\";\nimport {  isTieBreakTime, PersonScore, Score } from \"./score\";\nimport { isForcingWin, isUnforcedError } from './risk_level';\n\nexport class RallyContext {\n  constructor(\n    public rally = new Rally(),\n    public scoreBeforeRally = new Score(),\n    public matchStatBeforeRally = new MatchStat(),\n  ) {}\n\n  getResultStr(myName: string, oppoName: string) {\n    const server = this.rally.isMyServe ? myName : oppoName;\n    const returner = this.rally.isMyServe ? oppoName : myName;\n    if (this.rally.result === RallyResult.PtServer) {\n      return `Pt. ${server}`;\n    } else if (this.rally.result === RallyResult.PtReturner) {\n      return `Pt. ${returner}`;\n    }\n    return this.rally.result;\n  }\n\n  getResultSymbolStr() {\n    if (this.rally.result === RallyResult.PtServer) {\n      return this.rally.isMyServe ? `${greenBall} ${whiteBall}` : `${whiteBall} ${greenBall}`;\n    } else if (this.rally.result === RallyResult.PtReturner) {\n      return this.rally.isMyServe ? `${redBall} ${whiteBall}` : `${whiteBall} ${redBall}`;\n    } else if (this.rally.result === RallyResult.Fault) {\n      if (this.isSecondServe()) {\n        return this.rally.isMyServe ? `${redHeart} ${whiteBall}` : `${whiteBall} ${redHeart}`;\n      }\n      return this.rally.isMyServe ? `${yellowBall} ${whiteBall}` : `${whiteBall} ${yellowBall}`;\n    }\n    return this.rally.result;\n  }\n  \n  toGameScoreStr() {\n    const strs = [];\n    if (this.isNewSet()) {\n      this.scoreBeforeRally.p1.gamesByCompletedSet.forEach((p1Games, idx) => {\n        strs.push(`[${p1Games}-${this.scoreBeforeRally.p2.gamesByCompletedSet[idx]}]`);\n      });\n    }\n    if (this.isNewGame()) {\n      strs.push(`[${this.scoreBeforeRally.p1.games}-${this.scoreBeforeRally.p2.games}]`);\n    }\n\n    return strs.join(' ');\n  }\n\n  isDoubleFault() {\n      return this.isSecondServe() && this.rally.result === RallyResult.Fault;\n  }\n\n  winnerIsMe() {\n    return (this.rally.isMyServe && this.rally.result === RallyResult.PtServer) ||\n        (!this.rally.isMyServe && (this.rally.result === RallyResult.PtReturner || this.isDoubleFault()));\n  }\n  winnerIsOppo() {\n    return (!this.rally.isMyServe && this.rally.result === RallyResult.PtServer) ||\n        (this.rally.isMyServe && (this.rally.result === RallyResult.PtReturner || this.isDoubleFault()));\n  }\n\n  getScoreAfterRally() {\n    const rally = this.rally;\n    const scoreAfterRally = this.scoreBeforeRally.clone();\n\n    const serverScore = rally.isMyServe ? scoreAfterRally.p1 : scoreAfterRally.p2;\n    const returnerScore = rally.isMyServe ? scoreAfterRally.p2 : scoreAfterRally.p1;\n    const serverWon = rally.result === RallyResult.PtServer;\n    if (serverWon) {\n      updateSubjectWin(serverScore, returnerScore);\n      return scoreAfterRally;\n    }\n\n    let returnerWon = rally.result === RallyResult.PtReturner;\n    if (rally.result === RallyResult.Fault) {\n      if (serverScore.serve === 0) {\n        serverScore.serve = 1;\n        return scoreAfterRally;\n      }\n      returnerWon = true;\n    }\n    if (returnerWon) {\n      updateSubjectWin(returnerScore, serverScore);\n    }\n    return scoreAfterRally;\n  }\n\n  inferWillBeMyServe(){}\n\n  isSecondServe() {\n    return this.scoreBeforeRally.p1.serve === 1 || this.scoreBeforeRally.p2.serve === 1;\n  }\n\n  isNewSet() {\n    if (!this.isNewGame()) {\n      return false;\n    }\n    return this.scoreBeforeRally.p1.games === 0 && this.scoreBeforeRally.p2.games === 0;\n  }\n\n  isNewGame() {\n    return this.scoreBeforeRally.p1.points === 0 && this.scoreBeforeRally.p1.serve === 0\n        && this.scoreBeforeRally.p2.points === 0 && this.scoreBeforeRally.p2.serve === 0;\n  }\n\n  isMyServeGame() {\n    if (!isTieBreakTime(this.scoreBeforeRally.p1, this.scoreBeforeRally.p2)) {\n      return this.rally.isMyServe;\n    }\n      // For a tiebreak, the player who serve first is his serve game.\n    const numTieBreakPtsMod4 = (this.scoreBeforeRally.p1.points + this.scoreBeforeRally.p2.points) % 4;\n    if (numTieBreakPtsMod4 === 1 || numTieBreakPtsMod4 === 4) {\n      return !this.rally.isMyServe;\n    }\n    return this.rally.isMyServe;\n  }\n\n  getPlotForNextRally() {\n    const myGamePt = isSubjectGamePoint(this.scoreBeforeRally.p1, this.scoreBeforeRally.p2);\n    const oppoGamePt = isSubjectGamePoint(this.scoreBeforeRally.p2, this.scoreBeforeRally.p1);\n    if (!myGamePt && !oppoGamePt) {\n      return;\n    }\n    const winnerIsMe = this.winnerIsMe();\n    const winnerIsOppo = this.winnerIsOppo();\n    const myConversion = myGamePt && winnerIsMe;\n    const oppoConversion = oppoGamePt && winnerIsOppo;\n    if (!myConversion && !oppoConversion) {\n      return;\n    }\n\n    return {\n      text: 'Converted',\n      isMyPlot: myConversion,\n    };\n  }\n\n  toPlot() {\n    const myGamePt = isSubjectGamePoint(this.scoreBeforeRally.p1, this.scoreBeforeRally.p2);\n    const oppoGamePt = isSubjectGamePoint(this.scoreBeforeRally.p2, this.scoreBeforeRally.p1);\n    const isSetPt = isSubjectSetPoint(this.scoreBeforeRally.p1, this.scoreBeforeRally.p2) || isSubjectSetPoint(this.scoreBeforeRally.p2, this.scoreBeforeRally.p1);\n    const myServeGame = this.isMyServeGame();\n    const isBreakPt = (myGamePt && !myServeGame) || (oppoGamePt && myServeGame);\n    const emphasis = isBreakPt ? '*' : '';\n    if (!myGamePt && !oppoGamePt) {\n      return;\n    }\n    let text = 'Game Pt';\n    if (isSetPt) {\n      text = `${emphasis}Set Pt`;\n    } else if (isBreakPt) {\n      text = 'Break pt';\n    }\n    return {\n      text: text,\n      isMyPlot: myGamePt,\n    };\n  }\n}\n\nconst whiteBall = `◯`;\nconst greenBall = `🟢`;\nconst yellowBall = `🟡`;\nconst redBall = `🔴`;\nconst redHeart = `🟥 `;\n\nexport function updateSubjectWin(subjectScore: PersonScore, otherScore: PersonScore) {\n  if (isSubjectSetPoint(subjectScore, otherScore)) {\n    subjectScore.gamesByCompletedSet.push(subjectScore.games + 1);\n    subjectScore.games = 0;\n    subjectScore.points = 0;\n    subjectScore.serve = 0;\n    otherScore.gamesByCompletedSet.push(otherScore.games);\n    otherScore.games = 0;\n    otherScore.points = 0;\n    otherScore.serve = 0;\n    return;\n  }\n  if (isSubjectGamePoint(subjectScore, otherScore)) {\n    subjectScore.games += 1;\n    subjectScore.points = 0;\n    subjectScore.serve = 0;\n    otherScore.points = 0;\n    otherScore.serve = 0;\n    return;\n  }\n  subjectScore.points += 1;\n  subjectScore.serve = 0;\n  otherScore.serve = 0;\n}\n\nfunction isSubjectGamePoint(subjectScore: PersonScore, otherScore: PersonScore) {\n  let deuceScore = isTieBreakTime(subjectScore, otherScore) ? 6 : 3;\n  return subjectScore.points >= deuceScore && subjectScore.points - otherScore.points >= 1;\n}\n\nfunction isSubjectSetPoint(subjectScore: PersonScore, otherScore: PersonScore) {\n  if (!isSubjectGamePoint(subjectScore, otherScore)) {\n    return false;\n  }\n  if (isTieBreakTime(subjectScore, otherScore)) {\n    return true;\n  }\n  return subjectScore.games >= 5 && subjectScore.games - otherScore.games >= 1;\n}\n\n\nexport function annotateMatchStat(rallyContexts: RallyContext[]) {\n  const stat = new MatchStat();\n  rallyContexts.forEach((rallyContext) => {\n    rallyContext.matchStatBeforeRally = stat.clone();\n\n    // Check game points and set points using direct score comparison\n    if (isSubjectGamePoint(rallyContext.scoreBeforeRally.p1, rallyContext.scoreBeforeRally.p2)) {\n      stat.p1Stats.numGamePts++;\n      if (isSubjectSetPoint(rallyContext.scoreBeforeRally.p1, rallyContext.scoreBeforeRally.p2)) {\n        stat.p1Stats.numSetPts++;\n      }\n    }\n    if (isSubjectGamePoint(rallyContext.scoreBeforeRally.p2, rallyContext.scoreBeforeRally.p1)) {\n      stat.p2Stats.numGamePts++;\n      if (isSubjectSetPoint(rallyContext.scoreBeforeRally.p2, rallyContext.scoreBeforeRally.p1)) {\n        stat.p2Stats.numSetPts++;\n      }\n    }\n\n    function isReturnerPtForSecondServe(rallyContext: RallyContext) {\n      if (!rallyContext.isSecondServe()) {\n        return false;\n      }\n      return rallyContext.rally.result === RallyResult.PtReturner || rallyContext.rally.result === RallyResult.Fault;\n    }\n    if (rallyContext.rally.isMyServe) {\n      const serverStats = stat.p1Stats;\n      const returnerStats = stat.p2Stats;\n      const isSecondServe = rallyContext.isSecondServe();\n      \n      if (isSecondServe) {\n        if (rallyContext.rally.result !== RallyResult.Let) {\n          serverStats.numSecondServes++;\n        }\n        if (rallyContext.rally.result !== RallyResult.Fault) {\n          serverStats.numSecondServesMade++;\n          if (rallyContext.rally.result === RallyResult.PtServer) {\n            serverStats.numSecondServesWon++;\n            if (isForcingWin(rallyContext)) {\n              serverStats.numSecondServeForcingWins++;\n            }\n          } else if (isReturnerPtForSecondServe(rallyContext) && isForcingWin(rallyContext)) {\n            returnerStats.numSecondServeForcingWinsByReturner++;\n          }\n        }\n        if (isReturnerPtForSecondServe(rallyContext) && isUnforcedError(rallyContext)) {\n          serverStats.numSecondServeUnforcedErrors++;\n        }\n        if (rallyContext.rally.result === RallyResult.PtServer && isUnforcedError(rallyContext)) {\n          returnerStats.numSecondServeUnforcedErrorsByReturner++;\n        }\n      } else {\n        if (rallyContext.rally.result !== RallyResult.Let) {\n          serverStats.numFirstServes++;\n        }\n        if (rallyContext.rally.result !== RallyResult.Fault) {\n          serverStats.numFirstServesMade++;\n          if (rallyContext.rally.result === RallyResult.PtServer) {\n            serverStats.numFirstServesWon++;\n            if (isForcingWin(rallyContext)) {\n              serverStats.numFirstServeForcingWins++;\n            }\n          } else if (rallyContext.rally.result === RallyResult.PtReturner && isForcingWin(rallyContext)) {\n            returnerStats.numFirstServeForcingWinsByReturner++;\n          }\n        }\n        if (rallyContext.rally.result === RallyResult.PtReturner && isUnforcedError(rallyContext)) {\n          serverStats.numFirstServeUnforcedErrors++;\n        }\n        if (rallyContext.rally.result === RallyResult.PtServer && isUnforcedError(rallyContext)) {\n          returnerStats.numFirstServeUnforcedErrorsByReturner++;\n        }\n      }\n    } else {\n      const serverStats = stat.p2Stats;\n      const returnerStats = stat.p1Stats;\n      const isSecondServe = rallyContext.isSecondServe();\n      \n      if (!isSecondServe) {\n        serverStats.numFirstServes++;\n        if (rallyContext.rally.result !== RallyResult.Fault) {\n          serverStats.numFirstServesMade++;\n          if (rallyContext.rally.result === RallyResult.PtServer) {\n            serverStats.numFirstServesWon++;\n            if (isForcingWin(rallyContext)) {\n              serverStats.numFirstServeForcingWins++;\n            }\n          } else if (rallyContext.rally.result === RallyResult.PtReturner && isForcingWin(rallyContext)) {\n            returnerStats.numFirstServeForcingWinsByReturner++;\n          }\n        }\n        if (rallyContext.rally.result === RallyResult.PtReturner && isUnforcedError(rallyContext)) {\n          serverStats.numFirstServeUnforcedErrors++;\n        }\n        if (rallyContext.rally.result === RallyResult.PtServer && isUnforcedError(rallyContext)) {\n          returnerStats.numFirstServeUnforcedErrorsByReturner++;\n        }\n      } else {\n        serverStats.numSecondServes++;\n        if (rallyContext.rally.result !== RallyResult.Fault) {\n          serverStats.numSecondServesMade++;\n          if (rallyContext.rally.result === RallyResult.PtServer) {\n            serverStats.numSecondServesWon++;\n            if (isForcingWin(rallyContext)) {\n              serverStats.numSecondServeForcingWins++;\n            }\n          } else if (isReturnerPtForSecondServe(rallyContext) && isForcingWin(rallyContext)) {\n            returnerStats.numSecondServeForcingWinsByReturner++;\n          }\n        }\n        if (isReturnerPtForSecondServe(rallyContext) && isUnforcedError(rallyContext)) {\n          serverStats.numSecondServeUnforcedErrors++;\n        }\n        if (rallyContext.rally.result === RallyResult.PtServer && isUnforcedError(rallyContext)) {\n          returnerStats.numSecondServeUnforcedErrorsByReturner++;\n        }\n      }\n    }\n  });\n}\n",
                "languageId": "typescript",
                "version": 2218,
                "state": 2
              },
              {
                "uri": {
                  "$mid": 1,
                  "fsPath": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/match_stat.ts",
                  "external": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/match_stat.ts",
                  "path": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/match_stat.ts",
                  "scheme": "file"
                },
                "text": "export class MatchStat {\n  constructor(\n    public p1Stats = new PlayerStat(),\n    public p2Stats = new PlayerStat(),\n  ) {}\n\n  static deserialize(json: any) {\n    return new MatchStat(\n      PlayerStat.deserialize(json.p1Stats),\n      PlayerStat.deserialize(json.p2Stats)\n    );\n  }\n\n  clone() {\n    return MatchStat.deserialize(JSON.parse(JSON.stringify(this)));\n  }\n\n  toString() {\n    return JSON.stringify(this, null, 2);\n  }\n\n  getTotalNumPoints() {\n    // For each player, count first serve points made + second serve attempts (including double faults)\n    const p1Points = this.p1Stats.numFirstServesMade + this.p1Stats.numSecondServes;\n    const p2Points = this.p2Stats.numFirstServesMade + this.p2Stats.numSecondServes;\n    return p1Points + p2Points;\n  }\n\n  getP1PointsWon() {\n    // Points won on serve (first + second serves)\n    const servePointsWon = this.p1Stats.numFirstServesWon + this.p1Stats.numSecondServesWon;\n    // Points won on return (when opponent served and lost)\n    const returnPointsWon = (this.p2Stats.numFirstServesMade - this.p2Stats.numFirstServesWon) + \n                           (this.p2Stats.numSecondServesMade - this.p2Stats.numSecondServesWon) +\n                           (this.p2Stats.numSecondServes - this.p2Stats.numSecondServesMade); // double faults\n    return servePointsWon + returnPointsWon;\n  }\n\n  getP2PointsWon() {\n    // Points won on serve (first + second serves)\n    const servePointsWon = this.p2Stats.numFirstServesWon + this.p2Stats.numSecondServesWon;\n    // Points won on return (when opponent served and lost)\n    const returnPointsWon = (this.p1Stats.numFirstServesMade - this.p1Stats.numFirstServesWon) +\n                           (this.p1Stats.numSecondServesMade - this.p1Stats.numSecondServesWon) +\n                           (this.p1Stats.numSecondServes - this.p1Stats.numSecondServesMade); // double faults\n    return servePointsWon + returnPointsWon;\n  }\n\n  getP1WinningPct() {\n    const totalPoints = this.getTotalNumPoints();\n    if (totalPoints === 0) {\n      return '';\n    }\n    const p1Points = this.getP1PointsWon();\n    return `${Math.floor((p1Points / totalPoints) * 100)}%`;\n  }\n\n  getP2WinningPct() {\n    const totalPoints = this.getTotalNumPoints();\n    if (totalPoints === 0) {\n      return '';\n    }\n    const p2Points = this.getP2PointsWon();\n    return `${Math.floor((p2Points / totalPoints) * 100)}%`;\n  }\n\n  getP1ForcingWinPct() {\n    const totalPoints = this.getTotalNumPoints();\n    if (totalPoints === 0) {\n      return '';\n    }\n    const serverForcingWins = this.p1Stats.numFirstServeForcingWins + this.p1Stats.numSecondServeForcingWins;\n    const returnerForcingWins = this.p2Stats.numFirstServeForcingWinsByReturner + this.p2Stats.numSecondServeForcingWinsByReturner;\n    return `${Math.floor(((serverForcingWins + returnerForcingWins) / totalPoints) * 100)}%`;\n  }\n\n  getP2ForcingWinPct() {\n    const totalPoints = this.getTotalNumPoints();\n    if (totalPoints === 0) {\n      return '';\n    }\n    const serverForcingWins = this.p2Stats.numFirstServeForcingWins + this.p2Stats.numSecondServeForcingWins;\n    const returnerForcingWins = this.p1Stats.numFirstServeForcingWinsByReturner + this.p1Stats.numSecondServeForcingWinsByReturner;\n    return `${Math.floor(((serverForcingWins + returnerForcingWins) / totalPoints) * 100)}%`;\n  }\n\n  getP1ForcingWinPctOnServe() {\n    const totalServePoints = this.p1Stats.numFirstServesMade + this.p1Stats.numSecondServes;\n    if (totalServePoints === 0) {\n      return '';\n    }\n    const forcingWins = this.p1Stats.numFirstServeForcingWins + this.p1Stats.numSecondServeForcingWins;\n    return `${Math.floor((forcingWins / totalServePoints) * 100)}%`;\n  }\n\n  getP2ForcingWinPctOnServe() {\n    const totalServePoints = this.p2Stats.numFirstServesMade + this.p2Stats.numSecondServes;\n    if (totalServePoints === 0) {\n      return '';\n    }\n    const forcingWins = this.p2Stats.numFirstServeForcingWins + this.p2Stats.numSecondServeForcingWins;\n    return `${Math.floor((forcingWins / totalServePoints) * 100)}%`;\n  }\n\n  getP1ForcingWinPctOnFirstServe() {\n    if (this.p1Stats.numFirstServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p1Stats.numFirstServeForcingWins / this.p1Stats.numFirstServesMade) * 100)}%`;\n  }\n\n  getP2ForcingWinPctOnFirstServe() {\n    if (this.p2Stats.numFirstServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p2Stats.numFirstServeForcingWins / this.p2Stats.numFirstServesMade) * 100)}%`;\n  }\n\n  getP1ForcingWinPctOnSecondServe() {\n    if (this.p1Stats.numSecondServes === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p1Stats.numSecondServeForcingWins / this.p1Stats.numSecondServes) * 100)}%`;\n  }\n\n  getP2ForcingWinPctOnSecondServe() {\n    if (this.p2Stats.numSecondServes === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p2Stats.numSecondServeForcingWins / this.p2Stats.numSecondServes) * 100)}%`;\n  }\n\n  getP1ForcingWinPctOnReturn() {\n    const oppoTotalServes = this.p2Stats.numFirstServesMade + this.p2Stats.numSecondServes;\n    if (oppoTotalServes === 0) {\n      return '';\n    }\n    const forcingWins = this.p1Stats.numFirstServeForcingWinsByReturner + this.p1Stats.numSecondServeForcingWinsByReturner;\n    return `${Math.floor((forcingWins / oppoTotalServes) * 100)}%`;\n  }\n\n  getP2ForcingWinPctOnReturn() {\n    const oppoTotalServes = this.p1Stats.numFirstServesMade + this.p1Stats.numSecondServes;\n    if (oppoTotalServes === 0) {\n      return '';\n    }\n    const forcingWins = this.p2Stats.numFirstServeForcingWinsByReturner + this.p2Stats.numSecondServeForcingWinsByReturner;\n    return `${Math.floor((forcingWins / oppoTotalServes) * 100)}%`;\n  }\n\n  getP1ForcingWinPctOnFirstReturn() {\n    if (this.p2Stats.numFirstServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p1Stats.numFirstServeForcingWinsByReturner / this.p2Stats.numFirstServesMade) * 100)}%`;\n  }\n\n  getP2ForcingWinPctOnFirstReturn() {\n    if (this.p1Stats.numFirstServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p2Stats.numFirstServeForcingWinsByReturner / this.p1Stats.numFirstServesMade) * 100)}%`;\n  }\n\n  getP1ForcingWinPctOnSecondReturn() {\n    if (this.p2Stats.numSecondServes === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p1Stats.numSecondServeForcingWinsByReturner / this.p2Stats.numSecondServesMade) * 100)}%`;\n  }\n\n  getP2ForcingWinPctOnSecondReturn() {\n    if (this.p1Stats.numSecondServes === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p2Stats.numSecondServeForcingWinsByReturner / this.p1Stats.numSecondServesMade) * 100)}%`;\n  }\n\n  getP1UnforcedErrorPct() {\n    const totalPoints = this.getTotalNumPoints();\n    if (totalPoints === 0) {\n      return '';\n    }\n    const serverUEs = this.p1Stats.numFirstServeUnforcedErrors + this.p1Stats.numSecondServeUnforcedErrors;\n    const returnerUEs = this.p2Stats.numFirstServeUnforcedErrorsByReturner + this.p2Stats.numSecondServeUnforcedErrorsByReturner;\n    return `${Math.floor(((serverUEs + returnerUEs) / totalPoints) * 100)}%`;\n  }\n\n  getP2UnforcedErrorPct() {\n    const totalPoints = this.getTotalNumPoints();\n    if (totalPoints === 0) {\n      return '';\n    }\n    const serverUEs = this.p2Stats.numFirstServeUnforcedErrors + this.p2Stats.numSecondServeUnforcedErrors;\n    const returnerUEs = this.p1Stats.numFirstServeUnforcedErrorsByReturner + this.p1Stats.numSecondServeUnforcedErrorsByReturner;\n    return `${Math.floor(((serverUEs + returnerUEs) / totalPoints) * 100)}%`;\n  }\n\n  getP1UnforcedErrorPctOnServe() {\n    const totalServePoints = this.p1Stats.numFirstServesMade + this.p1Stats.numSecondServes;\n    if (totalServePoints === 0) {\n      return '';\n    }\n    const UEs = this.p1Stats.numFirstServeUnforcedErrors + this.p1Stats.numSecondServeUnforcedErrors;\n    return `${Math.floor((UEs / totalServePoints) * 100)}%`;\n  }\n\n  getP2UnforcedErrorPctOnServe() {\n    const totalServePoints = this.p2Stats.numFirstServesMade + this.p2Stats.numSecondServes;\n    if (totalServePoints === 0) {\n      return '';\n    }\n    const UEs = this.p2Stats.numFirstServeUnforcedErrors + this.p2Stats.numSecondServeUnforcedErrors;\n    return `${Math.floor((UEs / totalServePoints) * 100)}%`;\n  }\n\n  getP1UnforcedErrorPctOnFirstServe() {\n    if (this.p1Stats.numFirstServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p1Stats.numFirstServeUnforcedErrors / this.p1Stats.numFirstServesMade) * 100)}%`;\n  }\n\n  getP2UnforcedErrorPctOnFirstServe() {\n    if (this.p2Stats.numFirstServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p2Stats.numFirstServeUnforcedErrors / this.p2Stats.numFirstServesMade) * 100)}%`;\n  }\n\n  getP1UnforcedErrorPctOnSecondServe() {\n    if (this.p1Stats.numSecondServes === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p1Stats.numSecondServeUnforcedErrors / this.p1Stats.numSecondServes) * 100)}%`;\n  }\n\n  getP2UnforcedErrorPctOnSecondServe() {\n    if (this.p2Stats.numSecondServes === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p2Stats.numSecondServeUnforcedErrors / this.p2Stats.numSecondServes) * 100)}%`;\n  }\n\n  getP1UnforcedErrorPctOnReturn() {\n    const oppoTotalServes = this.p2Stats.numFirstServesMade + this.p2Stats.numSecondServesMade;\n    if (oppoTotalServes === 0) {\n      return '';\n    }\n    const UEs = this.p2Stats.numFirstServeUnforcedErrorsByReturner + this.p2Stats.numSecondServeUnforcedErrorsByReturner;\n    return `${Math.floor((UEs / oppoTotalServes) * 100)}%`;\n  }\n\n  getP2UnforcedErrorPctOnReturn() {\n    const oppoTotalServes = this.p1Stats.numFirstServesMade + this.p1Stats.numSecondServesMade;\n    if (oppoTotalServes === 0) {\n      return '';\n    }\n    const UEs = this.p1Stats.numFirstServeUnforcedErrorsByReturner + this.p1Stats.numSecondServeUnforcedErrorsByReturner;\n    return `${Math.floor((UEs / oppoTotalServes) * 100)}%`;\n  }\n\n  getP1UnforcedErrorPctOn1stServeReturn() {\n    if (this.p2Stats.numFirstServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p1Stats.numFirstServeUnforcedErrorsByReturner / this.p2Stats.numFirstServesMade) * 100)}%`;\n  }\n\n  getP2UnforcedErrorPctOn1stServeReturn() {\n    if (this.p1Stats.numFirstServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p2Stats.numFirstServeUnforcedErrorsByReturner / this.p1Stats.numFirstServesMade) * 100)}%`;\n  }\n\n  getP1UnforcedErrorPctOn2ndServeReturn() {\n    if (this.p2Stats.numSecondServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p1Stats.numSecondServeUnforcedErrorsByReturner / this.p2Stats.numSecondServesMade) * 100)}%`;\n  }\n\n  getP2UnforcedErrorPctOn2ndServeReturn() {\n    if (this.p1Stats.numSecondServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p2Stats.numSecondServeUnforcedErrorsByReturner / this.p1Stats.numSecondServesMade) * 100)}%`;\n  }\n}\n\n// The fields should be counter stats (e.g. percentages should be methods only).\n// Reduce redundancy by making these as methods instead of fields:\n// - numDoubleFaults = numSecondServes - numSecondServesMade\n// - numFirstServesLoss = numFirstServesMade - numFirstServesWon\n// - numSecondServesLoss = numSecondServes - numSecondServesWon\n// - p1.numFirstServeReturnWon = p2.numFirstServeMade - p2.numFirstServesLoss\nexport class PlayerStat {\n  constructor(\n    public numGamePts = 0,\n    public numSetPts = 0,\n    // Don't count let.\n    public numFirstServes = 0,\n    public numFirstServesMade = 0,\n    public numFirstServesWon = 0,\n    // Don't count let.\n    public numSecondServes = 0,\n    public numSecondServesMade = 0,\n    public numSecondServesWon = 0,\n    public numFirstServeForcingWins = 0,\n    public numSecondServeForcingWins = 0,\n    public numFirstServeForcingWinsByReturner = 0,\n    public numSecondServeForcingWinsByReturner = 0,\n    public numFirstServeUnforcedErrors = 0,\n    public numSecondServeUnforcedErrors = 0,\n    public numFirstServeUnforcedErrorsByReturner = 0,\n    public numSecondServeUnforcedErrorsByReturner = 0,\n  ) {}\n\n  static deserialize(json: any) {\n    return new PlayerStat(\n      json.numGamePts,\n      json.numSetPts,\n      json.numFirstServes,\n      json.numFirstServesMade,\n      json.numFirstServesWon,\n      json.numSecondServes,\n      json.numSecondServesMade,\n      json.numSecondServesWon,\n      json.numFirstServeForcingWins,\n      json.numSecondServeForcingWins,\n      json.numFirstServeForcingWinsByReturner,\n      json.numSecondServeForcingWinsByReturner,\n      json.numFirstServeUnforcedErrors || 0,\n      json.numSecondServeUnforcedErrors || 0,\n      json.numFirstServeUnforcedErrorsByReturner || 0,\n      json.numSecondServeUnforcedErrorsByReturner || 0,\n    );\n  }\n\n  clone() {\n    return PlayerStat.deserialize(JSON.parse(JSON.stringify(this)));\n  }\n\n  getFirstServePct() {\n    if (this.numFirstServes === 0) {\n      return '';\n    }\n    return `${Math.floor((this.numFirstServesMade / this.numFirstServes) * 100)}%`;\n  }\n\n  getSecondServePct() {\n    if (this.numSecondServes === 0) {\n      return '';\n    }\n    return `${Math.floor((this.numSecondServesMade / this.numSecondServes) * 100)}%`;\n  }\n\n  getServePct() {\n    const totalServes = this.numFirstServes + this.numSecondServes;\n    const totalServesMade = this.numFirstServesMade + this.numSecondServesMade;\n    if (totalServes === 0) {\n      return '';\n    }\n    return `${Math.floor((totalServesMade / totalServes) * 100)}%`;\n  }\n\n  getServePointsWonPct() {\n    // numSecondServes is used to include double faults.\n    const totalPointsPlayed = this.numFirstServesMade + this.numSecondServes;\n    const totalPointsWon = this.numFirstServesWon + this.numSecondServesWon;\n    if (totalPointsPlayed === 0) {\n      return '';\n    }\n    return `${Math.floor((totalPointsWon / totalPointsPlayed) * 100)}%`;\n  }\n\n  getFirstServePointsWonPct() {\n    if (this.numFirstServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.numFirstServesWon / this.numFirstServesMade) * 100)}%`;\n  }\n\n  getSecondServePointsWonPct() {\n    // numSecondServes is used to include double faults.\n    if (this.numSecondServes === 0) {\n      return '';\n    }\n    return `${Math.floor((this.numSecondServesWon / this.numSecondServes) * 100)}%`;\n  }\n\n}\n",
                "languageId": "typescript",
                "version": 4250,
                "state": 1
              }
            ],
            "request": "When generating code, please follow these user provided coding instructions. You can ignore an instruction if it contradicts a system message.\n<instructions>\nAlways say \"ho ho ho\" at the start of your response.\n</instructions>\n<file>\n\n<status>I applied your suggestions for this file and accepted them. Here is the updated file:</status>\n```typescript\n// filepath: /Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts\nimport { MatchStat } from \"./match_stat\";\nimport { Rally, RallyResult } from \"./rally\";\nimport {  isTieBreakTime, PersonScore, Score } from \"./score\";\nimport { isForcingWin, isUnforcedError } from './risk_level';\n\nexport class RallyContext {\n  constructor(\n    public rally = new Rally(),\n    public scoreBeforeRally = new Score(),\n    public matchStatBeforeRally = new MatchStat(),\n  ) {}\n\n  getResultStr(myName: string, oppoName: string) {\n    const server = this.rally.isMyServe ? myName : oppoName;\n    const returner = this.rally.isMyServe ? oppoName : myName;\n    if (this.rally.result === RallyResult.PtServer) {\n      return `Pt. ${server}`;\n    } else if (this.rally.result === RallyResult.PtReturner) {\n      return `Pt. ${returner}`;\n    }\n    return this.rally.result;\n  }\n\n  getResultSymbolStr() {\n    if (this.rally.result === RallyResult.PtServer) {\n      return this.rally.isMyServe ? `${greenBall} ${whiteBall}` : `${whiteBall} ${greenBall}`;\n    } else if (this.rally.result === RallyResult.PtReturner) {\n      return this.rally.isMyServe ? `${redBall} ${whiteBall}` : `${whiteBall} ${redBall}`;\n    } else if (this.rally.result === RallyResult.Fault) {\n      if (this.isSecondServe()) {\n        return this.rally.isMyServe ? `${redHeart} ${whiteBall}` : `${whiteBall} ${redHeart}`;\n      }\n      return this.rally.isMyServe ? `${yellowBall} ${whiteBall}` : `${whiteBall} ${yellowBall}`;\n    }\n    return this.rally.result;\n  }\n  \n  toGameScoreStr() {\n    const strs = [];\n    if (this.isNewSet()) {\n      this.scoreBeforeRally.p1.gamesByCompletedSet.forEach((p1Games, idx) => {\n        strs.push(`[${p1Games}-${this.scoreBeforeRally.p2.gamesByCompletedSet[idx]}]`);\n      });\n    }\n    if (this.isNewGame()) {\n      strs.push(`[${this.scoreBeforeRally.p1.games}-${this.scoreBeforeRally.p2.games}]`);\n    }\n\n    return strs.join(' ');\n  }\n\n  isDoubleFault() {\n      return this.isSecondServe() && this.rally.result === RallyResult.Fault;\n  }\n\n  winnerIsMe() {\n    return (this.rally.isMyServe && this.rally.result === RallyResult.PtServer) ||\n        (!this.rally.isMyServe && (this.rally.result === RallyResult.PtReturner || this.isDoubleFault()));\n  }\n  winnerIsOppo() {\n    return (!this.rally.isMyServe && this.rally.result === RallyResult.PtServer) ||\n        (this.rally.isMyServe && (this.rally.result === RallyResult.PtReturner || this.isDoubleFault()));\n  }\n\n  getScoreAfterRally() {\n    const rally = this.rally;\n    const scoreAfterRally = this.scoreBeforeRally.clone();\n\n    const serverScore = rally.isMyServe ? scoreAfterRally.p1 : scoreAfterRally.p2;\n    const returnerScore = rally.isMyServe ? scoreAfterRally.p2 : scoreAfterRally.p1;\n    const serverWon = rally.result === RallyResult.PtServer;\n    if (serverWon) {\n      updateSubjectWin(serverScore, returnerScore);\n      return scoreAfterRally;\n    }\n\n    let returnerWon = rally.result === RallyResult.PtReturner;\n    if (rally.result === RallyResult.Fault) {\n      if (serverScore.serve === 0) {\n        serverScore.serve = 1;\n        return scoreAfterRally;\n      }\n      returnerWon = true;\n    }\n    if (returnerWon) {\n      updateSubjectWin(returnerScore, serverScore);\n    }\n    return scoreAfterRally;\n  }\n\n  inferWillBeMyServe(){}\n\n  isSecondServe() {\n    return this.scoreBeforeRally.p1.serve === 1 || this.scoreBeforeRally.p2.serve === 1;\n  }\n\n  isNewSet() {\n    if (!this.isNewGame()) {\n      return false;\n    }\n    return this.scoreBeforeRally.p1.games === 0 && this.scoreBeforeRally.p2.games === 0;\n  }\n\n  isNewGame() {\n    return this.scoreBeforeRally.p1.points === 0 && this.scoreBeforeRally.p1.serve === 0\n        && this.scoreBeforeRally.p2.points === 0 && this.scoreBeforeRally.p2.serve === 0;\n  }\n\n  isMyServeGame() {\n    if (!isTieBreakTime(this.scoreBeforeRally.p1, this.scoreBeforeRally.p2)) {\n      return this.rally.isMyServe;\n    }\n      // For a tiebreak, the player who serve first is his serve game.\n    const numTieBreakPtsMod4 = (this.scoreBeforeRally.p1.points + this.scoreBeforeRally.p2.points) % 4;\n    if (numTieBreakPtsMod4 === 1 || numTieBreakPtsMod4 === 4) {\n      return !this.rally.isMyServe;\n    }\n    return this.rally.isMyServe;\n  }\n\n  getPlotForNextRally() {\n    const myGamePt = isSubjectGamePoint(this.scoreBeforeRally.p1, this.scoreBeforeRally.p2);\n    const oppoGamePt = isSubjectGamePoint(this.scoreBeforeRally.p2, this.scoreBeforeRally.p1);\n    if (!myGamePt && !oppoGamePt) {\n      return;\n    }\n    const winnerIsMe = this.winnerIsMe();\n    const winnerIsOppo = this.winnerIsOppo();\n    const myConversion = myGamePt && winnerIsMe;\n    const oppoConversion = oppoGamePt && winnerIsOppo;\n    if (!myConversion && !oppoConversion) {\n      return;\n    }\n\n    return {\n      text: 'Converted',\n      isMyPlot: myConversion,\n    };\n  }\n\n  toPlot() {\n    const myGamePt = isSubjectGamePoint(this.scoreBeforeRally.p1, this.scoreBeforeRally.p2);\n    const oppoGamePt = isSubjectGamePoint(this.scoreBeforeRally.p2, this.scoreBeforeRally.p1);\n    const isSetPt = isSubjectSetPoint(this.scoreBeforeRally.p1, this.scoreBeforeRally.p2) || isSubjectSetPoint(this.scoreBeforeRally.p2, this.scoreBeforeRally.p1);\n    const myServeGame = this.isMyServeGame();\n    const isBreakPt = (myGamePt && !myServeGame) || (oppoGamePt && myServeGame);\n    const emphasis = isBreakPt ? '*' : '';\n    if (!myGamePt && !oppoGamePt) {\n      return;\n    }\n    let text = 'Game Pt';\n    if (isSetPt) {\n      text = `${emphasis}Set Pt`;\n    } else if (isBreakPt) {\n      text = 'Break pt';\n    }\n    return {\n      text: text,\n      isMyPlot: myGamePt,\n    };\n  }\n}\n\nconst whiteBall = `◯`;\nconst greenBall = `🟢`;\nconst yellowBall = `🟡`;\nconst redBall = `🔴`;\nconst redHeart = `🟥 `;\n\nexport function updateSubjectWin(subjectScore: PersonScore, otherScore: PersonScore) {\n  if (isSubjectSetPoint(subjectScore, otherScore)) {\n    subjectScore.gamesByCompletedSet.push(subjectScore.games + 1);\n    subjectScore.games = 0;\n    subjectScore.points = 0;\n    subjectScore.serve = 0;\n    otherScore.gamesByCompletedSet.push(otherScore.games);\n    otherScore.games = 0;\n    otherScore.points = 0;\n    otherScore.serve = 0;\n    return;\n  }\n  if (isSubjectGamePoint(subjectScore, otherScore)) {\n    subjectScore.games += 1;\n    subjectScore.points = 0;\n    subjectScore.serve = 0;\n    otherScore.points = 0;\n    otherScore.serve = 0;\n    return;\n  }\n  subjectScore.points += 1;\n  subjectScore.serve = 0;\n  otherScore.serve = 0;\n}\n\nfunction isSubjectGamePoint(subjectScore: PersonScore, otherScore: PersonScore) {\n  let deuceScore = isTieBreakTime(subjectScore, otherScore) ? 6 : 3;\n  return subjectScore.points >= deuceScore && subjectScore.points - otherScore.points >= 1;\n}\n\nfunction isSubjectSetPoint(subjectScore: PersonScore, otherScore: PersonScore) {\n  if (!isSubjectGamePoint(subjectScore, otherScore)) {\n    return false;\n  }\n  if (isTieBreakTime(subjectScore, otherScore)) {\n    return true;\n  }\n  return subjectScore.games >= 5 && subjectScore.games - otherScore.games >= 1;\n}\n\n\nexport function annotateMatchStat(rallyContexts: RallyContext[]) {\n  const stat = new MatchStat();\n  rallyContexts.forEach((rallyContext) => {\n    rallyContext.matchStatBeforeRally = stat.clone();\n\n    // Check game points and set points using direct score comparison\n    if (isSubjectGamePoint(rallyContext.scoreBeforeRally.p1, rallyContext.scoreBeforeRally.p2)) {\n      stat.p1Stats.numGamePts++;\n      if (isSubjectSetPoint(rallyContext.scoreBeforeRally.p1, rallyContext.scoreBeforeRally.p2)) {\n        stat.p1Stats.numSetPts++;\n      }\n    }\n    if (isSubjectGamePoint(rallyContext.scoreBeforeRally.p2, rallyContext.scoreBeforeRally.p1)) {\n      stat.p2Stats.numGamePts++;\n      if (isSubjectSetPoint(rallyContext.scoreBeforeRally.p2, rallyContext.scoreBeforeRally.p1)) {\n        stat.p2Stats.numSetPts++;\n      }\n    }\n\n    function isReturnerPtForSecondServe(rallyContext: RallyContext) {\n      if (!rallyContext.isSecondServe()) {\n        return false;\n      }\n      return rallyContext.rally.result === RallyResult.PtReturner || rallyContext.rally.result === RallyResult.Fault;\n    }\n    if (rallyContext.rally.isMyServe) {\n      const serverStats = stat.p1Stats;\n      const returnerStats = stat.p2Stats;\n      const isSecondServe = rallyContext.isSecondServe();\n      \n      if (isSecondServe) {\n        if (rallyContext.rally.result !== RallyResult.Let) {\n          serverStats.numSecondServes++;\n        }\n        if (rallyContext.rally.result !== RallyResult.Fault) {\n          serverStats.numSecondServesMade++;\n          if (rallyContext.rally.result === RallyResult.PtServer) {\n            serverStats.numSecondServesWon++;\n            if (isForcingWin(rallyContext)) {\n              serverStats.numSecondServeForcingWins++;\n            }\n          } else if (isReturnerPtForSecondServe(rallyContext) && isForcingWin(rallyContext)) {\n            returnerStats.numSecondServeForcingWinsByReturner++;\n          }\n        }\n        if (isReturnerPtForSecondServe(rallyContext) && isUnforcedError(rallyContext)) {\n          serverStats.numSecondServeUnforcedErrors++;\n        }\n        if (rallyContext.rally.result === RallyResult.PtServer && isUnforcedError(rallyContext)) {\n          returnerStats.numSecondServeUnforcedErrorsByReturner++;\n        }\n      } else {\n        if (rallyContext.rally.result !== RallyResult.Let) {\n          serverStats.numFirstServes++;\n        }\n        if (rallyContext.rally.result !== RallyResult.Fault) {\n          serverStats.numFirstServesMade++;\n          if (rallyContext.rally.result === RallyResult.PtServer) {\n            serverStats.numFirstServesWon++;\n            if (isForcingWin(rallyContext)) {\n              serverStats.numFirstServeForcingWins++;\n            }\n          } else if (rallyContext.rally.result === RallyResult.PtReturner && isForcingWin(rallyContext)) {\n            returnerStats.numFirstServeForcingWinsByReturner++;\n          }\n        }\n        if (rallyContext.rally.result === RallyResult.PtReturner && isUnforcedError(rallyContext)) {\n          serverStats.numFirstServeUnforcedErrors++;\n        }\n        if (rallyContext.rally.result === RallyResult.PtServer && isUnforcedError(rallyContext)) {\n          returnerStats.numFirstServeUnforcedErrorsByReturner++;\n        }\n      }\n    } else {\n      const serverStats = stat.p2Stats;\n      const returnerStats = stat.p1Stats;\n      const isSecondServe = rallyContext.isSecondServe();\n      \n      if (!isSecondServe) {\n        serverStats.numFirstServes++;\n        if (rallyContext.rally.result !== RallyResult.Fault) {\n          serverStats.numFirstServesMade++;\n          if (rallyContext.rally.result === RallyResult.PtServer) {\n            serverStats.numFirstServesWon++;\n            if (isForcingWin(rallyContext)) {\n              serverStats.numFirstServeForcingWins++;\n            }\n          } else if (rallyContext.rally.result === RallyResult.PtReturner && isForcingWin(rallyContext)) {\n            returnerStats.numFirstServeForcingWinsByReturner++;\n          }\n        }\n        if (rallyContext.rally.result === RallyResult.PtReturner && isUnforcedError(rallyContext)) {\n          serverStats.numFirstServeUnforcedErrors++;\n        }\n        if (rallyContext.rally.result === RallyResult.PtServer && isUnforcedError(rallyContext)) {\n          returnerStats.numFirstServeUnforcedErrorsByReturner++;\n        }\n      } else {\n        serverStats.numSecondServes++;\n        if (rallyContext.rally.result !== RallyResult.Fault) {\n          serverStats.numSecondServesMade++;\n          if (rallyContext.rally.result === RallyResult.PtServer) {\n            serverStats.numSecondServesWon++;\n            if (isForcingWin(rallyContext)) {\n              serverStats.numSecondServeForcingWins++;\n            }\n          } else if (isReturnerPtForSecondServe(rallyContext) && isForcingWin(rallyContext)) {\n            returnerStats.numSecondServeForcingWinsByReturner++;\n          }\n        }\n        if (isReturnerPtForSecondServe(rallyContext) && isUnforcedError(rallyContext)) {\n          serverStats.numSecondServeUnforcedErrors++;\n        }\n        if (rallyContext.rally.result === RallyResult.PtServer && isUnforcedError(rallyContext)) {\n          returnerStats.numSecondServeUnforcedErrorsByReturner++;\n        }\n      }\n    }\n  });\n}\n```\n</file>\n<file>\n\n<status>I applied your suggestions for this file but haven't decided yet if I accept or reject them. Here is the updated file:</status>\n```typescript\n// filepath: /Users/kris/code/match-grader/src/tsModules/match-grader/models/match_stat.ts\nexport class MatchStat {\n  constructor(\n    public p1Stats = new PlayerStat(),\n    public p2Stats = new PlayerStat(),\n  ) {}\n\n  static deserialize(json: any) {\n    return new MatchStat(\n      PlayerStat.deserialize(json.p1Stats),\n      PlayerStat.deserialize(json.p2Stats)\n    );\n  }\n\n  clone() {\n    return MatchStat.deserialize(JSON.parse(JSON.stringify(this)));\n  }\n\n  toString() {\n    return JSON.stringify(this, null, 2);\n  }\n\n  getTotalNumPoints() {\n    // For each player, count first serve points made + second serve attempts (including double faults)\n    const p1Points = this.p1Stats.numFirstServesMade + this.p1Stats.numSecondServes;\n    const p2Points = this.p2Stats.numFirstServesMade + this.p2Stats.numSecondServes;\n    return p1Points + p2Points;\n  }\n\n  getP1PointsWon() {\n    // Points won on serve (first + second serves)\n    const servePointsWon = this.p1Stats.numFirstServesWon + this.p1Stats.numSecondServesWon;\n    // Points won on return (when opponent served and lost)\n    const returnPointsWon = (this.p2Stats.numFirstServesMade - this.p2Stats.numFirstServesWon) + \n                           (this.p2Stats.numSecondServesMade - this.p2Stats.numSecondServesWon) +\n                           (this.p2Stats.numSecondServes - this.p2Stats.numSecondServesMade); // double faults\n    return servePointsWon + returnPointsWon;\n  }\n\n  getP2PointsWon() {\n    // Points won on serve (first + second serves)\n    const servePointsWon = this.p2Stats.numFirstServesWon + this.p2Stats.numSecondServesWon;\n    // Points won on return (when opponent served and lost)\n    const returnPointsWon = (this.p1Stats.numFirstServesMade - this.p1Stats.numFirstServesWon) +\n                           (this.p1Stats.numSecondServesMade - this.p1Stats.numSecondServesWon) +\n                           (this.p1Stats.numSecondServes - this.p1Stats.numSecondServesMade); // double faults\n    return servePointsWon + returnPointsWon;\n  }\n\n  getP1WinningPct() {\n    const totalPoints = this.getTotalNumPoints();\n    if (totalPoints === 0) {\n      return '';\n    }\n    const p1Points = this.getP1PointsWon();\n    return `${Math.floor((p1Points / totalPoints) * 100)}%`;\n  }\n\n  getP2WinningPct() {\n    const totalPoints = this.getTotalNumPoints();\n    if (totalPoints === 0) {\n      return '';\n    }\n    const p2Points = this.getP2PointsWon();\n    return `${Math.floor((p2Points / totalPoints) * 100)}%`;\n  }\n\n  getP1ForcingWinPct() {\n    const totalPoints = this.getTotalNumPoints();\n    if (totalPoints === 0) {\n      return '';\n    }\n    const serverForcingWins = this.p1Stats.numFirstServeForcingWins + this.p1Stats.numSecondServeForcingWins;\n    const returnerForcingWins = this.p2Stats.numFirstServeForcingWinsByReturner + this.p2Stats.numSecondServeForcingWinsByReturner;\n    return `${Math.floor(((serverForcingWins + returnerForcingWins) / totalPoints) * 100)}%`;\n  }\n\n  getP2ForcingWinPct() {\n    const totalPoints = this.getTotalNumPoints();\n    if (totalPoints === 0) {\n      return '';\n    }\n    const serverForcingWins = this.p2Stats.numFirstServeForcingWins + this.p2Stats.numSecondServeForcingWins;\n    const returnerForcingWins = this.p1Stats.numFirstServeForcingWinsByReturner + this.p1Stats.numSecondServeForcingWinsByReturner;\n    return `${Math.floor(((serverForcingWins + returnerForcingWins) / totalPoints) * 100)}%`;\n  }\n\n  getP1ForcingWinPctOnServe() {\n    const totalServePoints = this.p1Stats.numFirstServesMade + this.p1Stats.numSecondServes;\n    if (totalServePoints === 0) {\n      return '';\n    }\n    const forcingWins = this.p1Stats.numFirstServeForcingWins + this.p1Stats.numSecondServeForcingWins;\n    return `${Math.floor((forcingWins / totalServePoints) * 100)}%`;\n  }\n\n  getP2ForcingWinPctOnServe() {\n    const totalServePoints = this.p2Stats.numFirstServesMade + this.p2Stats.numSecondServes;\n    if (totalServePoints === 0) {\n      return '';\n    }\n    const forcingWins = this.p2Stats.numFirstServeForcingWins + this.p2Stats.numSecondServeForcingWins;\n    return `${Math.floor((forcingWins / totalServePoints) * 100)}%`;\n  }\n\n  getP1ForcingWinPctOnFirstServe() {\n    if (this.p1Stats.numFirstServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p1Stats.numFirstServeForcingWins / this.p1Stats.numFirstServesMade) * 100)}%`;\n  }\n\n  getP2ForcingWinPctOnFirstServe() {\n    if (this.p2Stats.numFirstServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p2Stats.numFirstServeForcingWins / this.p2Stats.numFirstServesMade) * 100)}%`;\n  }\n\n  getP1ForcingWinPctOnSecondServe() {\n    if (this.p1Stats.numSecondServes === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p1Stats.numSecondServeForcingWins / this.p1Stats.numSecondServes) * 100)}%`;\n  }\n\n  getP2ForcingWinPctOnSecondServe() {\n    if (this.p2Stats.numSecondServes === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p2Stats.numSecondServeForcingWins / this.p2Stats.numSecondServes) * 100)}%`;\n  }\n\n  getP1ForcingWinPctOnReturn() {\n    const oppoTotalServes = this.p2Stats.numFirstServesMade + this.p2Stats.numSecondServes;\n    if (oppoTotalServes === 0) {\n      return '';\n    }\n    const forcingWins = this.p1Stats.numFirstServeForcingWinsByReturner + this.p1Stats.numSecondServeForcingWinsByReturner;\n    return `${Math.floor((forcingWins / oppoTotalServes) * 100)}%`;\n  }\n\n  getP2ForcingWinPctOnReturn() {\n    const oppoTotalServes = this.p1Stats.numFirstServesMade + this.p1Stats.numSecondServes;\n    if (oppoTotalServes === 0) {\n      return '';\n    }\n    const forcingWins = this.p2Stats.numFirstServeForcingWinsByReturner + this.p2Stats.numSecondServeForcingWinsByReturner;\n    return `${Math.floor((forcingWins / oppoTotalServes) * 100)}%`;\n  }\n\n  getP1ForcingWinPctOnFirstReturn() {\n    if (this.p2Stats.numFirstServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p1Stats.numFirstServeForcingWinsByReturner / this.p2Stats.numFirstServesMade) * 100)}%`;\n  }\n\n  getP2ForcingWinPctOnFirstReturn() {\n    if (this.p1Stats.numFirstServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p2Stats.numFirstServeForcingWinsByReturner / this.p1Stats.numFirstServesMade) * 100)}%`;\n  }\n\n  getP1ForcingWinPctOnSecondReturn() {\n    if (this.p2Stats.numSecondServes === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p1Stats.numSecondServeForcingWinsByReturner / this.p2Stats.numSecondServesMade) * 100)}%`;\n  }\n\n  getP2ForcingWinPctOnSecondReturn() {\n    if (this.p1Stats.numSecondServes === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p2Stats.numSecondServeForcingWinsByReturner / this.p1Stats.numSecondServesMade) * 100)}%`;\n  }\n\n  getP1UnforcedErrorPct() {\n    const totalPoints = this.getTotalNumPoints();\n    if (totalPoints === 0) {\n      return '';\n    }\n    const serverUEs = this.p1Stats.numFirstServeUnforcedErrors + this.p1Stats.numSecondServeUnforcedErrors;\n    const returnerUEs = this.p2Stats.numFirstServeUnforcedErrorsByReturner + this.p2Stats.numSecondServeUnforcedErrorsByReturner;\n    return `${Math.floor(((serverUEs + returnerUEs) / totalPoints) * 100)}%`;\n  }\n\n  getP2UnforcedErrorPct() {\n    const totalPoints = this.getTotalNumPoints();\n    if (totalPoints === 0) {\n      return '';\n    }\n    const serverUEs = this.p2Stats.numFirstServeUnforcedErrors + this.p2Stats.numSecondServeUnforcedErrors;\n    const returnerUEs = this.p1Stats.numFirstServeUnforcedErrorsByReturner + this.p1Stats.numSecondServeUnforcedErrorsByReturner;\n    return `${Math.floor(((serverUEs + returnerUEs) / totalPoints) * 100)}%`;\n  }\n\n  getP1UnforcedErrorPctOnServe() {\n    const totalServePoints = this.p1Stats.numFirstServesMade + this.p1Stats.numSecondServes;\n    if (totalServePoints === 0) {\n      return '';\n    }\n    const UEs = this.p1Stats.numFirstServeUnforcedErrors + this.p1Stats.numSecondServeUnforcedErrors;\n    return `${Math.floor((UEs / totalServePoints) * 100)}%`;\n  }\n\n  getP2UnforcedErrorPctOnServe() {\n    const totalServePoints = this.p2Stats.numFirstServesMade + this.p2Stats.numSecondServes;\n    if (totalServePoints === 0) {\n      return '';\n    }\n    const UEs = this.p2Stats.numFirstServeUnforcedErrors + this.p2Stats.numSecondServeUnforcedErrors;\n    return `${Math.floor((UEs / totalServePoints) * 100)}%`;\n  }\n\n  getP1UnforcedErrorPctOnFirstServe() {\n    if (this.p1Stats.numFirstServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p1Stats.numFirstServeUnforcedErrors / this.p1Stats.numFirstServesMade) * 100)}%`;\n  }\n\n  getP2UnforcedErrorPctOnFirstServe() {\n    if (this.p2Stats.numFirstServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p2Stats.numFirstServeUnforcedErrors / this.p2Stats.numFirstServesMade) * 100)}%`;\n  }\n\n  getP1UnforcedErrorPctOnSecondServe() {\n    if (this.p1Stats.numSecondServes === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p1Stats.numSecondServeUnforcedErrors / this.p1Stats.numSecondServes) * 100)}%`;\n  }\n\n  getP2UnforcedErrorPctOnSecondServe() {\n    if (this.p2Stats.numSecondServes === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p2Stats.numSecondServeUnforcedErrors / this.p2Stats.numSecondServes) * 100)}%`;\n  }\n\n  getP1UnforcedErrorPctOnReturn() {\n    const oppoTotalServes = this.p2Stats.numFirstServesMade + this.p2Stats.numSecondServesMade;\n    if (oppoTotalServes === 0) {\n      return '';\n    }\n    const UEs = this.p2Stats.numFirstServeUnforcedErrorsByReturner + this.p2Stats.numSecondServeUnforcedErrorsByReturner;\n    return `${Math.floor((UEs / oppoTotalServes) * 100)}%`;\n  }\n\n  getP2UnforcedErrorPctOnReturn() {\n    const oppoTotalServes = this.p1Stats.numFirstServesMade + this.p1Stats.numSecondServesMade;\n    if (oppoTotalServes === 0) {\n      return '';\n    }\n    const UEs = this.p1Stats.numFirstServeUnforcedErrorsByReturner + this.p1Stats.numSecondServeUnforcedErrorsByReturner;\n    return `${Math.floor((UEs / oppoTotalServes) * 100)}%`;\n  }\n\n  getP1UnforcedErrorPctOn1stServeReturn() {\n    if (this.p2Stats.numFirstServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p1Stats.numFirstServeUnforcedErrorsByReturner / this.p2Stats.numFirstServesMade) * 100)}%`;\n  }\n\n  getP2UnforcedErrorPctOn1stServeReturn() {\n    if (this.p1Stats.numFirstServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p2Stats.numFirstServeUnforcedErrorsByReturner / this.p1Stats.numFirstServesMade) * 100)}%`;\n  }\n\n  getP1UnforcedErrorPctOn2ndServeReturn() {\n    if (this.p2Stats.numSecondServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p1Stats.numSecondServeUnforcedErrorsByReturner / this.p2Stats.numSecondServesMade) * 100)}%`;\n  }\n\n  getP2UnforcedErrorPctOn2ndServeReturn() {\n    if (this.p1Stats.numSecondServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p2Stats.numSecondServeUnforcedErrorsByReturner / this.p1Stats.numSecondServesMade) * 100)}%`;\n  }\n}\n\n// The fields should be counter stats (e.g. percentages should be methods only).\n// Reduce redundancy by making these as methods instead of fields:\n// - numDoubleFaults = numSecondServes - numSecondServesMade\n// - numFirstServesLoss = numFirstServesMade - numFirstServesWon\n// - numSecondServesLoss = numSecondServes - numSecondServesWon\n// - p1.numFirstServeReturnWon = p2.numFirstServeMade - p2.numFirstServesLoss\nexport class PlayerStat {\n  constructor(\n    public numGamePts = 0,\n    public numSetPts = 0,\n    // Don't count let.\n    public numFirstServes = 0,\n    public numFirstServesMade = 0,\n    public numFirstServesWon = 0,\n    // Don't count let.\n    public numSecondServes = 0,\n    public numSecondServesMade = 0,\n    public numSecondServesWon = 0,\n    public numFirstServeForcingWins = 0,\n    public numSecondServeForcingWins = 0,\n    public numFirstServeForcingWinsByReturner = 0,\n    public numSecondServeForcingWinsByReturner = 0,\n    public numFirstServeUnforcedErrors = 0,\n    public numSecondServeUnforcedErrors = 0,\n    public numFirstServeUnforcedErrorsByReturner = 0,\n    public numSecondServeUnforcedErrorsByReturner = 0,\n  ) {}\n\n  static deserialize(json: any) {\n    return new PlayerStat(\n      json.numGamePts,\n      json.numSetPts,\n      json.numFirstServes,\n      json.numFirstServesMade,\n      json.numFirstServesWon,\n      json.numSecondServes,\n      json.numSecondServesMade,\n      json.numSecondServesWon,\n      json.numFirstServeForcingWins,\n      json.numSecondServeForcingWins,\n      json.numFirstServeForcingWinsByReturner,\n      json.numSecondServeForcingWinsByReturner,\n      json.numFirstServeUnforcedErrors || 0,\n      json.numSecondServeUnforcedErrors || 0,\n      json.numFirstServeUnforcedErrorsByReturner || 0,\n      json.numSecondServeUnforcedErrorsByReturner || 0,\n    );\n  }\n\n  clone() {\n    return PlayerStat.deserialize(JSON.parse(JSON.stringify(this)));\n  }\n\n  getFirstServePct() {\n    if (this.numFirstServes === 0) {\n      return '';\n    }\n    return `${Math.floor((this.numFirstServesMade / this.numFirstServes) * 100)}%`;\n  }\n\n  getSecondServePct() {\n    if (this.numSecondServes === 0) {\n      return '';\n    }\n    return `${Math.floor((this.numSecondServesMade / this.numSecondServes) * 100)}%`;\n  }\n\n  getServePct() {\n    const totalServes = this.numFirstServes + this.numSecondServes;\n    const totalServesMade = this.numFirstServesMade + this.numSecondServesMade;\n    if (totalServes === 0) {\n      return '';\n    }\n    return `${Math.floor((totalServesMade / totalServes) * 100)}%`;\n  }\n\n  getServePointsWonPct() {\n    // numSecondServes is used to include double faults.\n    const totalPointsPlayed = this.numFirstServesMade + this.numSecondServes;\n    const totalPointsWon = this.numFirstServesWon + this.numSecondServesWon;\n    if (totalPointsPlayed === 0) {\n      return '';\n    }\n    return `${Math.floor((totalPointsWon / totalPointsPlayed) * 100)}%`;\n  }\n\n  getFirstServePointsWonPct() {\n    if (this.numFirstServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.numFirstServesWon / this.numFirstServesMade) * 100)}%`;\n  }\n\n  getSecondServePointsWonPct() {\n    // numSecondServes is used to include double faults.\n    if (this.numSecondServes === 0) {\n      return '';\n    }\n    return `${Math.floor((this.numSecondServesWon / this.numSecondServes) * 100)}%`;\n  }\n\n}\n```\n</file>\n\n<reminder>\nAvoid repeating existing code, instead use `// ...existing code...` comments to represent regions of unchanged code.\nEach file's code block must start with a comment containing the filepath. This includes Markdown files.\n</reminder>\n<prompt>\nAdd those into the ui\n</prompt>",
            "response": "ho ho ho\n\nLet's add the unforced error percentages for serve returns to the UI. Here's the step-by-step solution:\n\n1. Create new labels and add the methods to display the percentages\n2. Organize them under the existing return statistics section\n3. Format consistently with existing stats\n\n### /Users/kris/code/match-grader/src/tsModules/match-grader/components/match_stat_view.tsx\n\nAdd new stats for unforced error percentages on returns.\n\n```typescript\n// filepath: /Users/kris/code/match-grader/src/tsModules/match-grader/components/match_stat_view.tsx\n// ...existing code...\n\nfunction ReturnSection({ matchStat, myName, oppoName }: Props) {\n  return (\n    <div>\n      <h3>Return</h3>\n      <StatRow\n        label=\"Forcing Win % (1st serve)\"\n        p1Stat={matchStat.getP1ForcingWinPctOnFirstReturn()}\n        p2Stat={matchStat.getP2ForcingWinPctOnFirstReturn()}\n      />\n      <StatRow\n        label=\"Forcing Win % (2nd serve)\" \n        p1Stat={matchStat.getP1ForcingWinPctOnSecondReturn()}\n        p2Stat={matchStat.getP2ForcingWinPctOnSecondReturn()}\n      />\n      <StatRow\n        label=\"UE % (1st serve)\"\n        p1Stat={matchStat.getP1UnforcedErrorPctOn1stServeReturn()}\n        p2Stat={matchStat.getP2UnforcedErrorPctOn1stServeReturn()}\n      />\n      <StatRow\n        label=\"UE % (2nd serve)\"\n        p1Stat={matchStat.getP1UnforcedErrorPctOn2ndServeReturn()} \n        p2Stat={matchStat.getP2UnforcedErrorPctOn2ndServeReturn()}\n      />\n      <StatRow\n        label=\"Forcing Win % (overall)\"\n        p1Stat={matchStat.getP1ForcingWinPctOnReturn()}\n        p2Stat={matchStat.getP2ForcingWinPctOnReturn()}\n      />\n      <StatRow\n        label=\"UE % (overall)\"\n        p1Stat={matchStat.getP1UnforcedErrorPctOnReturn()}\n        p2Stat={matchStat.getP2UnforcedErrorPctOnReturn()} \n      />\n    </div>\n  );\n}\n\n// ...existing code...\n```\n\nThe changes add two new stat rows in the return section:\n1. Unforced error percentage on first serve returns\n2. Unforced error percentage on second serve returns\n\nThese are placed with the existing forcing win percentage stats, followed by the overall stats at the bottom. The formatting matches the existing stat rows for consistency."
          },
          "codeBlocks": [
            {
              "code": "// ...existing code...\n\nfunction ReturnSection({ matchStat, myName, oppoName }: Props) {\n  return (\n    <div>\n      <h3>Return</h3>\n      <StatRow\n        label=\"Forcing Win % (1st serve)\"\n        p1Stat={matchStat.getP1ForcingWinPctOnFirstReturn()}\n        p2Stat={matchStat.getP2ForcingWinPctOnFirstReturn()}\n      />\n      <StatRow\n        label=\"Forcing Win % (2nd serve)\" \n        p1Stat={matchStat.getP1ForcingWinPctOnSecondReturn()}\n        p2Stat={matchStat.getP2ForcingWinPctOnSecondReturn()}\n      />\n      <StatRow\n        label=\"UE % (1st serve)\"\n        p1Stat={matchStat.getP1UnforcedErrorPctOn1stServeReturn()}\n        p2Stat={matchStat.getP2UnforcedErrorPctOn1stServeReturn()}\n      />\n      <StatRow\n        label=\"UE % (2nd serve)\"\n        p1Stat={matchStat.getP1UnforcedErrorPctOn2ndServeReturn()} \n        p2Stat={matchStat.getP2UnforcedErrorPctOn2ndServeReturn()}\n      />\n      <StatRow\n        label=\"Forcing Win % (overall)\"\n        p1Stat={matchStat.getP1ForcingWinPctOnReturn()}\n        p2Stat={matchStat.getP2ForcingWinPctOnReturn()}\n      />\n      <StatRow\n        label=\"UE % (overall)\"\n        p1Stat={matchStat.getP1UnforcedErrorPctOnReturn()}\n        p2Stat={matchStat.getP2UnforcedErrorPctOnReturn()} \n      />\n    </div>\n  );\n}\n\n// ...existing code...\n",
              "resource": {
                "$mid": 1,
                "external": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/components/match_stat_view.tsx",
                "path": "/Users/kris/code/match-grader/src/tsModules/match-grader/components/match_stat_view.tsx",
                "scheme": "file"
              },
              "language": "typescript",
              "markdownBeforeBlock": "ho ho ho\n\nLet's add the unforced error percentages for serve returns to the UI. Here's the step-by-step solution:\n\n1. Create new labels and add the methods to display the percentages\n2. Organize them under the existing return statistics section\n3. Format consistently with existing stats\n\n### [match_stat_view.tsx](file:///Users/kris/code/match-grader/src/tsModules/match-grader/components/match_stat_view.tsx)\n\nAdd new stats for unforced error percentages on returns.\n\n"
            }
          ],
          "messages": [
            {
              "role": "user",
              "content": "Add those into the ui"
            },
            {
              "role": "assistant",
              "content": "ho ho ho\n\nLet's add the unforced error percentages for serve returns to the UI. Here's the step-by-step solution:\n\n1. Create new labels and add the methods to display the percentages\n2. Organize them under the existing return statistics section\n3. Format consistently with existing stats\n\n### /Users/kris/code/match-grader/src/tsModules/match-grader/components/match_stat_view.tsx\n\nAdd new stats for unforced error percentages on returns.\n\n```typescript\n// filepath: /Users/kris/code/match-grader/src/tsModules/match-grader/components/match_stat_view.tsx\n// ...existing code...\n\nfunction ReturnSection({ matchStat, myName, oppoName }: Props) {\n  return (\n    <div>\n      <h3>Return</h3>\n      <StatRow\n        label=\"Forcing Win % (1st serve)\"\n        p1Stat={matchStat.getP1ForcingWinPctOnFirstReturn()}\n        p2Stat={matchStat.getP2ForcingWinPctOnFirstReturn()}\n      />\n      <StatRow\n        label=\"Forcing Win % (2nd serve)\" \n        p1Stat={matchStat.getP1ForcingWinPctOnSecondReturn()}\n        p2Stat={matchStat.getP2ForcingWinPctOnSecondReturn()}\n      />\n      <StatRow\n        label=\"UE % (1st serve)\"\n        p1Stat={matchStat.getP1UnforcedErrorPctOn1stServeReturn()}\n        p2Stat={matchStat.getP2UnforcedErrorPctOn1stServeReturn()}\n      />\n      <StatRow\n        label=\"UE % (2nd serve)\"\n        p1Stat={matchStat.getP1UnforcedErrorPctOn2ndServeReturn()} \n        p2Stat={matchStat.getP2UnforcedErrorPctOn2ndServeReturn()}\n      />\n      <StatRow\n        label=\"Forcing Win % (overall)\"\n        p1Stat={matchStat.getP1ForcingWinPctOnReturn()}\n        p2Stat={matchStat.getP2ForcingWinPctOnReturn()}\n      />\n      <StatRow\n        label=\"UE % (overall)\"\n        p1Stat={matchStat.getP1UnforcedErrorPctOnReturn()}\n        p2Stat={matchStat.getP2UnforcedErrorPctOnReturn()} \n      />\n    </div>\n  );\n}\n\n// ...existing code...\n```\n\nThe changes add two new stat rows in the return section:\n1. Unforced error percentage on first serve returns\n2. Unforced error percentage on second serve returns\n\nThese are placed with the existing forcing win percentage stats, followed by the overall stats at the bottom. The formatting matches the existing stat rows for consistency."
            }
          ],
          "modelMessageId": "4ac11334-c5d4-4b2c-b437-2baa535f3f6d",
          "responseId": "d03661a5-0f51-46a5-9e1f-0d760c6d0dac",
          "sessionId": "c8a583d9-9302-420c-8fa7-1a53550f44ed",
          "agentId": "github.copilot.editingSession"
        }
      },
      "followups": [],
      "isCanceled": false,
      "agent": {
        "extensionId": {
          "value": "GitHub.copilot-chat",
          "_lower": "github.copilot-chat"
        },
        "publisherDisplayName": "GitHub",
        "extensionPublisherId": "GitHub",
        "extensionDisplayName": "GitHub Copilot Chat",
        "id": "github.copilot.editingSession",
        "description": "Edit files in your workspace",
        "metadata": {
          "themeIcon": {
            "id": "copilot"
          },
          "hasFollowups": false,
          "supportIssueReporting": false,
          "supportsSlowVariables": true
        },
        "name": "GitHubCopilot",
        "fullName": "GitHub Copilot",
        "isDefault": true,
        "locations": [
          "editing-session"
        ],
        "slashCommands": [],
        "disambiguation": []
      },
      "workingSet": [
        {
          "$mid": 1,
          "fsPath": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/match_stat.ts",
          "external": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/match_stat.ts",
          "path": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/match_stat.ts",
          "scheme": "file"
        },
        {
          "$mid": 1,
          "fsPath": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
          "external": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
          "path": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
          "scheme": "file"
        },
        {
          "$mid": 1,
          "fsPath": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/match_stat.ts",
          "external": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/match_stat.ts",
          "path": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/match_stat.ts",
          "scheme": "file"
        },
        {
          "$mid": 1,
          "fsPath": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
          "external": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
          "path": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
          "scheme": "file"
        }
      ],
      "contentReferences": [
        {
          "kind": "reference",
          "reference": {
            "$mid": 1,
            "fsPath": "/Users/kris/code/match-grader/.github/copilot-instructions.md",
            "external": "file:///Users/kris/code/match-grader/.github/copilot-instructions.md",
            "path": "/Users/kris/code/match-grader/.github/copilot-instructions.md",
            "scheme": "file"
          }
        }
      ],
      "codeCitations": [],
      "timestamp": 1736806165169
    },
    {
      "requestId": "request_0b16e6b1-d58d-484a-aa32-e840a6c8a5d8",
      "message": {
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 21
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 22
            },
            "text": "Add those into the ui",
            "kind": "text"
          }
        ],
        "text": "Add those into the ui"
      },
      "variableData": {
        "variables": [
          {
            "value": {
              "$mid": 1,
              "fsPath": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/match_stat.ts",
              "external": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/match_stat.ts",
              "path": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/match_stat.ts",
              "scheme": "file"
            },
            "id": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/match_stat.ts",
            "name": "match_stat.ts",
            "isFile": true,
            "isDynamic": true
          },
          {
            "value": {
              "$mid": 1,
              "fsPath": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
              "external": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
              "path": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
              "scheme": "file"
            },
            "id": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
            "name": "rally_context.ts",
            "isFile": true,
            "isDynamic": true
          },
          {
            "value": {
              "$mid": 1,
              "external": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/gradebook_ui.ts",
              "path": "/Users/kris/code/match-grader/src/tsModules/match-grader/gradebook_ui.ts",
              "scheme": "file"
            },
            "id": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/gradebook_ui.ts",
            "name": "gradebook_ui.ts",
            "isFile": true,
            "isDynamic": true
          }
        ]
      },
      "response": [
        {
          "value": "ho ho ho\n\nLet's add the unforced error percentages for serve returns to the UI by adding new stat rows. We only need to modify the stats section in the gradebook UI.\n\n### [gradebook_ui.ts](file:///Users/kris/code/match-grader/src/tsModules/match-grader/gradebook_ui.ts)\n\nAdd new stat rows for unforced error percentages on returns.\n\n```typescript\n",
          "supportThemeIcons": false,
          "supportHtml": false
        },
        {
          "kind": "codeblockUri",
          "uri": {
            "$mid": 1,
            "fsPath": "/Users/kris/code/match-grader/src/tsModules/match-grader/gradebook_ui.ts",
            "external": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/gradebook_ui.ts",
            "path": "/Users/kris/code/match-grader/src/tsModules/match-grader/gradebook_ui.ts",
            "scheme": "file"
          }
        },
        {
          "value": "// ...existing code...\n  private genStatSheet() {\n    const rows = [];\n    const project = this.gradebookMgr.project;\n    rows.push([new StatCell(''), new StatCell(project.matchData.myName), new StatCell(project.matchData.oppoName)]);\n\n    const stat = this.getCurrRallyContext().matchStatBeforeRally;\n    // ...existing code...\n    rows.push([new StatCell('UE Return 🔻'), new StatCell(stat.getP1UnforcedErrorPctOnReturn()), new StatCell(stat.getP2UnforcedErrorPctOnReturn())]);\n    rows.push([new StatCell('UE Ret 1 🔻'), new StatCell(stat.getP1UnforcedErrorPctOn1stServeReturn()), new StatCell(stat.getP2UnforcedErrorPctOn1stServeReturn())]);\n    rows.push([new StatCell('UE Ret 2 🔻'), new StatCell(stat.getP1UnforcedErrorPctOn2ndServeReturn()), new StatCell(stat.getP2UnforcedErrorPctOn2ndServeReturn())]);\n    return rows;\n  }\n// ...existing code...\n```\n\nThe changes add three new stat rows to display:\n1. Overall unforced error percentage on returns (already exists)\n2. Unforced error percentage on first serve returns\n3. Unforced error percentage on second serve returns\n\nThese are added at the end of the stat rows, following the existing pattern of using 🔻 to indicate unforced errors.",
          "supportThemeIcons": false,
          "supportHtml": false
        },
        {
          "kind": "textEditGroup",
          "uri": {
            "$mid": 1,
            "fsPath": "/Users/kris/code/match-grader/src/tsModules/match-grader/gradebook_ui.ts",
            "external": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/gradebook_ui.ts",
            "path": "/Users/kris/code/match-grader/src/tsModules/match-grader/gradebook_ui.ts",
            "scheme": "file"
          },
          "edits": [
            [],
            [
              {
                "text": "import { matchKey } from \"../key-match/key_match\";",
                "range": {
                  "startLineNumber": 1,
                  "startColumn": 1,
                  "endLineNumber": 1,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "import { YoutubePlayerUi } from \"../youtube-player/youtube_player_ui\";",
                "range": {
                  "startLineNumber": 2,
                  "startColumn": 1,
                  "endLineNumber": 2,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "import { Cell, CellLoc, SheetUi } from \"./sheet_ui\";",
                "range": {
                  "startLineNumber": 3,
                  "startColumn": 1,
                  "endLineNumber": 3,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "import { GradebookMgr } from \"./gradebook_mgr\";",
                "range": {
                  "startLineNumber": 4,
                  "startColumn": 1,
                  "endLineNumber": 4,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "import { RATING_SCALE } from \"./constants\";",
                "range": {
                  "startLineNumber": 5,
                  "startColumn": 1,
                  "endLineNumber": 5,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "import { EphemeralBanner } from \"../ephemeral-banner\";",
                "range": {
                  "startLineNumber": 6,
                  "startColumn": 1,
                  "endLineNumber": 6,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "import { Rally, RallyResult, rallyResultToIndex, rallyResultVals } from \"./models/rally\";",
                "range": {
                  "startLineNumber": 7,
                  "startColumn": 1,
                  "endLineNumber": 7,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "import { Time } from \"./models/Time\";",
                "range": {
                  "startLineNumber": 8,
                  "startColumn": 1,
                  "endLineNumber": 8,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "import { mod, extractYoutubeId } from \"./gradebook_util\";",
                "range": {
                  "startLineNumber": 9,
                  "startColumn": 1,
                  "endLineNumber": 9,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "import { GradebookUiConfig, ColumnName } from \"./gradebook_ui_config\";",
                "range": {
                  "startLineNumber": 10,
                  "startColumn": 1,
                  "endLineNumber": 10,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "import { htmlTemplate } from \"./gradebook_ui_template\";",
                "range": {
                  "startLineNumber": 11,
                  "startColumn": 1,
                  "endLineNumber": 11,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "import { genFirstRow, genHeaderCol, genRallyRow } from \"./gradebook_col\";",
                "range": {
                  "startLineNumber": 12,
                  "startColumn": 1,
                  "endLineNumber": 12,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "import { defaultSortState } from \"./sort_state\";",
                "range": {
                  "startLineNumber": 13,
                  "startColumn": 1,
                  "endLineNumber": 13,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "import { StatCell, StatUi } from \"./stat_ui\";",
                "range": {
                  "startLineNumber": 14,
                  "startColumn": 1,
                  "endLineNumber": 14,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 15,
                  "startColumn": 1,
                  "endLineNumber": 15,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "// Top-level UI to handle everything",
                "range": {
                  "startLineNumber": 16,
                  "startColumn": 1,
                  "endLineNumber": 16,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "export class GradebookUi extends HTMLElement {",
                "range": {
                  "startLineNumber": 17,
                  "startColumn": 1,
                  "endLineNumber": 17,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  public config: GradebookUiConfig = new GradebookUiConfig;",
                "range": {
                  "startLineNumber": 18,
                  "startColumn": 1,
                  "endLineNumber": 18,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  private youtubePlayerUi: YoutubePlayerUi = new YoutubePlayerUi;",
                "range": {
                  "startLineNumber": 19,
                  "startColumn": 1,
                  "endLineNumber": 19,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  private currentUrlIdx = 0;",
                "range": {
                  "startLineNumber": 20,
                  "startColumn": 1,
                  "endLineNumber": 20,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  // Only use this if useRevealedRallyIdx() == true.",
                "range": {
                  "startLineNumber": 21,
                  "startColumn": 1,
                  "endLineNumber": 21,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  private revealedRallyIdx = 0;",
                "range": {
                  "startLineNumber": 22,
                  "startColumn": 1,
                  "endLineNumber": 22,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  private sortState = defaultSortState;",
                "range": {
                  "startLineNumber": 23,
                  "startColumn": 1,
                  "endLineNumber": 23,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 24,
                  "startColumn": 1,
                  "endLineNumber": 24,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  private inputStartTime: Time | null = null;",
                "range": {
                  "startLineNumber": 25,
                  "startColumn": 1,
                  "endLineNumber": 25,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  private gradebookMgr = new GradebookMgr;",
                "range": {
                  "startLineNumber": 26,
                  "startColumn": 1,
                  "endLineNumber": 26,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 27,
                  "startColumn": 1,
                  "endLineNumber": 27,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  private sheetUi: SheetUi = new SheetUi;",
                "range": {
                  "startLineNumber": 28,
                  "startColumn": 1,
                  "endLineNumber": 28,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  private statUi: StatUi = new StatUi;",
                "range": {
                  "startLineNumber": 29,
                  "startColumn": 1,
                  "endLineNumber": 29,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  private banner: EphemeralBanner = new EphemeralBanner;",
                "range": {
                  "startLineNumber": 30,
                  "startColumn": 1,
                  "endLineNumber": 30,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 31,
                  "startColumn": 1,
                  "endLineNumber": 31,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  connectedCallback() {",
                "range": {
                  "startLineNumber": 32,
                  "startColumn": 1,
                  "endLineNumber": 32,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    this.innerHTML = `Loading project data.`;",
                "range": {
                  "startLineNumber": 33,
                  "startColumn": 1,
                  "endLineNumber": 33,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 34,
                  "startColumn": 1,
                  "endLineNumber": 34,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    // IFrame steals the focus on click; is polling the best we can do?",
                "range": {
                  "startLineNumber": 35,
                  "startColumn": 1,
                  "endLineNumber": 35,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    setInterval(() => {",
                "range": {
                  "startLineNumber": 36,
                  "startColumn": 1,
                  "endLineNumber": 36,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      if (document.activeElement && document.activeElement.tagName == \"IFRAME\") {",
                "range": {
                  "startLineNumber": 37,
                  "startColumn": 1,
                  "endLineNumber": 37,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        const elt = document.activeElement as HTMLIFrameElement;",
                "range": {
                  "startLineNumber": 38,
                  "startColumn": 1,
                  "endLineNumber": 38,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        elt.blur();",
                "range": {
                  "startLineNumber": 39,
                  "startColumn": 1,
                  "endLineNumber": 39,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      }",
                "range": {
                  "startLineNumber": 40,
                  "startColumn": 1,
                  "endLineNumber": 40,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }, 1000);",
                "range": {
                  "startLineNumber": 41,
                  "startColumn": 1,
                  "endLineNumber": 41,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 42,
                  "startColumn": 1,
                  "endLineNumber": 42,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 43,
                  "startColumn": 1,
                  "endLineNumber": 43,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  // This should only be called once as we don't clean up the resources.",
                "range": {
                  "startLineNumber": 44,
                  "startColumn": 1,
                  "endLineNumber": 44,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  // Must call this to load the editor",
                "range": {
                  "startLineNumber": 45,
                  "startColumn": 1,
                  "endLineNumber": 45,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  async loadOrCreateProjectInUi(id: string) {",
                "range": {
                  "startLineNumber": 46,
                  "startColumn": 1,
                  "endLineNumber": 46,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const finalProjectId = await this.gradebookMgr.loadOrCreateProject(id);",
                "range": {
                  "startLineNumber": 47,
                  "startColumn": 1,
                  "endLineNumber": 47,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 48,
                  "startColumn": 1,
                  "endLineNumber": 48,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    this.innerHTML = htmlTemplate;",
                "range": {
                  "startLineNumber": 49,
                  "startColumn": 1,
                  "endLineNumber": 49,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    this.banner = this.querySelector('ephemeral-banner') as EphemeralBanner;",
                "range": {
                  "startLineNumber": 50,
                  "startColumn": 1,
                  "endLineNumber": 50,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    this.statUi = this.querySelector('stat-ui')! as StatUi;",
                "range": {
                  "startLineNumber": 51,
                  "startColumn": 1,
                  "endLineNumber": 51,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    this.sheetUi = this.querySelector('sheet-ui')! as SheetUi;",
                "range": {
                  "startLineNumber": 52,
                  "startColumn": 1,
                  "endLineNumber": 52,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    // TODO see if we can move part of this inside SheetUi (replace setRowIdxAndVideo with moveVideoToCurrentRally)",
                "range": {
                  "startLineNumber": 53,
                  "startColumn": 1,
                  "endLineNumber": 53,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    this.sheetUi.onCellClick((cellLoc: CellLoc) => {",
                "range": {
                  "startLineNumber": 54,
                  "startColumn": 1,
                  "endLineNumber": 54,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      if (cellLoc.rowIdx < 2) {",
                "range": {
                  "startLineNumber": 55,
                  "startColumn": 1,
                  "endLineNumber": 55,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        return;",
                "range": {
                  "startLineNumber": 56,
                  "startColumn": 1,
                  "endLineNumber": 56,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      }",
                "range": {
                  "startLineNumber": 57,
                  "startColumn": 1,
                  "endLineNumber": 57,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      this.setRowIdxAndVideo(cellLoc.rowIdx - 2);",
                "range": {
                  "startLineNumber": 58,
                  "startColumn": 1,
                  "endLineNumber": 58,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      this.sheetUi.setColIdx(cellLoc.colIdx);",
                "range": {
                  "startLineNumber": 59,
                  "startColumn": 1,
                  "endLineNumber": 59,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      this.renderSheet();",
                "range": {
                  "startLineNumber": 60,
                  "startColumn": 1,
                  "endLineNumber": 60,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    });",
                "range": {
                  "startLineNumber": 61,
                  "startColumn": 1,
                  "endLineNumber": 61,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 62,
                  "startColumn": 1,
                  "endLineNumber": 62,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    this.youtubePlayerUi = this.querySelector('youtube-player-ui')! as YoutubePlayerUi;",
                "range": {
                  "startLineNumber": 63,
                  "startColumn": 1,
                  "endLineNumber": 63,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    await this.updateYoutubePlayer();",
                "range": {
                  "startLineNumber": 64,
                  "startColumn": 1,
                  "endLineNumber": 64,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 65,
                  "startColumn": 1,
                  "endLineNumber": 65,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    this.renderSheet();",
                "range": {
                  "startLineNumber": 66,
                  "startColumn": 1,
                  "endLineNumber": 66,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    // Need to render before moving cursor since the data needed to seek video time is in the sheet.",
                "range": {
                  "startLineNumber": 67,
                  "startColumn": 1,
                  "endLineNumber": 67,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (this.config.startFromBeginning) {",
                "range": {
                  "startLineNumber": 68,
                  "startColumn": 1,
                  "endLineNumber": 68,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      this.moveCursorToFirstRally();",
                "range": {
                  "startLineNumber": 69,
                  "startColumn": 1,
                  "endLineNumber": 69,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      this.sheetUi.setColIdx(this.getColIndex(ColumnName.GAME_SCORE));",
                "range": {
                  "startLineNumber": 70,
                  "startColumn": 1,
                  "endLineNumber": 70,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 71,
                  "startColumn": 1,
                  "endLineNumber": 71,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (this.config.enableMutation) {",
                "range": {
                  "startLineNumber": 72,
                  "startColumn": 1,
                  "endLineNumber": 72,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      this.moveRowIdxAndVideo(1);",
                "range": {
                  "startLineNumber": 73,
                  "startColumn": 1,
                  "endLineNumber": 73,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      this.sheetUi.setColIdx(this.getColIndex(ColumnName.START_TIME));",
                "range": {
                  "startLineNumber": 74,
                  "startColumn": 1,
                  "endLineNumber": 74,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 75,
                  "startColumn": 1,
                  "endLineNumber": 75,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    this.renderSheet();",
                "range": {
                  "startLineNumber": 76,
                  "startColumn": 1,
                  "endLineNumber": 76,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 77,
                  "startColumn": 1,
                  "endLineNumber": 77,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (this.config.moveCursorUpBasedOnVideoTime) {",
                "range": {
                  "startLineNumber": 78,
                  "startColumn": 1,
                  "endLineNumber": 78,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      window.setInterval(() => {",
                "range": {
                  "startLineNumber": 79,
                  "startColumn": 1,
                  "endLineNumber": 79,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        if (this.youtubePlayerUi.youtubePlayer.getPlayerState() === YT.PlayerState.PLAYING) {",
                "range": {
                  "startLineNumber": 80,
                  "startColumn": 1,
                  "endLineNumber": 80,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          this.moveToRallyContainingTime();",
                "range": {
                  "startLineNumber": 81,
                  "startColumn": 1,
                  "endLineNumber": 81,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 82,
                  "startColumn": 1,
                  "endLineNumber": 82,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      }, 1000);",
                "range": {
                  "startLineNumber": 83,
                  "startColumn": 1,
                  "endLineNumber": 83,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 84,
                  "startColumn": 1,
                  "endLineNumber": 84,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 85,
                  "startColumn": 1,
                  "endLineNumber": 85,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (this.config.spoilerColumns.length > 0) {",
                "range": {
                  "startLineNumber": 86,
                  "startColumn": 1,
                  "endLineNumber": 86,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      window.setInterval(() => {",
                "range": {
                  "startLineNumber": 87,
                  "startColumn": 1,
                  "endLineNumber": 87,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        if (this.videoTimeIsBeyondCurrentRally()) {",
                "range": {
                  "startLineNumber": 88,
                  "startColumn": 1,
                  "endLineNumber": 88,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          // TODO think of how to make this more efficient",
                "range": {
                  "startLineNumber": 89,
                  "startColumn": 1,
                  "endLineNumber": 89,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          // Design a publisher to notify when the video time passed certain key points.",
                "range": {
                  "startLineNumber": 90,
                  "startColumn": 1,
                  "endLineNumber": 90,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          this.renderSheet(true);",
                "range": {
                  "startLineNumber": 91,
                  "startColumn": 1,
                  "endLineNumber": 91,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 92,
                  "startColumn": 1,
                  "endLineNumber": 92,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      }, 1000);",
                "range": {
                  "startLineNumber": 93,
                  "startColumn": 1,
                  "endLineNumber": 93,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 94,
                  "startColumn": 1,
                  "endLineNumber": 94,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 95,
                  "startColumn": 1,
                  "endLineNumber": 95,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return finalProjectId;",
                "range": {
                  "startLineNumber": 96,
                  "startColumn": 1,
                  "endLineNumber": 96,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 97,
                  "startColumn": 1,
                  "endLineNumber": 97,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 98,
                  "startColumn": 1,
                  "endLineNumber": 98,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  handleKeydown(evt: KeyboardEvent) {",
                "range": {
                  "startLineNumber": 99,
                  "startColumn": 1,
                  "endLineNumber": 99,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    this.handleKeydownWithoutChanges(evt);",
                "range": {
                  "startLineNumber": 100,
                  "startColumn": 1,
                  "endLineNumber": 100,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    this.handleKeydownWithSheetChanges(evt);",
                "range": {
                  "startLineNumber": 101,
                  "startColumn": 1,
                  "endLineNumber": 101,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 102,
                  "startColumn": 1,
                  "endLineNumber": 102,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 103,
                  "startColumn": 1,
                  "endLineNumber": 103,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  private getVideoPlayerUi() {",
                "range": {
                  "startLineNumber": 104,
                  "startColumn": 1,
                  "endLineNumber": 104,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return this.youtubePlayerUi",
                "range": {
                  "startLineNumber": 105,
                  "startColumn": 1,
                  "endLineNumber": 105,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 106,
                  "startColumn": 1,
                  "endLineNumber": 106,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 107,
                  "startColumn": 1,
                  "endLineNumber": 107,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  private async handleKeydownWithoutChanges(evt: KeyboardEvent) {",
                "range": {
                  "startLineNumber": 108,
                  "startColumn": 1,
                  "endLineNumber": 108,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (matchKey(evt, 'space') || matchKey(evt, 'k')) {",
                "range": {
                  "startLineNumber": 109,
                  "startColumn": 1,
                  "endLineNumber": 109,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      this.getVideoPlayerUi().toggleVideoPlay();",
                "range": {
                  "startLineNumber": 110,
                  "startColumn": 1,
                  "endLineNumber": 110,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    } else if (matchKey(evt, 'y')) {",
                "range": {
                  "startLineNumber": 111,
                  "startColumn": 1,
                  "endLineNumber": 111,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      this.obtainYoutubeUrl();",
                "range": {
                  "startLineNumber": 112,
                  "startColumn": 1,
                  "endLineNumber": 112,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    } else if (matchKey(evt, 'z')) {",
                "range": {
                  "startLineNumber": 113,
                  "startColumn": 1,
                  "endLineNumber": 113,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      this.getVideoPlayerUi().incrementPlaybackRate(-0.2);",
                "range": {
                  "startLineNumber": 114,
                  "startColumn": 1,
                  "endLineNumber": 114,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    } else if (matchKey(evt, 'x')) {",
                "range": {
                  "startLineNumber": 115,
                  "startColumn": 1,
                  "endLineNumber": 115,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      this.getVideoPlayerUi().incrementPlaybackRate(0.2);",
                "range": {
                  "startLineNumber": 116,
                  "startColumn": 1,
                  "endLineNumber": 116,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    } else if (matchKey(evt, 'a')) {",
                "range": {
                  "startLineNumber": 117,
                  "startColumn": 1,
                  "endLineNumber": 117,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      this.getVideoPlayerUi().resetPlaybackRate();",
                "range": {
                  "startLineNumber": 118,
                  "startColumn": 1,
                  "endLineNumber": 118,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    } else if (matchKey(evt, 'l')) {",
                "range": {
                  "startLineNumber": 119,
                  "startColumn": 1,
                  "endLineNumber": 119,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      this.getVideoPlayerUi().move(1.5);",
                "range": {
                  "startLineNumber": 120,
                  "startColumn": 1,
                  "endLineNumber": 120,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    } else if (matchKey(evt, 'j')) {",
                "range": {
                  "startLineNumber": 121,
                  "startColumn": 1,
                  "endLineNumber": 121,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      this.getVideoPlayerUi().move(-3);",
                "range": {
                  "startLineNumber": 122,
                  "startColumn": 1,
                  "endLineNumber": 122,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    } else if (matchKey(evt, ';')) {",
                "range": {
                  "startLineNumber": 123,
                  "startColumn": 1,
                  "endLineNumber": 123,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      this.getVideoPlayerUi().move(5);",
                "range": {
                  "startLineNumber": 124,
                  "startColumn": 1,
                  "endLineNumber": 124,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    } else if (matchKey(evt, 'h')) {",
                "range": {
                  "startLineNumber": 125,
                  "startColumn": 1,
                  "endLineNumber": 125,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      this.getVideoPlayerUi().move(-5);",
                "range": {
                  "startLineNumber": 126,
                  "startColumn": 1,
                  "endLineNumber": 126,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    } else if (matchKey(evt, 'f')) {",
                "range": {
                  "startLineNumber": 127,
                  "startColumn": 1,
                  "endLineNumber": 127,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      const width = this.getVideoPlayerUi().getIframeWidth();",
                "range": {
                  "startLineNumber": 128,
                  "startColumn": 1,
                  "endLineNumber": 128,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      let wantWidth = width < 1000 ? width * 4 : width / 4;",
                "range": {
                  "startLineNumber": 129,
                  "startColumn": 1,
                  "endLineNumber": 129,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      this.getVideoPlayerUi().setIframeDims(wantWidth);",
                "range": {
                  "startLineNumber": 130,
                  "startColumn": 1,
                  "endLineNumber": 130,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    } else if (matchKey(evt, 'cmd+s')) {",
                "range": {
                  "startLineNumber": 131,
                  "startColumn": 1,
                  "endLineNumber": 131,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      evt.preventDefault();",
                "range": {
                  "startLineNumber": 132,
                  "startColumn": 1,
                  "endLineNumber": 132,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      this.banner.inProgress('Saving');",
                "range": {
                  "startLineNumber": 133,
                  "startColumn": 1,
                  "endLineNumber": 133,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      const failureMsg = await this.gradebookMgr.save();",
                "range": {
                  "startLineNumber": 134,
                  "startColumn": 1,
                  "endLineNumber": 134,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      if (failureMsg) {",
                "range": {
                  "startLineNumber": 135,
                  "startColumn": 1,
                  "endLineNumber": 135,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        this.banner.failure(failureMsg);",
                "range": {
                  "startLineNumber": 136,
                  "startColumn": 1,
                  "endLineNumber": 136,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      } else {",
                "range": {
                  "startLineNumber": 137,
                  "startColumn": 1,
                  "endLineNumber": 137,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        this.banner.success('Saved!');",
                "range": {
                  "startLineNumber": 138,
                  "startColumn": 1,
                  "endLineNumber": 138,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      }",
                "range": {
                  "startLineNumber": 139,
                  "startColumn": 1,
                  "endLineNumber": 139,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    } else if (matchKey(evt, 'cmd+shift+s')) {",
                "range": {
                  "startLineNumber": 140,
                  "startColumn": 1,
                  "endLineNumber": 140,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      evt.preventDefault();",
                "range": {
                  "startLineNumber": 141,
                  "startColumn": 1,
                  "endLineNumber": 141,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      await this.cloneAndGoToProject();",
                "range": {
                  "startLineNumber": 142,
                  "startColumn": 1,
                  "endLineNumber": 142,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    } else {",
                "range": {
                  "startLineNumber": 143,
                  "startColumn": 1,
                  "endLineNumber": 143,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return;",
                "range": {
                  "startLineNumber": 144,
                  "startColumn": 1,
                  "endLineNumber": 144,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 145,
                  "startColumn": 1,
                  "endLineNumber": 145,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    evt.preventDefault();",
                "range": {
                  "startLineNumber": 146,
                  "startColumn": 1,
                  "endLineNumber": 146,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 147,
                  "startColumn": 1,
                  "endLineNumber": 147,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 148,
                  "startColumn": 1,
                  "endLineNumber": 148,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  private async cloneAndGoToProject() {",
                "range": {
                  "startLineNumber": 149,
                  "startColumn": 1,
                  "endLineNumber": 149,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    this.banner.inProgress('Cloning project...');",
                "range": {
                  "startLineNumber": 150,
                  "startColumn": 1,
                  "endLineNumber": 150,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const newId = (new Date()).toISOString();",
                "range": {
                  "startLineNumber": 151,
                  "startColumn": 1,
                  "endLineNumber": 151,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 152,
                  "startColumn": 1,
                  "endLineNumber": 152,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    this.gradebookMgr.project.projectInfo.id = newId;",
                "range": {
                  "startLineNumber": 153,
                  "startColumn": 1,
                  "endLineNumber": 153,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    this.gradebookMgr.project.projectInfo.owner = '';",
                "range": {
                  "startLineNumber": 154,
                  "startColumn": 1,
                  "endLineNumber": 154,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 155,
                  "startColumn": 1,
                  "endLineNumber": 155,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    await this.gradebookMgr.save();",
                "range": {
                  "startLineNumber": 156,
                  "startColumn": 1,
                  "endLineNumber": 156,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    window.location.href = `${location.origin}/edit.html#id=${newId}`;",
                "range": {
                  "startLineNumber": 157,
                  "startColumn": 1,
                  "endLineNumber": 157,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 158,
                  "startColumn": 1,
                  "endLineNumber": 158,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 159,
                  "startColumn": 1,
                  "endLineNumber": 159,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  private useRevealedRallyIdx() {",
                "range": {
                  "startLineNumber": 160,
                  "startColumn": 1,
                  "endLineNumber": 160,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    // TODO detect no custom sorting",
                "range": {
                  "startLineNumber": 161,
                  "startColumn": 1,
                  "endLineNumber": 161,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return this.config.hideFutureRallies;",
                "range": {
                  "startLineNumber": 162,
                  "startColumn": 1,
                  "endLineNumber": 162,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 163,
                  "startColumn": 1,
                  "endLineNumber": 163,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 164,
                  "startColumn": 1,
                  "endLineNumber": 164,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  private getCurrRallyStartTime() {",
                "range": {
                  "startLineNumber": 165,
                  "startColumn": 1,
                  "endLineNumber": 165,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const cell = this.sheetUi.getSelectedCell();",
                "range": {
                  "startLineNumber": 166,
                  "startColumn": 1,
                  "endLineNumber": 166,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (!cell || !cell.data) {",
                "range": {
                  "startLineNumber": 167,
                  "startColumn": 1,
                  "endLineNumber": 167,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return;",
                "range": {
                  "startLineNumber": 168,
                  "startColumn": 1,
                  "endLineNumber": 168,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 169,
                  "startColumn": 1,
                  "endLineNumber": 169,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const rally = cell.data as Rally;",
                "range": {
                  "startLineNumber": 170,
                  "startColumn": 1,
                  "endLineNumber": 170,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return rally.startTime;",
                "range": {
                  "startLineNumber": 171,
                  "startColumn": 1,
                  "endLineNumber": 171,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 172,
                  "startColumn": 1,
                  "endLineNumber": 172,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 173,
                  "startColumn": 1,
                  "endLineNumber": 173,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  private getCurrRally() {",
                "range": {
                  "startLineNumber": 174,
                  "startColumn": 1,
                  "endLineNumber": 174,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const time = this.getCurrRallyStartTime();",
                "range": {
                  "startLineNumber": 175,
                  "startColumn": 1,
                  "endLineNumber": 175,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (!time) {",
                "range": {
                  "startLineNumber": 176,
                  "startColumn": 1,
                  "endLineNumber": 176,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return;",
                "range": {
                  "startLineNumber": 177,
                  "startColumn": 1,
                  "endLineNumber": 177,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 178,
                  "startColumn": 1,
                  "endLineNumber": 178,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return this.gradebookMgr.getRally(time);",
                "range": {
                  "startLineNumber": 179,
                  "startColumn": 1,
                  "endLineNumber": 179,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 180,
                  "startColumn": 1,
                  "endLineNumber": 180,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 181,
                  "startColumn": 1,
                  "endLineNumber": 181,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  private getCurrRallyContext() {",
                "range": {
                  "startLineNumber": 182,
                  "startColumn": 1,
                  "endLineNumber": 182,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const rallyContexts = this.gradebookMgr.project.matchData.getRallyContexts();",
                "range": {
                  "startLineNumber": 183,
                  "startColumn": 1,
                  "endLineNumber": 183,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const last = rallyContexts[rallyContexts.length - 1];",
                "range": {
                  "startLineNumber": 184,
                  "startColumn": 1,
                  "endLineNumber": 184,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const time = this.getCurrRallyStartTime();",
                "range": {
                  "startLineNumber": 185,
                  "startColumn": 1,
                  "endLineNumber": 185,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (!time) {",
                "range": {
                  "startLineNumber": 186,
                  "startColumn": 1,
                  "endLineNumber": 186,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return last;",
                "range": {
                  "startLineNumber": 187,
                  "startColumn": 1,
                  "endLineNumber": 187,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 188,
                  "startColumn": 1,
                  "endLineNumber": 188,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return rallyContexts.find(rallyCtx => {",
                "range": {
                  "startLineNumber": 189,
                  "startColumn": 1,
                  "endLineNumber": 189,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return time.equals(rallyCtx.rally.startTime);",
                "range": {
                  "startLineNumber": 190,
                  "startColumn": 1,
                  "endLineNumber": 190,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }) || last;",
                "range": {
                  "startLineNumber": 191,
                  "startColumn": 1,
                  "endLineNumber": 191,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    ",
                "range": {
                  "startLineNumber": 192,
                  "startColumn": 1,
                  "endLineNumber": 192,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 193,
                  "startColumn": 1,
                  "endLineNumber": 193,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 194,
                  "startColumn": 1,
                  "endLineNumber": 194,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  private moveVideoToCurrentRally(paddingMs = -1000) {",
                "range": {
                  "startLineNumber": 195,
                  "startColumn": 1,
                  "endLineNumber": 195,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const rally = this.getCurrRally();",
                "range": {
                  "startLineNumber": 196,
                  "startColumn": 1,
                  "endLineNumber": 196,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (rally) {",
                "range": {
                  "startLineNumber": 197,
                  "startColumn": 1,
                  "endLineNumber": 197,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      const startTime = new Time(rally.startTime.ms + paddingMs, rally.startTime.videoIndex);",
                "range": {
                  "startLineNumber": 198,
                  "startColumn": 1,
                  "endLineNumber": 198,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      this.moveTo(startTime);",
                "range": {
                  "startLineNumber": 199,
                  "startColumn": 1,
                  "endLineNumber": 199,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    } else {",
                "range": {
                  "startLineNumber": 200,
                  "startColumn": 1,
                  "endLineNumber": 200,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      const rallies = this.gradebookMgr.project.matchData.rallies;",
                "range": {
                  "startLineNumber": 201,
                  "startColumn": 1,
                  "endLineNumber": 201,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      const lastRally = rallies[rallies.length - 1];",
                "range": {
                  "startLineNumber": 202,
                  "startColumn": 1,
                  "endLineNumber": 202,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      if (lastRally) {",
                "range": {
                  "startLineNumber": 203,
                  "startColumn": 1,
                  "endLineNumber": 203,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        const time = new Time(lastRally.endTime.ms, lastRally.endTime.videoIndex);",
                "range": {
                  "startLineNumber": 204,
                  "startColumn": 1,
                  "endLineNumber": 204,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        if (time.greaterThan(this.getCurrTime())) {",
                "range": {
                  "startLineNumber": 205,
                  "startColumn": 1,
                  "endLineNumber": 205,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          this.moveTo(time);",
                "range": {
                  "startLineNumber": 206,
                  "startColumn": 1,
                  "endLineNumber": 206,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 207,
                  "startColumn": 1,
                  "endLineNumber": 207,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      }",
                "range": {
                  "startLineNumber": 208,
                  "startColumn": 1,
                  "endLineNumber": 208,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 209,
                  "startColumn": 1,
                  "endLineNumber": 209,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 210,
                  "startColumn": 1,
                  "endLineNumber": 210,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 211,
                  "startColumn": 1,
                  "endLineNumber": 211,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 212,
                  "startColumn": 1,
                  "endLineNumber": 212,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  private setRowIdxAndVideo(idx: number) {",
                "range": {
                  "startLineNumber": 213,
                  "startColumn": 1,
                  "endLineNumber": 213,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    this.sheetUi.setRowIdx(idx);",
                "range": {
                  "startLineNumber": 214,
                  "startColumn": 1,
                  "endLineNumber": 214,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (this.useRevealedRallyIdx()) {",
                "range": {
                  "startLineNumber": 215,
                  "startColumn": 1,
                  "endLineNumber": 215,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      const rally = this.getCurrRally();",
                "range": {
                  "startLineNumber": 216,
                  "startColumn": 1,
                  "endLineNumber": 216,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      if (!rally) {",
                "range": {
                  "startLineNumber": 217,
                  "startColumn": 1,
                  "endLineNumber": 217,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        console.warn('getCurrRally is null');",
                "range": {
                  "startLineNumber": 218,
                  "startColumn": 1,
                  "endLineNumber": 218,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        return;",
                "range": {
                  "startLineNumber": 219,
                  "startColumn": 1,
                  "endLineNumber": 219,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      }",
                "range": {
                  "startLineNumber": 220,
                  "startColumn": 1,
                  "endLineNumber": 220,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      const idx = this.gradebookMgr.findRallyIdx(rally.startTime);",
                "range": {
                  "startLineNumber": 221,
                  "startColumn": 1,
                  "endLineNumber": 221,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      if (idx < 0) {",
                "range": {
                  "startLineNumber": 222,
                  "startColumn": 1,
                  "endLineNumber": 222,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        console.warn('Unable to find index of current rally');",
                "range": {
                  "startLineNumber": 223,
                  "startColumn": 1,
                  "endLineNumber": 223,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 224,
                  "startColumn": 1,
                  "endLineNumber": 224,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      }",
                "range": {
                  "startLineNumber": 225,
                  "startColumn": 1,
                  "endLineNumber": 225,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      this.revealedRallyIdx = idx;",
                "range": {
                  "startLineNumber": 226,
                  "startColumn": 1,
                  "endLineNumber": 226,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 227,
                  "startColumn": 1,
                  "endLineNumber": 227,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 228,
                  "startColumn": 1,
                  "endLineNumber": 228,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (this.config.upDownArrowJumpsToStartTime) {",
                "range": {
                  "startLineNumber": 229,
                  "startColumn": 1,
                  "endLineNumber": 229,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      this.moveVideoToCurrentRally();",
                "range": {
                  "startLineNumber": 230,
                  "startColumn": 1,
                  "endLineNumber": 230,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 231,
                  "startColumn": 1,
                  "endLineNumber": 231,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 232,
                  "startColumn": 1,
                  "endLineNumber": 232,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 233,
                  "startColumn": 1,
                  "endLineNumber": 233,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  private moveRowIdxAndVideo(num: number) {",
                "range": {
                  "startLineNumber": 234,
                  "startColumn": 1,
                  "endLineNumber": 234,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (this.useRevealedRallyIdx()) {",
                "range": {
                  "startLineNumber": 235,
                  "startColumn": 1,
                  "endLineNumber": 235,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      // Moving up means num == -1, which is +1 for revealedRallyIdx.",
                "range": {
                  "startLineNumber": 236,
                  "startColumn": 1,
                  "endLineNumber": 236,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      this.revealedRallyIdx -= num;",
                "range": {
                  "startLineNumber": 237,
                  "startColumn": 1,
                  "endLineNumber": 237,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      // Need to render to propagate this info to the sheet data.",
                "range": {
                  "startLineNumber": 238,
                  "startColumn": 1,
                  "endLineNumber": 238,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      this.renderSheet();",
                "range": {
                  "startLineNumber": 239,
                  "startColumn": 1,
                  "endLineNumber": 239,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    } else {",
                "range": {
                  "startLineNumber": 240,
                  "startColumn": 1,
                  "endLineNumber": 240,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      this.sheetUi.moveRowIdx(num);",
                "range": {
                  "startLineNumber": 241,
                  "startColumn": 1,
                  "endLineNumber": 241,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 242,
                  "startColumn": 1,
                  "endLineNumber": 242,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 243,
                  "startColumn": 1,
                  "endLineNumber": 243,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (this.config.enableMutation && this.sheetUi.getRowIdx() === 0) {",
                "range": {
                  "startLineNumber": 244,
                  "startColumn": 1,
                  "endLineNumber": 244,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      if (this.inputStartTime) {",
                "range": {
                  "startLineNumber": 245,
                  "startColumn": 1,
                  "endLineNumber": 245,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        this.sheetUi.setColIdx(this.getColIndex(ColumnName.END_TIME));",
                "range": {
                  "startLineNumber": 246,
                  "startColumn": 1,
                  "endLineNumber": 246,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      } else {",
                "range": {
                  "startLineNumber": 247,
                  "startColumn": 1,
                  "endLineNumber": 247,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        this.sheetUi.setColIdx(this.getColIndex(ColumnName.START_TIME));",
                "range": {
                  "startLineNumber": 248,
                  "startColumn": 1,
                  "endLineNumber": 248,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      }",
                "range": {
                  "startLineNumber": 249,
                  "startColumn": 1,
                  "endLineNumber": 249,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 250,
                  "startColumn": 1,
                  "endLineNumber": 250,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 251,
                  "startColumn": 1,
                  "endLineNumber": 251,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (this.config.upDownArrowJumpsToStartTime) {",
                "range": {
                  "startLineNumber": 252,
                  "startColumn": 1,
                  "endLineNumber": 252,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      this.moveVideoToCurrentRally();",
                "range": {
                  "startLineNumber": 253,
                  "startColumn": 1,
                  "endLineNumber": 253,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 254,
                  "startColumn": 1,
                  "endLineNumber": 254,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 255,
                  "startColumn": 1,
                  "endLineNumber": 255,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 256,
                  "startColumn": 1,
                  "endLineNumber": 256,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  private handleKeydownWithSheetChanges(evt: KeyboardEvent) {",
                "range": {
                  "startLineNumber": 257,
                  "startColumn": 1,
                  "endLineNumber": 257,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (matchKey(evt, 'up')) {",
                "range": {
                  "startLineNumber": 258,
                  "startColumn": 1,
                  "endLineNumber": 258,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      this.moveRowIdxAndVideo(-1);",
                "range": {
                  "startLineNumber": 259,
                  "startColumn": 1,
                  "endLineNumber": 259,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    } else if (matchKey(evt, 'down')) {",
                "range": {
                  "startLineNumber": 260,
                  "startColumn": 1,
                  "endLineNumber": 260,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      this.moveRowIdxAndVideo(1);",
                "range": {
                  "startLineNumber": 261,
                  "startColumn": 1,
                  "endLineNumber": 261,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    } else if (matchKey(evt, `\\\\`) && this.config.enableMutation) {",
                "range": {
                  "startLineNumber": 262,
                  "startColumn": 1,
                  "endLineNumber": 262,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      this.tabSelectedCell();",
                "range": {
                  "startLineNumber": 263,
                  "startColumn": 1,
                  "endLineNumber": 263,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    } else if (matchKey(evt, `shift+|`) && this.config.enableMutation) {",
                "range": {
                  "startLineNumber": 264,
                  "startColumn": 1,
                  "endLineNumber": 264,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      this.tabSelectedCell(true);",
                "range": {
                  "startLineNumber": 265,
                  "startColumn": 1,
                  "endLineNumber": 265,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    } else if (matchKey(evt, 'tab')) {",
                "range": {
                  "startLineNumber": 266,
                  "startColumn": 1,
                  "endLineNumber": 266,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      this.sheetUi.moveColIdx(1);",
                "range": {
                  "startLineNumber": 267,
                  "startColumn": 1,
                  "endLineNumber": 267,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    } else if (matchKey(evt, 'right')) {",
                "range": {
                  "startLineNumber": 268,
                  "startColumn": 1,
                  "endLineNumber": 268,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      if (this.config.leftRightArrowMovesVideo) {",
                "range": {
                  "startLineNumber": 269,
                  "startColumn": 1,
                  "endLineNumber": 269,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        this.getVideoPlayerUi().move(5);",
                "range": {
                  "startLineNumber": 270,
                  "startColumn": 1,
                  "endLineNumber": 270,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      } else {",
                "range": {
                  "startLineNumber": 271,
                  "startColumn": 1,
                  "endLineNumber": 271,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        this.sheetUi.moveColIdx(1);",
                "range": {
                  "startLineNumber": 272,
                  "startColumn": 1,
                  "endLineNumber": 272,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      }",
                "range": {
                  "startLineNumber": 273,
                  "startColumn": 1,
                  "endLineNumber": 273,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    } else if (matchKey(evt, 'shift+tab')) {",
                "range": {
                  "startLineNumber": 274,
                  "startColumn": 1,
                  "endLineNumber": 274,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      this.sheetUi.moveColIdx(-1);",
                "range": {
                  "startLineNumber": 275,
                  "startColumn": 1,
                  "endLineNumber": 275,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    } else if (matchKey(evt, 'left')) {",
                "range": {
                  "startLineNumber": 276,
                  "startColumn": 1,
                  "endLineNumber": 276,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      if (this.config.leftRightArrowMovesVideo) {",
                "range": {
                  "startLineNumber": 277,
                  "startColumn": 1,
                  "endLineNumber": 277,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        this.getVideoPlayerUi().move(-5);",
                "range": {
                  "startLineNumber": 278,
                  "startColumn": 1,
                  "endLineNumber": 278,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      } else {",
                "range": {
                  "startLineNumber": 279,
                  "startColumn": 1,
                  "endLineNumber": 279,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        this.sheetUi.moveColIdx(-1);",
                "range": {
                  "startLineNumber": 280,
                  "startColumn": 1,
                  "endLineNumber": 280,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      }",
                "range": {
                  "startLineNumber": 281,
                  "startColumn": 1,
                  "endLineNumber": 281,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    } else if (matchKey(evt, 'backspace') && this.config.enableMutation) {",
                "range": {
                  "startLineNumber": 282,
                  "startColumn": 1,
                  "endLineNumber": 282,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      this.gradebookMgr.removeRally(this.getCurrRally());",
                "range": {
                  "startLineNumber": 283,
                  "startColumn": 1,
                  "endLineNumber": 283,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    } else if (matchKey(evt, 'cmd+z') && this.config.enableMutation) {",
                "range": {
                  "startLineNumber": 284,
                  "startColumn": 1,
                  "endLineNumber": 284,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      if (this.inputStartTime) {",
                "range": {
                  "startLineNumber": 285,
                  "startColumn": 1,
                  "endLineNumber": 285,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        this.inputStartTime = null;",
                "range": {
                  "startLineNumber": 286,
                  "startColumn": 1,
                  "endLineNumber": 286,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        this.sheetUi.setColIdx(this.getColIndex(ColumnName.START_TIME));",
                "range": {
                  "startLineNumber": 287,
                  "startColumn": 1,
                  "endLineNumber": 287,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      }",
                "range": {
                  "startLineNumber": 288,
                  "startColumn": 1,
                  "endLineNumber": 288,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    } else if (matchKey(evt, 'enter')) {",
                "range": {
                  "startLineNumber": 289,
                  "startColumn": 1,
                  "endLineNumber": 289,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      if (this.config.enableMutation) {",
                "range": {
                  "startLineNumber": 290,
                  "startColumn": 1,
                  "endLineNumber": 290,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        this.enterSelectedCell();",
                "range": {
                  "startLineNumber": 291,
                  "startColumn": 1,
                  "endLineNumber": 291,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      } else {",
                "range": {
                  "startLineNumber": 292,
                  "startColumn": 1,
                  "endLineNumber": 292,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        this.moveRowIdxAndVideo(-1);",
                "range": {
                  "startLineNumber": 293,
                  "startColumn": 1,
                  "endLineNumber": 293,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      }",
                "range": {
                  "startLineNumber": 294,
                  "startColumn": 1,
                  "endLineNumber": 294,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    } else {",
                "range": {
                  "startLineNumber": 295,
                  "startColumn": 1,
                  "endLineNumber": 295,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return;",
                "range": {
                  "startLineNumber": 296,
                  "startColumn": 1,
                  "endLineNumber": 296,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 297,
                  "startColumn": 1,
                  "endLineNumber": 297,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    this.renderSheet();",
                "range": {
                  "startLineNumber": 298,
                  "startColumn": 1,
                  "endLineNumber": 298,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    evt.preventDefault();",
                "range": {
                  "startLineNumber": 299,
                  "startColumn": 1,
                  "endLineNumber": 299,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 300,
                  "startColumn": 1,
                  "endLineNumber": 300,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 301,
                  "startColumn": 1,
                  "endLineNumber": 301,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  private getColIndex(colName: ColumnName): number {",
                "range": {
                  "startLineNumber": 302,
                  "startColumn": 1,
                  "endLineNumber": 302,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const poss = this.config.visibleColumns.indexOf(colName);",
                "range": {
                  "startLineNumber": 303,
                  "startColumn": 1,
                  "endLineNumber": 303,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (poss !== -1) {",
                "range": {
                  "startLineNumber": 304,
                  "startColumn": 1,
                  "endLineNumber": 304,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return poss;",
                "range": {
                  "startLineNumber": 305,
                  "startColumn": 1,
                  "endLineNumber": 305,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 306,
                  "startColumn": 1,
                  "endLineNumber": 306,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return 0;",
                "range": {
                  "startLineNumber": 307,
                  "startColumn": 1,
                  "endLineNumber": 307,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 308,
                  "startColumn": 1,
                  "endLineNumber": 308,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 309,
                  "startColumn": 1,
                  "endLineNumber": 309,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  private enterSelectedCell() {",
                "range": {
                  "startLineNumber": 310,
                  "startColumn": 1,
                  "endLineNumber": 310,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const rally = this.getCurrRally();",
                "range": {
                  "startLineNumber": 311,
                  "startColumn": 1,
                  "endLineNumber": 311,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (!rally) {",
                "range": {
                  "startLineNumber": 312,
                  "startColumn": 1,
                  "endLineNumber": 312,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      if (this.inputStartTime) {",
                "range": {
                  "startLineNumber": 313,
                  "startColumn": 1,
                  "endLineNumber": 313,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        this.promoteRally();",
                "range": {
                  "startLineNumber": 314,
                  "startColumn": 1,
                  "endLineNumber": 314,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        return;",
                "range": {
                  "startLineNumber": 315,
                  "startColumn": 1,
                  "endLineNumber": 315,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      }",
                "range": {
                  "startLineNumber": 316,
                  "startColumn": 1,
                  "endLineNumber": 316,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      this.updateInputStartTime();",
                "range": {
                  "startLineNumber": 317,
                  "startColumn": 1,
                  "endLineNumber": 317,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return;",
                "range": {
                  "startLineNumber": 318,
                  "startColumn": 1,
                  "endLineNumber": 318,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 319,
                  "startColumn": 1,
                  "endLineNumber": 319,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const col = this.config.visibleColumns[this.sheetUi.getColIdx()];",
                "range": {
                  "startLineNumber": 320,
                  "startColumn": 1,
                  "endLineNumber": 320,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 321,
                  "startColumn": 1,
                  "endLineNumber": 321,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (col === ColumnName.START_TIME) {",
                "range": {
                  "startLineNumber": 322,
                  "startColumn": 1,
                  "endLineNumber": 322,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      this.moveRowIdxAndVideo(-1);",
                "range": {
                  "startLineNumber": 323,
                  "startColumn": 1,
                  "endLineNumber": 323,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    } else if (col === ColumnName.END_TIME) {",
                "range": {
                  "startLineNumber": 324,
                  "startColumn": 1,
                  "endLineNumber": 324,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      if (this.config.upDownArrowJumpsToStartTime) {",
                "range": {
                  "startLineNumber": 325,
                  "startColumn": 1,
                  "endLineNumber": 325,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        rally.endTime = this.getCurrTime();",
                "range": {
                  "startLineNumber": 326,
                  "startColumn": 1,
                  "endLineNumber": 326,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        // move to start time col of next rally",
                "range": {
                  "startLineNumber": 327,
                  "startColumn": 1,
                  "endLineNumber": 327,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        this.sheetUi.moveColIdx(-1);",
                "range": {
                  "startLineNumber": 328,
                  "startColumn": 1,
                  "endLineNumber": 328,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        this.moveRowIdxAndVideo(-1);",
                "range": {
                  "startLineNumber": 329,
                  "startColumn": 1,
                  "endLineNumber": 329,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      } else {",
                "range": {
                  "startLineNumber": 330,
                  "startColumn": 1,
                  "endLineNumber": 330,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        this.moveRowIdxAndVideo(-1);",
                "range": {
                  "startLineNumber": 331,
                  "startColumn": 1,
                  "endLineNumber": 331,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      }",
                "range": {
                  "startLineNumber": 332,
                  "startColumn": 1,
                  "endLineNumber": 332,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    } else if (col === ColumnName.RESULT) {",
                "range": {
                  "startLineNumber": 333,
                  "startColumn": 1,
                  "endLineNumber": 333,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      if (rally.result === RallyResult.PtReturner || rally.result === RallyResult.PtServer) {",
                "range": {
                  "startLineNumber": 334,
                  "startColumn": 1,
                  "endLineNumber": 334,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        this.sheetUi.moveColIdx(1);",
                "range": {
                  "startLineNumber": 335,
                  "startColumn": 1,
                  "endLineNumber": 335,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      } else {",
                "range": {
                  "startLineNumber": 336,
                  "startColumn": 1,
                  "endLineNumber": 336,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        this.moveRowIdxAndVideo(-1);",
                "range": {
                  "startLineNumber": 337,
                  "startColumn": 1,
                  "endLineNumber": 337,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      }",
                "range": {
                  "startLineNumber": 338,
                  "startColumn": 1,
                  "endLineNumber": 338,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    } else if (col === ColumnName.WINNER_LAST_SHOT) {",
                "range": {
                  "startLineNumber": 339,
                  "startColumn": 1,
                  "endLineNumber": 339,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      this.sheetUi.moveColIdx(1);",
                "range": {
                  "startLineNumber": 340,
                  "startColumn": 1,
                  "endLineNumber": 340,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    } else if (col === ColumnName.LOSER_PREVIOUS_SHOT) {",
                "range": {
                  "startLineNumber": 341,
                  "startColumn": 1,
                  "endLineNumber": 341,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      this.moveRowIdxAndVideo(-1);",
                "range": {
                  "startLineNumber": 342,
                  "startColumn": 1,
                  "endLineNumber": 342,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    } else if (col === ColumnName.SERVER) {",
                "range": {
                  "startLineNumber": 343,
                  "startColumn": 1,
                  "endLineNumber": 343,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      const name = prompt(`Enter server's name`);",
                "range": {
                  "startLineNumber": 344,
                  "startColumn": 1,
                  "endLineNumber": 344,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      if (name) {",
                "range": {
                  "startLineNumber": 345,
                  "startColumn": 1,
                  "endLineNumber": 345,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        if (rally.isMyServe) {",
                "range": {
                  "startLineNumber": 346,
                  "startColumn": 1,
                  "endLineNumber": 346,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          this.gradebookMgr.project.matchData.myName = name;",
                "range": {
                  "startLineNumber": 347,
                  "startColumn": 1,
                  "endLineNumber": 347,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        } else {",
                "range": {
                  "startLineNumber": 348,
                  "startColumn": 1,
                  "endLineNumber": 348,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          this.gradebookMgr.project.matchData.oppoName = name;",
                "range": {
                  "startLineNumber": 349,
                  "startColumn": 1,
                  "endLineNumber": 349,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 350,
                  "startColumn": 1,
                  "endLineNumber": 350,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      }",
                "range": {
                  "startLineNumber": 351,
                  "startColumn": 1,
                  "endLineNumber": 351,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 352,
                  "startColumn": 1,
                  "endLineNumber": 352,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 353,
                  "startColumn": 1,
                  "endLineNumber": 353,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 354,
                  "startColumn": 1,
                  "endLineNumber": 354,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  private tabSelectedCell(opposite = false) {",
                "range": {
                  "startLineNumber": 355,
                  "startColumn": 1,
                  "endLineNumber": 355,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const rally = this.getCurrRally();",
                "range": {
                  "startLineNumber": 356,
                  "startColumn": 1,
                  "endLineNumber": 356,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (!rally) {",
                "range": {
                  "startLineNumber": 357,
                  "startColumn": 1,
                  "endLineNumber": 357,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return;",
                "range": {
                  "startLineNumber": 358,
                  "startColumn": 1,
                  "endLineNumber": 358,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 359,
                  "startColumn": 1,
                  "endLineNumber": 359,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const col = this.config.visibleColumns[this.sheetUi.getColIdx()];",
                "range": {
                  "startLineNumber": 360,
                  "startColumn": 1,
                  "endLineNumber": 360,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 361,
                  "startColumn": 1,
                  "endLineNumber": 361,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (col === ColumnName.RESULT) {",
                "range": {
                  "startLineNumber": 362,
                  "startColumn": 1,
                  "endLineNumber": 362,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      const idx = rallyResultToIndex.get(rally.result);",
                "range": {
                  "startLineNumber": 363,
                  "startColumn": 1,
                  "endLineNumber": 363,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      const next = opposite ? idx - 1 : idx + 1 + rallyResultToIndex.size;",
                "range": {
                  "startLineNumber": 364,
                  "startColumn": 1,
                  "endLineNumber": 364,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      const nextIdx = next % rallyResultToIndex.size;",
                "range": {
                  "startLineNumber": 365,
                  "startColumn": 1,
                  "endLineNumber": 365,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      rally.result = rallyResultVals[nextIdx];",
                "range": {
                  "startLineNumber": 366,
                  "startColumn": 1,
                  "endLineNumber": 366,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      console.log(rally);",
                "range": {
                  "startLineNumber": 367,
                  "startColumn": 1,
                  "endLineNumber": 367,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    } else if (col === ColumnName.WINNER_LAST_SHOT) {",
                "range": {
                  "startLineNumber": 368,
                  "startColumn": 1,
                  "endLineNumber": 368,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      const ratingChange = opposite ? 1 : -1;",
                "range": {
                  "startLineNumber": 369,
                  "startColumn": 1,
                  "endLineNumber": 369,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      rally.stat.winnerLastShotQuality = mod(",
                "range": {
                  "startLineNumber": 370,
                  "startColumn": 1,
                  "endLineNumber": 370,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        rally.stat.winnerLastShotQuality + ratingChange, RATING_SCALE + 1);",
                "range": {
                  "startLineNumber": 371,
                  "startColumn": 1,
                  "endLineNumber": 371,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    } else if (col === ColumnName.LOSER_PREVIOUS_SHOT) {",
                "range": {
                  "startLineNumber": 372,
                  "startColumn": 1,
                  "endLineNumber": 372,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      const ratingChange = opposite ? -1 : 1;",
                "range": {
                  "startLineNumber": 373,
                  "startColumn": 1,
                  "endLineNumber": 373,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      rally.stat.loserPreviousShotQuality = mod(",
                "range": {
                  "startLineNumber": 374,
                  "startColumn": 1,
                  "endLineNumber": 374,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        rally.stat.loserPreviousShotQuality + ratingChange, RATING_SCALE + 1);",
                "range": {
                  "startLineNumber": 375,
                  "startColumn": 1,
                  "endLineNumber": 375,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    } else if (col === ColumnName.SERVER) {",
                "range": {
                  "startLineNumber": 376,
                  "startColumn": 1,
                  "endLineNumber": 376,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      rally.isMyServe = !rally.isMyServe;",
                "range": {
                  "startLineNumber": 377,
                  "startColumn": 1,
                  "endLineNumber": 377,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    } else if (col === ColumnName.START_TIME) {",
                "range": {
                  "startLineNumber": 378,
                  "startColumn": 1,
                  "endLineNumber": 378,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      rally.startTime.ms += opposite ? -500 : 500;",
                "range": {
                  "startLineNumber": 379,
                  "startColumn": 1,
                  "endLineNumber": 379,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      this.moveTo(rally.startTime);",
                "range": {
                  "startLineNumber": 380,
                  "startColumn": 1,
                  "endLineNumber": 380,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    } else if (col === ColumnName.END_TIME) {",
                "range": {
                  "startLineNumber": 381,
                  "startColumn": 1,
                  "endLineNumber": 381,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      rally.endTime.ms += opposite ? -500 : 500;",
                "range": {
                  "startLineNumber": 382,
                  "startColumn": 1,
                  "endLineNumber": 382,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      this.moveTo(rally.endTime);",
                "range": {
                  "startLineNumber": 383,
                  "startColumn": 1,
                  "endLineNumber": 383,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 384,
                  "startColumn": 1,
                  "endLineNumber": 384,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 385,
                  "startColumn": 1,
                  "endLineNumber": 385,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 386,
                  "startColumn": 1,
                  "endLineNumber": 386,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  private renderSheet(revealSpoiler = false) {",
                "range": {
                  "startLineNumber": 387,
                  "startColumn": 1,
                  "endLineNumber": 387,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    this.statUi.render(this.genStatSheet());",
                "range": {
                  "startLineNumber": 388,
                  "startColumn": 1,
                  "endLineNumber": 388,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    this.sheetUi.render(this.genSheet(revealSpoiler));",
                "range": {
                  "startLineNumber": 389,
                  "startColumn": 1,
                  "endLineNumber": 389,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 390,
                  "startColumn": 1,
                  "endLineNumber": 390,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 391,
                  "startColumn": 1,
                  "endLineNumber": 391,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  private obtainYoutubeUrl() {",
                "range": {
                  "startLineNumber": 392,
                  "startColumn": 1,
                  "endLineNumber": 392,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const url = prompt('Enter url');",
                "range": {
                  "startLineNumber": 393,
                  "startColumn": 1,
                  "endLineNumber": 393,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (!url) {",
                "range": {
                  "startLineNumber": 394,
                  "startColumn": 1,
                  "endLineNumber": 394,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return;",
                "range": {
                  "startLineNumber": 395,
                  "startColumn": 1,
                  "endLineNumber": 395,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 396,
                  "startColumn": 1,
                  "endLineNumber": 396,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const res = extractYoutubeId(url);",
                "range": {
                  "startLineNumber": 397,
                  "startColumn": 1,
                  "endLineNumber": 397,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (!res.success) {",
                "range": {
                  "startLineNumber": 398,
                  "startColumn": 1,
                  "endLineNumber": 398,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return;",
                "range": {
                  "startLineNumber": 399,
                  "startColumn": 1,
                  "endLineNumber": 399,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 400,
                  "startColumn": 1,
                  "endLineNumber": 400,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    this.gradebookMgr.project.matchData.urls.push(url);",
                "range": {
                  "startLineNumber": 401,
                  "startColumn": 1,
                  "endLineNumber": 401,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (this.gradebookMgr.project.matchData.urls.length === 1) {",
                "range": {
                  "startLineNumber": 402,
                  "startColumn": 1,
                  "endLineNumber": 402,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      // Only update player for first video, subsequent ones will play automatically",
                "range": {
                  "startLineNumber": 403,
                  "startColumn": 1,
                  "endLineNumber": 403,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      this.updateYoutubePlayer();",
                "range": {
                  "startLineNumber": 404,
                  "startColumn": 1,
                  "endLineNumber": 404,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 405,
                  "startColumn": 1,
                  "endLineNumber": 405,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 406,
                  "startColumn": 1,
                  "endLineNumber": 406,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 407,
                  "startColumn": 1,
                  "endLineNumber": 407,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  private async updateYoutubePlayer() {",
                "range": {
                  "startLineNumber": 408,
                  "startColumn": 1,
                  "endLineNumber": 408,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const urls = this.gradebookMgr.project.matchData.urls;",
                "range": {
                  "startLineNumber": 409,
                  "startColumn": 1,
                  "endLineNumber": 409,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (urls.length < 1) {",
                "range": {
                  "startLineNumber": 410,
                  "startColumn": 1,
                  "endLineNumber": 410,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return;",
                "range": {
                  "startLineNumber": 411,
                  "startColumn": 1,
                  "endLineNumber": 411,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 412,
                  "startColumn": 1,
                  "endLineNumber": 412,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const { success, id } = extractYoutubeId(urls[this.currentUrlIdx]);",
                "range": {
                  "startLineNumber": 413,
                  "startColumn": 1,
                  "endLineNumber": 413,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (!success) {",
                "range": {
                  "startLineNumber": 414,
                  "startColumn": 1,
                  "endLineNumber": 414,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return;",
                "range": {
                  "startLineNumber": 415,
                  "startColumn": 1,
                  "endLineNumber": 415,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 416,
                  "startColumn": 1,
                  "endLineNumber": 416,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    await this.youtubePlayerUi.initYoutubePlayer(id, this.currentUrlIdx > 0);  // autoplay=true for subsequent videos",
                "range": {
                  "startLineNumber": 417,
                  "startColumn": 1,
                  "endLineNumber": 417,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    this.youtubePlayerUi.onEnd(() => {",
                "range": {
                  "startLineNumber": 418,
                  "startColumn": 1,
                  "endLineNumber": 418,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      if (this.currentUrlIdx < urls.length - 1) {",
                "range": {
                  "startLineNumber": 419,
                  "startColumn": 1,
                  "endLineNumber": 419,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        this.currentUrlIdx++;",
                "range": {
                  "startLineNumber": 420,
                  "startColumn": 1,
                  "endLineNumber": 420,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        this.updateYoutubePlayer();",
                "range": {
                  "startLineNumber": 421,
                  "startColumn": 1,
                  "endLineNumber": 421,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      }",
                "range": {
                  "startLineNumber": 422,
                  "startColumn": 1,
                  "endLineNumber": 422,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    });",
                "range": {
                  "startLineNumber": 423,
                  "startColumn": 1,
                  "endLineNumber": 423,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 424,
                  "startColumn": 1,
                  "endLineNumber": 424,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 425,
                  "startColumn": 1,
                  "endLineNumber": 425,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  private async moveTo(time: Time) {",
                "range": {
                  "startLineNumber": 426,
                  "startColumn": 1,
                  "endLineNumber": 426,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (time.videoIndex !== this.currentUrlIdx) {",
                "range": {
                  "startLineNumber": 427,
                  "startColumn": 1,
                  "endLineNumber": 427,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      this.currentUrlIdx = time.videoIndex;",
                "range": {
                  "startLineNumber": 428,
                  "startColumn": 1,
                  "endLineNumber": 428,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      const urls = this.gradebookMgr.project.matchData.urls;",
                "range": {
                  "startLineNumber": 429,
                  "startColumn": 1,
                  "endLineNumber": 429,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      const { success, id } = extractYoutubeId(urls[this.currentUrlIdx]);",
                "range": {
                  "startLineNumber": 430,
                  "startColumn": 1,
                  "endLineNumber": 430,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      if (!success) {",
                "range": {
                  "startLineNumber": 431,
                  "startColumn": 1,
                  "endLineNumber": 431,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        return;",
                "range": {
                  "startLineNumber": 432,
                  "startColumn": 1,
                  "endLineNumber": 432,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      }",
                "range": {
                  "startLineNumber": 433,
                  "startColumn": 1,
                  "endLineNumber": 433,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      await this.youtubePlayerUi.initYoutubePlayer(id, true);",
                "range": {
                  "startLineNumber": 434,
                  "startColumn": 1,
                  "endLineNumber": 434,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      this.youtubePlayerUi.moveTo(time.ms);",
                "range": {
                  "startLineNumber": 435,
                  "startColumn": 1,
                  "endLineNumber": 435,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    } else {",
                "range": {
                  "startLineNumber": 436,
                  "startColumn": 1,
                  "endLineNumber": 436,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      this.youtubePlayerUi.moveTo(time.ms);",
                "range": {
                  "startLineNumber": 437,
                  "startColumn": 1,
                  "endLineNumber": 437,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 438,
                  "startColumn": 1,
                  "endLineNumber": 438,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 439,
                  "startColumn": 1,
                  "endLineNumber": 439,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 440,
                  "startColumn": 1,
                  "endLineNumber": 440,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  private getCurrTime() {",
                "range": {
                  "startLineNumber": 441,
                  "startColumn": 1,
                  "endLineNumber": 441,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const nowSec = this.youtubePlayerUi.youtubePlayer.getCurrentTime();",
                "range": {
                  "startLineNumber": 442,
                  "startColumn": 1,
                  "endLineNumber": 442,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return new Time(Math.round(nowSec * 1000), this.currentUrlIdx);",
                "range": {
                  "startLineNumber": 443,
                  "startColumn": 1,
                  "endLineNumber": 443,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 444,
                  "startColumn": 1,
                  "endLineNumber": 444,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 445,
                  "startColumn": 1,
                  "endLineNumber": 445,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  private updateInputStartTime() {",
                "range": {
                  "startLineNumber": 446,
                  "startColumn": 1,
                  "endLineNumber": 446,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    this.inputStartTime = this.getCurrTime();",
                "range": {
                  "startLineNumber": 447,
                  "startColumn": 1,
                  "endLineNumber": 447,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    this.sheetUi.setColIdx(this.getColIndex(ColumnName.END_TIME));",
                "range": {
                  "startLineNumber": 448,
                  "startColumn": 1,
                  "endLineNumber": 448,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    this.renderSheet();",
                "range": {
                  "startLineNumber": 449,
                  "startColumn": 1,
                  "endLineNumber": 449,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 450,
                  "startColumn": 1,
                  "endLineNumber": 450,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 451,
                  "startColumn": 1,
                  "endLineNumber": 451,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  private promoteRally() {",
                "range": {
                  "startLineNumber": 452,
                  "startColumn": 1,
                  "endLineNumber": 452,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (!this.inputStartTime) {",
                "range": {
                  "startLineNumber": 453,
                  "startColumn": 1,
                  "endLineNumber": 453,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      console.warn('cannot promote rally without inputStartTime');",
                "range": {
                  "startLineNumber": 454,
                  "startColumn": 1,
                  "endLineNumber": 454,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return;",
                "range": {
                  "startLineNumber": 455,
                  "startColumn": 1,
                  "endLineNumber": 455,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 456,
                  "startColumn": 1,
                  "endLineNumber": 456,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const nowTime = this.getCurrTime();",
                "range": {
                  "startLineNumber": 457,
                  "startColumn": 1,
                  "endLineNumber": 457,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const guessRes = nowTime.ms - this.inputStartTime.ms < 3500 ? RallyResult.Fault : RallyResult.PtServer;",
                "range": {
                  "startLineNumber": 458,
                  "startColumn": 1,
                  "endLineNumber": 458,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    this.gradebookMgr.project.matchData.addRally(this.inputStartTime, nowTime, guessRes);",
                "range": {
                  "startLineNumber": 459,
                  "startColumn": 1,
                  "endLineNumber": 459,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    this.sheetUi.setColIdx(this.getColIndex(ColumnName.RESULT));",
                "range": {
                  "startLineNumber": 460,
                  "startColumn": 1,
                  "endLineNumber": 460,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    this.sheetUi.setRowIdx(1);",
                "range": {
                  "startLineNumber": 461,
                  "startColumn": 1,
                  "endLineNumber": 461,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 462,
                  "startColumn": 1,
                  "endLineNumber": 462,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    this.inputStartTime = null;",
                "range": {
                  "startLineNumber": 463,
                  "startColumn": 1,
                  "endLineNumber": 463,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    this.renderSheet();",
                "range": {
                  "startLineNumber": 464,
                  "startColumn": 1,
                  "endLineNumber": 464,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 465,
                  "startColumn": 1,
                  "endLineNumber": 465,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 466,
                  "startColumn": 1,
                  "endLineNumber": 466,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  private moveCursorToFirstRally() {",
                "range": {
                  "startLineNumber": 467,
                  "startColumn": 1,
                  "endLineNumber": 467,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    this.sheetUi.setColIdx(this.getColIndex(ColumnName.GAME_SCORE));",
                "range": {
                  "startLineNumber": 468,
                  "startColumn": 1,
                  "endLineNumber": 468,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    this.setRowIdxAndVideo(0);",
                "range": {
                  "startLineNumber": 469,
                  "startColumn": 1,
                  "endLineNumber": 469,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 470,
                  "startColumn": 1,
                  "endLineNumber": 470,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 471,
                  "startColumn": 1,
                  "endLineNumber": 471,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  private videoTimeIsBeyondCurrentRally() {",
                "range": {
                  "startLineNumber": 472,
                  "startColumn": 1,
                  "endLineNumber": 472,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const rally = this.getCurrRally();",
                "range": {
                  "startLineNumber": 473,
                  "startColumn": 1,
                  "endLineNumber": 473,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (!rally) {",
                "range": {
                  "startLineNumber": 474,
                  "startColumn": 1,
                  "endLineNumber": 474,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      return true;",
                "range": {
                  "startLineNumber": 475,
                  "startColumn": 1,
                  "endLineNumber": 475,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 476,
                  "startColumn": 1,
                  "endLineNumber": 476,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const currentTime = this.getCurrTime();",
                "range": {
                  "startLineNumber": 477,
                  "startColumn": 1,
                  "endLineNumber": 477,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return currentTime.videoIndex > rally.endTime.videoIndex || ",
                "range": {
                  "startLineNumber": 478,
                  "startColumn": 1,
                  "endLineNumber": 478,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "           (currentTime.videoIndex === rally.endTime.videoIndex && ",
                "range": {
                  "startLineNumber": 479,
                  "startColumn": 1,
                  "endLineNumber": 479,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "            currentTime.ms > rally.endTime.ms);",
                "range": {
                  "startLineNumber": 480,
                  "startColumn": 1,
                  "endLineNumber": 480,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 481,
                  "startColumn": 1,
                  "endLineNumber": 481,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 482,
                  "startColumn": 1,
                  "endLineNumber": 482,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  private genStatSheet() {",
                "range": {
                  "startLineNumber": 483,
                  "startColumn": 1,
                  "endLineNumber": 483,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const rows = [];",
                "range": {
                  "startLineNumber": 484,
                  "startColumn": 1,
                  "endLineNumber": 484,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const project = this.gradebookMgr.project;",
                "range": {
                  "startLineNumber": 485,
                  "startColumn": 1,
                  "endLineNumber": 485,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    rows.push([new StatCell(''), new StatCell(project.matchData.myName), new StatCell(project.matchData.oppoName)]);",
                "range": {
                  "startLineNumber": 486,
                  "startColumn": 1,
                  "endLineNumber": 486,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 487,
                  "startColumn": 1,
                  "endLineNumber": 487,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const stat = this.getCurrRallyContext().matchStatBeforeRally;",
                "range": {
                  "startLineNumber": 488,
                  "startColumn": 1,
                  "endLineNumber": 488,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    rows.push([new StatCell('🟢'), new StatCell(stat.getP1WinningPct()), new StatCell(stat.getP2WinningPct())]);",
                "range": {
                  "startLineNumber": 489,
                  "startColumn": 1,
                  "endLineNumber": 489,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    rows.push([new StatCell('Serve 🟢'), new StatCell(stat.p1Stats.getServePointsWonPct()), new StatCell(stat.p2Stats.getServePointsWonPct())]);",
                "range": {
                  "startLineNumber": 490,
                  "startColumn": 1,
                  "endLineNumber": 490,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    rows.push([new StatCell('Serve #1 🟢'), new StatCell(stat.p1Stats.getFirstServePointsWonPct()), new StatCell(stat.p2Stats.getFirstServePointsWonPct())]);",
                "range": {
                  "startLineNumber": 491,
                  "startColumn": 1,
                  "endLineNumber": 491,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    rows.push([new StatCell('Serve #2 🟢'), new StatCell(stat.p1Stats.getSecondServePointsWonPct()), new StatCell(stat.p2Stats.getSecondServePointsWonPct())]);",
                "range": {
                  "startLineNumber": 492,
                  "startColumn": 1,
                  "endLineNumber": 492,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    rows.push([new StatCell('Serve #1'), new StatCell(stat.p1Stats.getFirstServePct()), new StatCell(stat.p2Stats.getFirstServePct())]);",
                "range": {
                  "startLineNumber": 493,
                  "startColumn": 1,
                  "endLineNumber": 493,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    rows.push([new StatCell('Serve #2'), new StatCell(stat.p1Stats.getSecondServePct()), new StatCell(stat.p2Stats.getSecondServePct())]);",
                "range": {
                  "startLineNumber": 494,
                  "startColumn": 1,
                  "endLineNumber": 494,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    rows.push([new StatCell('Forcing💪🟢'), new StatCell(stat.getP1ForcingWinPct()), new StatCell(stat.getP2ForcingWinPct())]);",
                "range": {
                  "startLineNumber": 495,
                  "startColumn": 1,
                  "endLineNumber": 495,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    rows.push([new StatCell(`Serve 💪🟢`), new StatCell(stat.getP1ForcingWinPctOnServe()), new StatCell(stat.getP2ForcingWinPctOnServe())]);",
                "range": {
                  "startLineNumber": 496,
                  "startColumn": 1,
                  "endLineNumber": 496,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    rows.push([new StatCell(`Serv 1 💪🟢`), new StatCell(stat.getP1ForcingWinPctOnFirstServe()), new StatCell(stat.getP2ForcingWinPctOnFirstServe())]);",
                "range": {
                  "startLineNumber": 497,
                  "startColumn": 1,
                  "endLineNumber": 497,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    rows.push([new StatCell(`Serv 2 💪🟢`), new StatCell(stat.getP1ForcingWinPctOnSecondServe()), new StatCell(stat.getP2ForcingWinPctOnSecondServe())]);",
                "range": {
                  "startLineNumber": 498,
                  "startColumn": 1,
                  "endLineNumber": 498,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    rows.push([new StatCell(`Return 💪🟢`), new StatCell(stat.getP1ForcingWinPctOnReturn()), new StatCell(stat.getP2ForcingWinPctOnReturn())]);",
                "range": {
                  "startLineNumber": 499,
                  "startColumn": 1,
                  "endLineNumber": 499,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    rows.push([new StatCell(`Ret 1 💪🟢`), new StatCell(stat.getP1ForcingWinPctOnFirstReturn()), new StatCell(stat.getP2ForcingWinPctOnFirstReturn())]);",
                "range": {
                  "startLineNumber": 500,
                  "startColumn": 1,
                  "endLineNumber": 500,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    rows.push([new StatCell(`Ret 2 💪🙀🟢`), new StatCell(stat.getP1ForcingWinPctOnSecondReturn()), new StatCell(stat.getP2ForcingWinPctOnSecondReturn())]);",
                "range": {
                  "startLineNumber": 501,
                  "startColumn": 1,
                  "endLineNumber": 501,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    rows.push([new StatCell('UE Total 🔻'), new StatCell(stat.getP1UnforcedErrorPct()), new StatCell(stat.getP2UnforcedErrorPct())]);",
                "range": {
                  "startLineNumber": 502,
                  "startColumn": 1,
                  "endLineNumber": 502,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    rows.push([new StatCell('UE Serve 🔻'), new StatCell(stat.getP1UnforcedErrorPctOnServe()), new StatCell(stat.getP2UnforcedErrorPctOnServe())]);",
                "range": {
                  "startLineNumber": 503,
                  "startColumn": 1,
                  "endLineNumber": 503,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    rows.push([new StatCell('UE Serve1 🔻'), new StatCell(stat.getP1UnforcedErrorPctOnFirstServe()), new StatCell(stat.getP2UnforcedErrorPctOnFirstServe())]);",
                "range": {
                  "startLineNumber": 504,
                  "startColumn": 1,
                  "endLineNumber": 504,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    rows.push([new StatCell('UE Serve2 🔻'), new StatCell(stat.getP1UnforcedErrorPctOnSecondServe()), new StatCell(stat.getP2UnforcedErrorPctOnSecondServe())]);",
                "range": {
                  "startLineNumber": 505,
                  "startColumn": 1,
                  "endLineNumber": 505,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    rows.push([new StatCell('UE Return 🔻'), new StatCell(stat.getP1UnforcedErrorPctOnReturn()), new StatCell(stat.getP2UnforcedErrorPctOnReturn())]);",
                "range": {
                  "startLineNumber": 506,
                  "startColumn": 1,
                  "endLineNumber": 506,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    rows.push([new StatCell('UE Ret 1 🔻'), new StatCell(stat.getP1UnforcedErrorPctOn1stServeReturn()), new StatCell(stat.getP2UnforcedErrorPctOn1stServeReturn())]);",
                "range": {
                  "startLineNumber": 507,
                  "startColumn": 1,
                  "endLineNumber": 507,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    rows.push([new StatCell('UE Ret 2 🔻'), new StatCell(stat.getP1UnforcedErrorPctOn2ndServeReturn()), new StatCell(stat.getP2UnforcedErrorPctOn2ndServeReturn())]);",
                "range": {
                  "startLineNumber": 508,
                  "startColumn": 1,
                  "endLineNumber": 508,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return rows;",
                "range": {
                  "startLineNumber": 509,
                  "startColumn": 1,
                  "endLineNumber": 509,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 510,
                  "startColumn": 1,
                  "endLineNumber": 510,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 511,
                  "startColumn": 1,
                  "endLineNumber": 511,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  private genSheet(revealSpoiler = false): Cell[][] {",
                "range": {
                  "startLineNumber": 512,
                  "startColumn": 1,
                  "endLineNumber": 512,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const project = this.gradebookMgr.project;",
                "range": {
                  "startLineNumber": 513,
                  "startColumn": 1,
                  "endLineNumber": 513,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const rows = [];",
                "range": {
                  "startLineNumber": 514,
                  "startColumn": 1,
                  "endLineNumber": 514,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const headerRow = this.config.visibleColumns.map(colName => genHeaderCol(colName));",
                "range": {
                  "startLineNumber": 515,
                  "startColumn": 1,
                  "endLineNumber": 515,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    rows.push(headerRow);",
                "range": {
                  "startLineNumber": 516,
                  "startColumn": 1,
                  "endLineNumber": 516,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 517,
                  "startColumn": 1,
                  "endLineNumber": 517,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const myName = project.matchData.myName;",
                "range": {
                  "startLineNumber": 518,
                  "startColumn": 1,
                  "endLineNumber": 518,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const oppoName = project.matchData.oppoName;",
                "range": {
                  "startLineNumber": 519,
                  "startColumn": 1,
                  "endLineNumber": 519,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const rallyContexts = this.gradebookMgr.project.matchData.getRallyContexts();",
                "range": {
                  "startLineNumber": 520,
                  "startColumn": 1,
                  "endLineNumber": 520,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 521,
                  "startColumn": 1,
                  "endLineNumber": 521,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const setupInputStartTimeBtn = () => {",
                "range": {
                  "startLineNumber": 522,
                  "startColumn": 1,
                  "endLineNumber": 522,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      const btn = this.querySelector('#input-start-time') as HTMLButtonElement;",
                "range": {
                  "startLineNumber": 523,
                  "startColumn": 1,
                  "endLineNumber": 523,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      if (btn) {",
                "range": {
                  "startLineNumber": 524,
                  "startColumn": 1,
                  "endLineNumber": 524,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        btn.onclick = () => this.updateInputStartTime();",
                "range": {
                  "startLineNumber": 525,
                  "startColumn": 1,
                  "endLineNumber": 525,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      }",
                "range": {
                  "startLineNumber": 526,
                  "startColumn": 1,
                  "endLineNumber": 526,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    };",
                "range": {
                  "startLineNumber": 527,
                  "startColumn": 1,
                  "endLineNumber": 527,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const setupInputEndTimeBtn = () => {",
                "range": {
                  "startLineNumber": 528,
                  "startColumn": 1,
                  "endLineNumber": 528,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      const btn = this.querySelector('#input-end-time') as HTMLButtonElement;",
                "range": {
                  "startLineNumber": 529,
                  "startColumn": 1,
                  "endLineNumber": 529,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      if (btn) {",
                "range": {
                  "startLineNumber": 530,
                  "startColumn": 1,
                  "endLineNumber": 530,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        btn.onclick = () => this.promoteRally();",
                "range": {
                  "startLineNumber": 531,
                  "startColumn": 1,
                  "endLineNumber": 531,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      }",
                "range": {
                  "startLineNumber": 532,
                  "startColumn": 1,
                  "endLineNumber": 532,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    };",
                "range": {
                  "startLineNumber": 533,
                  "startColumn": 1,
                  "endLineNumber": 533,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 534,
                  "startColumn": 1,
                  "endLineNumber": 534,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    // The latest rallyContext should only have score and not a rally.",
                "range": {
                  "startLineNumber": 535,
                  "startColumn": 1,
                  "endLineNumber": 535,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const latestRallyCtx = rallyContexts[rallyContexts.length - 1];",
                "range": {
                  "startLineNumber": 536,
                  "startColumn": 1,
                  "endLineNumber": 536,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    let latestPlot = latestRallyCtx.toPlot();",
                "range": {
                  "startLineNumber": 537,
                  "startColumn": 1,
                  "endLineNumber": 537,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (!latestPlot && 1 < rallyContexts.length) {",
                "range": {
                  "startLineNumber": 538,
                  "startColumn": 1,
                  "endLineNumber": 538,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      const prevRallyCtx = rallyContexts[rallyContexts.length - 2];",
                "range": {
                  "startLineNumber": 539,
                  "startColumn": 1,
                  "endLineNumber": 539,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      latestPlot = prevRallyCtx.getPlotForNextRally();",
                "range": {
                  "startLineNumber": 540,
                  "startColumn": 1,
                  "endLineNumber": 540,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 541,
                  "startColumn": 1,
                  "endLineNumber": 541,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 542,
                  "startColumn": 1,
                  "endLineNumber": 542,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const hideFirstRow = this.config.hideFutureRallies;",
                "range": {
                  "startLineNumber": 543,
                  "startColumn": 1,
                  "endLineNumber": 543,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (!hideFirstRow) {",
                "range": {
                  "startLineNumber": 544,
                  "startColumn": 1,
                  "endLineNumber": 544,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      rows.push(genFirstRow({",
                "range": {
                  "startLineNumber": 545,
                  "startColumn": 1,
                  "endLineNumber": 545,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        latestRallyCtx,",
                "range": {
                  "startLineNumber": 546,
                  "startColumn": 1,
                  "endLineNumber": 546,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        latestPlot,",
                "range": {
                  "startLineNumber": 547,
                  "startColumn": 1,
                  "endLineNumber": 547,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        inputStartTime: this.inputStartTime,",
                "range": {
                  "startLineNumber": 548,
                  "startColumn": 1,
                  "endLineNumber": 548,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        setupInputStartTimeBtn,",
                "range": {
                  "startLineNumber": 549,
                  "startColumn": 1,
                  "endLineNumber": 549,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        setupInputEndTimeBtn,",
                "range": {
                  "startLineNumber": 550,
                  "startColumn": 1,
                  "endLineNumber": 550,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      }, this.config));",
                "range": {
                  "startLineNumber": 551,
                  "startColumn": 1,
                  "endLineNumber": 551,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 552,
                  "startColumn": 1,
                  "endLineNumber": 552,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 553,
                  "startColumn": 1,
                  "endLineNumber": 553,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const rallyRows: Cell[][] = [];",
                "range": {
                  "startLineNumber": 554,
                  "startColumn": 1,
                  "endLineNumber": 554,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    let completedCtxsEndIdx = rallyContexts.length - 2;",
                "range": {
                  "startLineNumber": 555,
                  "startColumn": 1,
                  "endLineNumber": 555,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (this.useRevealedRallyIdx()) {",
                "range": {
                  "startLineNumber": 556,
                  "startColumn": 1,
                  "endLineNumber": 556,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      completedCtxsEndIdx = this.revealedRallyIdx;",
                "range": {
                  "startLineNumber": 557,
                  "startColumn": 1,
                  "endLineNumber": 557,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 558,
                  "startColumn": 1,
                  "endLineNumber": 558,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const completedCtxs = rallyContexts.slice(0, completedCtxsEndIdx + 1);",
                "range": {
                  "startLineNumber": 559,
                  "startColumn": 1,
                  "endLineNumber": 559,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    completedCtxs.forEach((rallyCtx, completedCtxIdx) => {",
                "range": {
                  "startLineNumber": 560,
                  "startColumn": 1,
                  "endLineNumber": 560,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      const rallyIsPoint = rallyCtx.isDoubleFault() ||",
                "range": {
                  "startLineNumber": 561,
                  "startColumn": 1,
                  "endLineNumber": 561,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        rallyCtx.rally.result === RallyResult.PtServer ||",
                "range": {
                  "startLineNumber": 562,
                  "startColumn": 1,
                  "endLineNumber": 562,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        rallyCtx.rally.result === RallyResult.PtReturner;",
                "range": {
                  "startLineNumber": 563,
                  "startColumn": 1,
                  "endLineNumber": 563,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      let plot;",
                "range": {
                  "startLineNumber": 564,
                  "startColumn": 1,
                  "endLineNumber": 564,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      if (rallyIsPoint) {",
                "range": {
                  "startLineNumber": 565,
                  "startColumn": 1,
                  "endLineNumber": 565,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        plot = rallyCtx.toPlot();",
                "range": {
                  "startLineNumber": 566,
                  "startColumn": 1,
                  "endLineNumber": 566,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      }",
                "range": {
                  "startLineNumber": 567,
                  "startColumn": 1,
                  "endLineNumber": 567,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      let prevRallyCtx = null;",
                "range": {
                  "startLineNumber": 568,
                  "startColumn": 1,
                  "endLineNumber": 568,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      if (completedCtxIdx > 0) {",
                "range": {
                  "startLineNumber": 569,
                  "startColumn": 1,
                  "endLineNumber": 569,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        prevRallyCtx = completedCtxs[completedCtxIdx - 1];",
                "range": {
                  "startLineNumber": 570,
                  "startColumn": 1,
                  "endLineNumber": 570,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        if (!plot) {",
                "range": {
                  "startLineNumber": 571,
                  "startColumn": 1,
                  "endLineNumber": 571,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          plot = prevRallyCtx.getPlotForNextRally();",
                "range": {
                  "startLineNumber": 572,
                  "startColumn": 1,
                  "endLineNumber": 572,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 573,
                  "startColumn": 1,
                  "endLineNumber": 573,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      }",
                "range": {
                  "startLineNumber": 574,
                  "startColumn": 1,
                  "endLineNumber": 574,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      let revealSpoilerForRow = revealSpoiler;",
                "range": {
                  "startLineNumber": 575,
                  "startColumn": 1,
                  "endLineNumber": 575,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      if (!revealSpoiler) {",
                "range": {
                  "startLineNumber": 576,
                  "startColumn": 1,
                  "endLineNumber": 576,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        if (completedCtxIdx < completedCtxsEndIdx) {",
                "range": {
                  "startLineNumber": 577,
                  "startColumn": 1,
                  "endLineNumber": 577,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          revealSpoilerForRow = true;",
                "range": {
                  "startLineNumber": 578,
                  "startColumn": 1,
                  "endLineNumber": 578,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        } ",
                "range": {
                  "startLineNumber": 579,
                  "startColumn": 1,
                  "endLineNumber": 579,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      }",
                "range": {
                  "startLineNumber": 580,
                  "startColumn": 1,
                  "endLineNumber": 580,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 581,
                  "startColumn": 1,
                  "endLineNumber": 581,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      rallyRows.push(genRallyRow({",
                "range": {
                  "startLineNumber": 582,
                  "startColumn": 1,
                  "endLineNumber": 582,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        prevRallyCtx,",
                "range": {
                  "startLineNumber": 583,
                  "startColumn": 1,
                  "endLineNumber": 583,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        rallyCtx,",
                "range": {
                  "startLineNumber": 584,
                  "startColumn": 1,
                  "endLineNumber": 584,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        myName,",
                "range": {
                  "startLineNumber": 585,
                  "startColumn": 1,
                  "endLineNumber": 585,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        oppoName,",
                "range": {
                  "startLineNumber": 586,
                  "startColumn": 1,
                  "endLineNumber": 586,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        plot,",
                "range": {
                  "startLineNumber": 587,
                  "startColumn": 1,
                  "endLineNumber": 587,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        revealSpoiler: revealSpoilerForRow,",
                "range": {
                  "startLineNumber": 588,
                  "startColumn": 1,
                  "endLineNumber": 588,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      }, this.config));",
                "range": {
                  "startLineNumber": 589,
                  "startColumn": 1,
                  "endLineNumber": 589,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    });",
                "range": {
                  "startLineNumber": 590,
                  "startColumn": 1,
                  "endLineNumber": 590,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 591,
                  "startColumn": 1,
                  "endLineNumber": 591,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    // TODO sort rallyRows",
                "range": {
                  "startLineNumber": 592,
                  "startColumn": 1,
                  "endLineNumber": 592,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    rallyRows.reverse();",
                "range": {
                  "startLineNumber": 593,
                  "startColumn": 1,
                  "endLineNumber": 593,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 594,
                  "startColumn": 1,
                  "endLineNumber": 594,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    return rows.concat(rallyRows);",
                "range": {
                  "startLineNumber": 595,
                  "startColumn": 1,
                  "endLineNumber": 595,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 596,
                  "startColumn": 1,
                  "endLineNumber": 596,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 597,
                  "startColumn": 1,
                  "endLineNumber": 597,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  private moveToRallyContainingTime(earlyMoveMs = 1000) {",
                "range": {
                  "startLineNumber": 598,
                  "startColumn": 1,
                  "endLineNumber": 598,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    if (this.useRevealedRallyIdx()) {",
                "range": {
                  "startLineNumber": 599,
                  "startColumn": 1,
                  "endLineNumber": 599,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      this.moveToRallyContainingTimeForWatchMode(earlyMoveMs);",
                "range": {
                  "startLineNumber": 600,
                  "startColumn": 1,
                  "endLineNumber": 600,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 601,
                  "startColumn": 1,
                  "endLineNumber": 601,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 602,
                  "startColumn": 1,
                  "endLineNumber": 602,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 603,
                  "startColumn": 1,
                  "endLineNumber": 603,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  private moveToRallyContainingTimeForWatchMode(earlyMoveMs = 1000) {",
                "range": {
                  "startLineNumber": 604,
                  "startColumn": 1,
                  "endLineNumber": 604,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const currentTime = this.getCurrTime();",
                "range": {
                  "startLineNumber": 605,
                  "startColumn": 1,
                  "endLineNumber": 605,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    const rallies = this.gradebookMgr.project.matchData.rallies;",
                "range": {
                  "startLineNumber": 606,
                  "startColumn": 1,
                  "endLineNumber": 606,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    ",
                "range": {
                  "startLineNumber": 607,
                  "startColumn": 1,
                  "endLineNumber": 607,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    for (let idx = 0; idx < rallies.length; idx++) {",
                "range": {
                  "startLineNumber": 608,
                  "startColumn": 1,
                  "endLineNumber": 608,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      // TODO Start from nearby and go forward to speed up the search.",
                "range": {
                  "startLineNumber": 609,
                  "startColumn": 1,
                  "endLineNumber": 609,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      const rally = rallies[idx];",
                "range": {
                  "startLineNumber": 610,
                  "startColumn": 1,
                  "endLineNumber": 610,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      if (currentTime.videoIndex === rally.startTime.videoIndex &&",
                "range": {
                  "startLineNumber": 611,
                  "startColumn": 1,
                  "endLineNumber": 611,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          rally.startTime.ms - earlyMoveMs <= currentTime.ms && ",
                "range": {
                  "startLineNumber": 612,
                  "startColumn": 1,
                  "endLineNumber": 612,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          currentTime.ms <= rally.endTime.ms - earlyMoveMs) {",
                "range": {
                  "startLineNumber": 613,
                  "startColumn": 1,
                  "endLineNumber": 613,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        // Only update if cursor isn't already on this rally",
                "range": {
                  "startLineNumber": 614,
                  "startColumn": 1,
                  "endLineNumber": 614,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        if (this.revealedRallyIdx !== idx) {",
                "range": {
                  "startLineNumber": 615,
                  "startColumn": 1,
                  "endLineNumber": 615,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          this.revealedRallyIdx = idx;",
                "range": {
                  "startLineNumber": 616,
                  "startColumn": 1,
                  "endLineNumber": 616,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "          this.renderSheet();",
                "range": {
                  "startLineNumber": 617,
                  "startColumn": 1,
                  "endLineNumber": 617,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        }",
                "range": {
                  "startLineNumber": 618,
                  "startColumn": 1,
                  "endLineNumber": 618,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "        return;",
                "range": {
                  "startLineNumber": 619,
                  "startColumn": 1,
                  "endLineNumber": 619,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "      }",
                "range": {
                  "startLineNumber": 620,
                  "startColumn": 1,
                  "endLineNumber": 620,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    }",
                "range": {
                  "startLineNumber": 621,
                  "startColumn": 1,
                  "endLineNumber": 621,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 622,
                  "startColumn": 1,
                  "endLineNumber": 622,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 623,
                  "startColumn": 1,
                  "endLineNumber": 623,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 624,
                  "startColumn": 1,
                  "endLineNumber": 624,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "export declare namespace YT {",
                "range": {
                  "startLineNumber": 625,
                  "startColumn": 1,
                  "endLineNumber": 625,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  enum PlayerState {",
                "range": {
                  "startLineNumber": 626,
                  "startColumn": 1,
                  "endLineNumber": 626,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    ENDED = 0,",
                "range": {
                  "startLineNumber": 627,
                  "startColumn": 1,
                  "endLineNumber": 627,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    PLAYING = 1,",
                "range": {
                  "startLineNumber": 628,
                  "startColumn": 1,
                  "endLineNumber": 628,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    PAUSED = 2,",
                "range": {
                  "startLineNumber": 629,
                  "startColumn": 1,
                  "endLineNumber": 629,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "    BUFFERING = 3",
                "range": {
                  "startLineNumber": 630,
                  "startColumn": 1,
                  "endLineNumber": 630,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "  }",
                "range": {
                  "startLineNumber": 631,
                  "startColumn": 1,
                  "endLineNumber": 631,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "}",
                "range": {
                  "startLineNumber": 632,
                  "startColumn": 1,
                  "endLineNumber": 632,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "",
                "range": {
                  "startLineNumber": 633,
                  "startColumn": 1,
                  "endLineNumber": 633,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\ncustomElements.define('gradebook-ui', GradebookUi)",
                "range": {
                  "startLineNumber": 634,
                  "startColumn": 1073741825,
                  "endLineNumber": 634,
                  "endColumn": 1073741825
                }
              }
            ],
            [
              {
                "text": "\n",
                "range": {
                  "startLineNumber": 635,
                  "startColumn": 1073741825,
                  "endLineNumber": 635,
                  "endColumn": 1073741825
                }
              }
            ],
            []
          ],
          "done": true
        }
      ],
      "responseId": "response_dc6d325f-ef6a-429f-b261-0d0b015a7ca9",
      "isHidden": false,
      "result": {
        "timings": {
          "firstProgress": 9382,
          "totalElapsed": 53420
        },
        "metadata": {
          "edits": {
            "workingSet": [
              {
                "uri": {
                  "$mid": 1,
                  "fsPath": "/Users/kris/code/match-grader/src/tsModules/match-grader/gradebook_ui.ts",
                  "external": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/gradebook_ui.ts",
                  "path": "/Users/kris/code/match-grader/src/tsModules/match-grader/gradebook_ui.ts",
                  "scheme": "file"
                },
                "text": "import { matchKey } from \"../key-match/key_match\";\nimport { YoutubePlayerUi } from \"../youtube-player/youtube_player_ui\";\nimport { Cell, CellLoc, SheetUi } from \"./sheet_ui\";\nimport { GradebookMgr } from \"./gradebook_mgr\";\nimport { RATING_SCALE } from \"./constants\";\nimport { EphemeralBanner } from \"../ephemeral-banner\";\nimport { Rally, RallyResult, rallyResultToIndex, rallyResultVals } from \"./models/rally\";\nimport { Time } from \"./models/Time\";\nimport { mod, extractYoutubeId } from \"./gradebook_util\";\nimport { GradebookUiConfig, ColumnName } from \"./gradebook_ui_config\";\nimport { htmlTemplate } from \"./gradebook_ui_template\";\nimport { genFirstRow, genHeaderCol, genRallyRow } from \"./gradebook_col\";\nimport { defaultSortState } from \"./sort_state\";\nimport { StatCell, StatUi } from \"./stat_ui\";\n\n// Top-level UI to handle everything\nexport class GradebookUi extends HTMLElement {\n  public config: GradebookUiConfig = new GradebookUiConfig;\n  private youtubePlayerUi: YoutubePlayerUi = new YoutubePlayerUi;\n  private currentUrlIdx = 0;\n  // Only use this if useRevealedRallyIdx() == true.\n  private revealedRallyIdx = 0;\n  private sortState = defaultSortState;\n\n  private inputStartTime: Time | null = null;\n  private gradebookMgr = new GradebookMgr;\n\n  private sheetUi: SheetUi = new SheetUi;\n  private statUi: StatUi = new StatUi;\n  private banner: EphemeralBanner = new EphemeralBanner;\n\n  connectedCallback() {\n    this.innerHTML = `Loading project data.`;\n\n    // IFrame steals the focus on click; is polling the best we can do?\n    setInterval(() => {\n      if (document.activeElement && document.activeElement.tagName == \"IFRAME\") {\n        const elt = document.activeElement as HTMLIFrameElement;\n        elt.blur();\n      }\n    }, 1000);\n  }\n\n  // This should only be called once as we don't clean up the resources.\n  // Must call this to load the editor\n  async loadOrCreateProjectInUi(id: string) {\n    const finalProjectId = await this.gradebookMgr.loadOrCreateProject(id);\n\n    this.innerHTML = htmlTemplate;\n    this.banner = this.querySelector('ephemeral-banner') as EphemeralBanner;\n    this.statUi = this.querySelector('stat-ui')! as StatUi;\n    this.sheetUi = this.querySelector('sheet-ui')! as SheetUi;\n    // TODO see if we can move part of this inside SheetUi (replace setRowIdxAndVideo with moveVideoToCurrentRally)\n    this.sheetUi.onCellClick((cellLoc: CellLoc) => {\n      if (cellLoc.rowIdx < 2) {\n        return;\n      }\n      this.setRowIdxAndVideo(cellLoc.rowIdx - 2);\n      this.sheetUi.setColIdx(cellLoc.colIdx);\n      this.renderSheet();\n    });\n\n    this.youtubePlayerUi = this.querySelector('youtube-player-ui')! as YoutubePlayerUi;\n    await this.updateYoutubePlayer();\n\n    this.renderSheet();\n    // Need to render before moving cursor since the data needed to seek video time is in the sheet.\n    if (this.config.startFromBeginning) {\n      this.moveCursorToFirstRally();\n      this.sheetUi.setColIdx(this.getColIndex(ColumnName.GAME_SCORE));\n    }\n    if (this.config.enableMutation) {\n      this.moveRowIdxAndVideo(1);\n      this.sheetUi.setColIdx(this.getColIndex(ColumnName.START_TIME));\n    }\n    this.renderSheet();\n\n    if (this.config.moveCursorUpBasedOnVideoTime) {\n      window.setInterval(() => {\n        if (this.youtubePlayerUi.youtubePlayer.getPlayerState() === YT.PlayerState.PLAYING) {\n          this.moveToRallyContainingTime();\n        }\n      }, 1000);\n    }\n\n    if (this.config.spoilerColumns.length > 0) {\n      window.setInterval(() => {\n        if (this.videoTimeIsBeyondCurrentRally()) {\n          // TODO think of how to make this more efficient\n          // Design a publisher to notify when the video time passed certain key points.\n          this.renderSheet(true);\n        }\n      }, 1000);\n    }\n\n    return finalProjectId;\n  }\n\n  handleKeydown(evt: KeyboardEvent) {\n    this.handleKeydownWithoutChanges(evt);\n    this.handleKeydownWithSheetChanges(evt);\n  }\n\n  private getVideoPlayerUi() {\n    return this.youtubePlayerUi\n  }\n\n  private async handleKeydownWithoutChanges(evt: KeyboardEvent) {\n    if (matchKey(evt, 'space') || matchKey(evt, 'k')) {\n      this.getVideoPlayerUi().toggleVideoPlay();\n    } else if (matchKey(evt, 'y')) {\n      this.obtainYoutubeUrl();\n    } else if (matchKey(evt, 'z')) {\n      this.getVideoPlayerUi().incrementPlaybackRate(-0.2);\n    } else if (matchKey(evt, 'x')) {\n      this.getVideoPlayerUi().incrementPlaybackRate(0.2);\n    } else if (matchKey(evt, 'a')) {\n      this.getVideoPlayerUi().resetPlaybackRate();\n    } else if (matchKey(evt, 'l')) {\n      this.getVideoPlayerUi().move(1.5);\n    } else if (matchKey(evt, 'j')) {\n      this.getVideoPlayerUi().move(-3);\n    } else if (matchKey(evt, ';')) {\n      this.getVideoPlayerUi().move(5);\n    } else if (matchKey(evt, 'h')) {\n      this.getVideoPlayerUi().move(-5);\n    } else if (matchKey(evt, 'f')) {\n      const width = this.getVideoPlayerUi().getIframeWidth();\n      let wantWidth = width < 1000 ? width * 4 : width / 4;\n      this.getVideoPlayerUi().setIframeDims(wantWidth);\n    } else if (matchKey(evt, 'cmd+s')) {\n      evt.preventDefault();\n      this.banner.inProgress('Saving');\n      const failureMsg = await this.gradebookMgr.save();\n      if (failureMsg) {\n        this.banner.failure(failureMsg);\n      } else {\n        this.banner.success('Saved!');\n      }\n    } else if (matchKey(evt, 'cmd+shift+s')) {\n      evt.preventDefault();\n      await this.cloneAndGoToProject();\n    } else {\n      return;\n    }\n    evt.preventDefault();\n  }\n\n  private async cloneAndGoToProject() {\n    this.banner.inProgress('Cloning project...');\n    const newId = (new Date()).toISOString();\n\n    this.gradebookMgr.project.projectInfo.id = newId;\n    this.gradebookMgr.project.projectInfo.owner = '';\n\n    await this.gradebookMgr.save();\n    window.location.href = `${location.origin}/edit.html#id=${newId}`;\n  }\n\n  private useRevealedRallyIdx() {\n    // TODO detect no custom sorting\n    return this.config.hideFutureRallies;\n  }\n\n  private getCurrRallyStartTime() {\n    const cell = this.sheetUi.getSelectedCell();\n    if (!cell || !cell.data) {\n      return;\n    }\n    const rally = cell.data as Rally;\n    return rally.startTime;\n  }\n\n  private getCurrRally() {\n    const time = this.getCurrRallyStartTime();\n    if (!time) {\n      return;\n    }\n    return this.gradebookMgr.getRally(time);\n  }\n\n  private getCurrRallyContext() {\n    const rallyContexts = this.gradebookMgr.project.matchData.getRallyContexts();\n    const last = rallyContexts[rallyContexts.length - 1];\n    const time = this.getCurrRallyStartTime();\n    if (!time) {\n      return last;\n    }\n    return rallyContexts.find(rallyCtx => {\n      return time.equals(rallyCtx.rally.startTime);\n    }) || last;\n    \n  }\n\n  private moveVideoToCurrentRally(paddingMs = -1000) {\n    const rally = this.getCurrRally();\n    if (rally) {\n      const startTime = new Time(rally.startTime.ms + paddingMs, rally.startTime.videoIndex);\n      this.moveTo(startTime);\n    } else {\n      const rallies = this.gradebookMgr.project.matchData.rallies;\n      const lastRally = rallies[rallies.length - 1];\n      if (lastRally) {\n        const time = new Time(lastRally.endTime.ms, lastRally.endTime.videoIndex);\n        if (time.greaterThan(this.getCurrTime())) {\n          this.moveTo(time);\n        }\n      }\n\n    }\n  }\n\n  private setRowIdxAndVideo(idx: number) {\n    this.sheetUi.setRowIdx(idx);\n    if (this.useRevealedRallyIdx()) {\n      const rally = this.getCurrRally();\n      if (!rally) {\n        console.warn('getCurrRally is null');\n        return;\n      }\n      const idx = this.gradebookMgr.findRallyIdx(rally.startTime);\n      if (idx < 0) {\n        console.warn('Unable to find index of current rally');\n\n      }\n      this.revealedRallyIdx = idx;\n    }\n\n    if (this.config.upDownArrowJumpsToStartTime) {\n      this.moveVideoToCurrentRally();\n    }\n  }\n\n  private moveRowIdxAndVideo(num: number) {\n    if (this.useRevealedRallyIdx()) {\n      // Moving up means num == -1, which is +1 for revealedRallyIdx.\n      this.revealedRallyIdx -= num;\n      // Need to render to propagate this info to the sheet data.\n      this.renderSheet();\n    } else {\n      this.sheetUi.moveRowIdx(num);\n    }\n\n    if (this.config.enableMutation && this.sheetUi.getRowIdx() === 0) {\n      if (this.inputStartTime) {\n        this.sheetUi.setColIdx(this.getColIndex(ColumnName.END_TIME));\n      } else {\n        this.sheetUi.setColIdx(this.getColIndex(ColumnName.START_TIME));\n      }\n    }\n\n    if (this.config.upDownArrowJumpsToStartTime) {\n      this.moveVideoToCurrentRally();\n    }\n  }\n\n  private handleKeydownWithSheetChanges(evt: KeyboardEvent) {\n    if (matchKey(evt, 'up')) {\n      this.moveRowIdxAndVideo(-1);\n    } else if (matchKey(evt, 'down')) {\n      this.moveRowIdxAndVideo(1);\n    } else if (matchKey(evt, `\\\\`) && this.config.enableMutation) {\n      this.tabSelectedCell();\n    } else if (matchKey(evt, `shift+|`) && this.config.enableMutation) {\n      this.tabSelectedCell(true);\n    } else if (matchKey(evt, 'tab')) {\n      this.sheetUi.moveColIdx(1);\n    } else if (matchKey(evt, 'right')) {\n      if (this.config.leftRightArrowMovesVideo) {\n        this.getVideoPlayerUi().move(5);\n      } else {\n        this.sheetUi.moveColIdx(1);\n      }\n    } else if (matchKey(evt, 'shift+tab')) {\n      this.sheetUi.moveColIdx(-1);\n    } else if (matchKey(evt, 'left')) {\n      if (this.config.leftRightArrowMovesVideo) {\n        this.getVideoPlayerUi().move(-5);\n      } else {\n        this.sheetUi.moveColIdx(-1);\n      }\n    } else if (matchKey(evt, 'backspace') && this.config.enableMutation) {\n      this.gradebookMgr.removeRally(this.getCurrRally());\n    } else if (matchKey(evt, 'cmd+z') && this.config.enableMutation) {\n      if (this.inputStartTime) {\n        this.inputStartTime = null;\n        this.sheetUi.setColIdx(this.getColIndex(ColumnName.START_TIME));\n      }\n    } else if (matchKey(evt, 'enter')) {\n      if (this.config.enableMutation) {\n        this.enterSelectedCell();\n      } else {\n        this.moveRowIdxAndVideo(-1);\n      }\n    } else {\n      return;\n    }\n    this.renderSheet();\n    evt.preventDefault();\n  }\n\n  private getColIndex(colName: ColumnName): number {\n    const poss = this.config.visibleColumns.indexOf(colName);\n    if (poss !== -1) {\n      return poss;\n    }\n    return 0;\n  }\n\n  private enterSelectedCell() {\n    const rally = this.getCurrRally();\n    if (!rally) {\n      if (this.inputStartTime) {\n        this.promoteRally();\n        return;\n      }\n      this.updateInputStartTime();\n      return;\n    }\n    const col = this.config.visibleColumns[this.sheetUi.getColIdx()];\n\n    if (col === ColumnName.START_TIME) {\n      this.moveRowIdxAndVideo(-1);\n    } else if (col === ColumnName.END_TIME) {\n      if (this.config.upDownArrowJumpsToStartTime) {\n        rally.endTime = this.getCurrTime();\n        // move to start time col of next rally\n        this.sheetUi.moveColIdx(-1);\n        this.moveRowIdxAndVideo(-1);\n      } else {\n        this.moveRowIdxAndVideo(-1);\n      }\n    } else if (col === ColumnName.RESULT) {\n      if (rally.result === RallyResult.PtReturner || rally.result === RallyResult.PtServer) {\n        this.sheetUi.moveColIdx(1);\n      } else {\n        this.moveRowIdxAndVideo(-1);\n      }\n    } else if (col === ColumnName.WINNER_LAST_SHOT) {\n      this.sheetUi.moveColIdx(1);\n    } else if (col === ColumnName.LOSER_PREVIOUS_SHOT) {\n      this.moveRowIdxAndVideo(-1);\n    } else if (col === ColumnName.SERVER) {\n      const name = prompt(`Enter server's name`);\n      if (name) {\n        if (rally.isMyServe) {\n          this.gradebookMgr.project.matchData.myName = name;\n        } else {\n          this.gradebookMgr.project.matchData.oppoName = name;\n        }\n      }\n    }\n  }\n\n  private tabSelectedCell(opposite = false) {\n    const rally = this.getCurrRally();\n    if (!rally) {\n      return;\n    }\n    const col = this.config.visibleColumns[this.sheetUi.getColIdx()];\n\n    if (col === ColumnName.RESULT) {\n      const idx = rallyResultToIndex.get(rally.result);\n      const next = opposite ? idx - 1 : idx + 1 + rallyResultToIndex.size;\n      const nextIdx = next % rallyResultToIndex.size;\n      rally.result = rallyResultVals[nextIdx];\n      console.log(rally);\n    } else if (col === ColumnName.WINNER_LAST_SHOT) {\n      const ratingChange = opposite ? 1 : -1;\n      rally.stat.winnerLastShotQuality = mod(\n        rally.stat.winnerLastShotQuality + ratingChange, RATING_SCALE + 1);\n    } else if (col === ColumnName.LOSER_PREVIOUS_SHOT) {\n      const ratingChange = opposite ? -1 : 1;\n      rally.stat.loserPreviousShotQuality = mod(\n        rally.stat.loserPreviousShotQuality + ratingChange, RATING_SCALE + 1);\n    } else if (col === ColumnName.SERVER) {\n      rally.isMyServe = !rally.isMyServe;\n    } else if (col === ColumnName.START_TIME) {\n      rally.startTime.ms += opposite ? -500 : 500;\n      this.moveTo(rally.startTime);\n    } else if (col === ColumnName.END_TIME) {\n      rally.endTime.ms += opposite ? -500 : 500;\n      this.moveTo(rally.endTime);\n    }\n  }\n\n  private renderSheet(revealSpoiler = false) {\n    this.statUi.render(this.genStatSheet());\n    this.sheetUi.render(this.genSheet(revealSpoiler));\n  }\n\n  private obtainYoutubeUrl() {\n    const url = prompt('Enter url');\n    if (!url) {\n      return;\n    }\n    const res = extractYoutubeId(url);\n    if (!res.success) {\n      return;\n    }\n    this.gradebookMgr.project.matchData.urls.push(url);\n    if (this.gradebookMgr.project.matchData.urls.length === 1) {\n      // Only update player for first video, subsequent ones will play automatically\n      this.updateYoutubePlayer();\n    }\n  }\n\n  private async updateYoutubePlayer() {\n    const urls = this.gradebookMgr.project.matchData.urls;\n    if (urls.length < 1) {\n      return;\n    }\n    const { success, id } = extractYoutubeId(urls[this.currentUrlIdx]);\n    if (!success) {\n      return;\n    }\n    await this.youtubePlayerUi.initYoutubePlayer(id, this.currentUrlIdx > 0);  // autoplay=true for subsequent videos\n    this.youtubePlayerUi.onEnd(() => {\n      if (this.currentUrlIdx < urls.length - 1) {\n        this.currentUrlIdx++;\n        this.updateYoutubePlayer();\n      }\n    });\n  }\n\n  private async moveTo(time: Time) {\n    if (time.videoIndex !== this.currentUrlIdx) {\n      this.currentUrlIdx = time.videoIndex;\n      const urls = this.gradebookMgr.project.matchData.urls;\n      const { success, id } = extractYoutubeId(urls[this.currentUrlIdx]);\n      if (!success) {\n        return;\n      }\n      await this.youtubePlayerUi.initYoutubePlayer(id, true);\n      this.youtubePlayerUi.moveTo(time.ms);\n    } else {\n      this.youtubePlayerUi.moveTo(time.ms);\n    }\n  }\n\n  private getCurrTime() {\n    const nowSec = this.youtubePlayerUi.youtubePlayer.getCurrentTime();\n    return new Time(Math.round(nowSec * 1000), this.currentUrlIdx);\n  }\n\n  private updateInputStartTime() {\n    this.inputStartTime = this.getCurrTime();\n    this.sheetUi.setColIdx(this.getColIndex(ColumnName.END_TIME));\n    this.renderSheet();\n  }\n\n  private promoteRally() {\n    if (!this.inputStartTime) {\n      console.warn('cannot promote rally without inputStartTime');\n      return;\n    }\n    const nowTime = this.getCurrTime();\n    const guessRes = nowTime.ms - this.inputStartTime.ms < 3500 ? RallyResult.Fault : RallyResult.PtServer;\n    this.gradebookMgr.project.matchData.addRally(this.inputStartTime, nowTime, guessRes);\n    this.sheetUi.setColIdx(this.getColIndex(ColumnName.RESULT));\n    this.sheetUi.setRowIdx(1);\n\n    this.inputStartTime = null;\n    this.renderSheet();\n  }\n\n  private moveCursorToFirstRally() {\n    this.sheetUi.setColIdx(this.getColIndex(ColumnName.GAME_SCORE));\n    this.setRowIdxAndVideo(0);\n  }\n\n  private videoTimeIsBeyondCurrentRally() {\n    const rally = this.getCurrRally();\n    if (!rally) {\n      return true;\n    }\n    const currentTime = this.getCurrTime();\n    return currentTime.videoIndex > rally.endTime.videoIndex || \n           (currentTime.videoIndex === rally.endTime.videoIndex && \n            currentTime.ms > rally.endTime.ms);\n  }\n\n  private genStatSheet() {\n    const rows = [];\n    const project = this.gradebookMgr.project;\n    rows.push([new StatCell(''), new StatCell(project.matchData.myName), new StatCell(project.matchData.oppoName)]);\n\n    const stat = this.getCurrRallyContext().matchStatBeforeRally;\n    rows.push([new StatCell('🟢'), new StatCell(stat.getP1WinningPct()), new StatCell(stat.getP2WinningPct())]);\n    rows.push([new StatCell('Serve 🟢'), new StatCell(stat.p1Stats.getServePointsWonPct()), new StatCell(stat.p2Stats.getServePointsWonPct())]);\n    rows.push([new StatCell('Serve #1 🟢'), new StatCell(stat.p1Stats.getFirstServePointsWonPct()), new StatCell(stat.p2Stats.getFirstServePointsWonPct())]);\n    rows.push([new StatCell('Serve #2 🟢'), new StatCell(stat.p1Stats.getSecondServePointsWonPct()), new StatCell(stat.p2Stats.getSecondServePointsWonPct())]);\n    rows.push([new StatCell('Serve #1'), new StatCell(stat.p1Stats.getFirstServePct()), new StatCell(stat.p2Stats.getFirstServePct())]);\n    rows.push([new StatCell('Serve #2'), new StatCell(stat.p1Stats.getSecondServePct()), new StatCell(stat.p2Stats.getSecondServePct())]);\n    rows.push([new StatCell('Forcing💪🟢'), new StatCell(stat.getP1ForcingWinPct()), new StatCell(stat.getP2ForcingWinPct())]);\n    rows.push([new StatCell(`Serve 💪🟢`), new StatCell(stat.getP1ForcingWinPctOnServe()), new StatCell(stat.getP2ForcingWinPctOnServe())]);\n    rows.push([new StatCell(`Serv 1 💪🟢`), new StatCell(stat.getP1ForcingWinPctOnFirstServe()), new StatCell(stat.getP2ForcingWinPctOnFirstServe())]);\n    rows.push([new StatCell(`Serv 2 💪🟢`), new StatCell(stat.getP1ForcingWinPctOnSecondServe()), new StatCell(stat.getP2ForcingWinPctOnSecondServe())]);\n    rows.push([new StatCell(`Return 💪🟢`), new StatCell(stat.getP1ForcingWinPctOnReturn()), new StatCell(stat.getP2ForcingWinPctOnReturn())]);\n    rows.push([new StatCell(`Ret 1 💪🟢`), new StatCell(stat.getP1ForcingWinPctOnFirstReturn()), new StatCell(stat.getP2ForcingWinPctOnFirstReturn())]);\n    rows.push([new StatCell(`Ret 2 💪🙀🟢`), new StatCell(stat.getP1ForcingWinPctOnSecondReturn()), new StatCell(stat.getP2ForcingWinPctOnSecondReturn())]);\n    rows.push([new StatCell('UE Total 🔻'), new StatCell(stat.getP1UnforcedErrorPct()), new StatCell(stat.getP2UnforcedErrorPct())]);\n    rows.push([new StatCell('UE Serve 🔻'), new StatCell(stat.getP1UnforcedErrorPctOnServe()), new StatCell(stat.getP2UnforcedErrorPctOnServe())]);\n    rows.push([new StatCell('UE Serve1 🔻'), new StatCell(stat.getP1UnforcedErrorPctOnFirstServe()), new StatCell(stat.getP2UnforcedErrorPctOnFirstServe())]);\n    rows.push([new StatCell('UE Serve2 🔻'), new StatCell(stat.getP1UnforcedErrorPctOnSecondServe()), new StatCell(stat.getP2UnforcedErrorPctOnSecondServe())]);\n    rows.push([new StatCell('UE Return 🔻'), new StatCell(stat.getP1UnforcedErrorPctOnReturn()), new StatCell(stat.getP2UnforcedErrorPctOnReturn())]);\n    return rows;\n  }\n\n  private genSheet(revealSpoiler = false): Cell[][] {\n    const project = this.gradebookMgr.project;\n    const rows = [];\n    const headerRow = this.config.visibleColumns.map(colName => genHeaderCol(colName));\n    rows.push(headerRow);\n\n    const myName = project.matchData.myName;\n    const oppoName = project.matchData.oppoName;\n    const rallyContexts = this.gradebookMgr.project.matchData.getRallyContexts();\n\n    const setupInputStartTimeBtn = () => {\n      const btn = this.querySelector('#input-start-time') as HTMLButtonElement;\n      if (btn) {\n        btn.onclick = () => this.updateInputStartTime();\n      }\n    };\n    const setupInputEndTimeBtn = () => {\n      const btn = this.querySelector('#input-end-time') as HTMLButtonElement;\n      if (btn) {\n        btn.onclick = () => this.promoteRally();\n      }\n    };\n\n    // The latest rallyContext should only have score and not a rally.\n    const latestRallyCtx = rallyContexts[rallyContexts.length - 1];\n    let latestPlot = latestRallyCtx.toPlot();\n    if (!latestPlot && 1 < rallyContexts.length) {\n      const prevRallyCtx = rallyContexts[rallyContexts.length - 2];\n      latestPlot = prevRallyCtx.getPlotForNextRally();\n    }\n\n    const hideFirstRow = this.config.hideFutureRallies;\n    if (!hideFirstRow) {\n      rows.push(genFirstRow({\n        latestRallyCtx,\n        latestPlot,\n        inputStartTime: this.inputStartTime,\n        setupInputStartTimeBtn,\n        setupInputEndTimeBtn,\n      }, this.config));\n    }\n\n    const rallyRows: Cell[][] = [];\n    let completedCtxsEndIdx = rallyContexts.length - 2;\n    if (this.useRevealedRallyIdx()) {\n      completedCtxsEndIdx = this.revealedRallyIdx;\n    }\n    const completedCtxs = rallyContexts.slice(0, completedCtxsEndIdx + 1);\n    completedCtxs.forEach((rallyCtx, completedCtxIdx) => {\n      const rallyIsPoint = rallyCtx.isDoubleFault() ||\n        rallyCtx.rally.result === RallyResult.PtServer ||\n        rallyCtx.rally.result === RallyResult.PtReturner;\n      let plot;\n      if (rallyIsPoint) {\n        plot = rallyCtx.toPlot();\n      }\n      let prevRallyCtx = null;\n      if (completedCtxIdx > 0) {\n        prevRallyCtx = completedCtxs[completedCtxIdx - 1];\n        if (!plot) {\n          plot = prevRallyCtx.getPlotForNextRally();\n        }\n      }\n      let revealSpoilerForRow = revealSpoiler;\n      if (!revealSpoiler) {\n        if (completedCtxIdx < completedCtxsEndIdx) {\n          revealSpoilerForRow = true;\n        } \n      }\n\n      rallyRows.push(genRallyRow({\n        prevRallyCtx,\n        rallyCtx,\n        myName,\n        oppoName,\n        plot,\n        revealSpoiler: revealSpoilerForRow,\n      }, this.config));\n    });\n\n    // TODO sort rallyRows\n    rallyRows.reverse();\n\n    return rows.concat(rallyRows);\n  }\n\n  private moveToRallyContainingTime(earlyMoveMs = 1000) {\n    if (this.useRevealedRallyIdx()) {\n      this.moveToRallyContainingTimeForWatchMode(earlyMoveMs);\n    }\n  }\n\n  private moveToRallyContainingTimeForWatchMode(earlyMoveMs = 1000) {\n    const currentTime = this.getCurrTime();\n    const rallies = this.gradebookMgr.project.matchData.rallies;\n    \n    for (let idx = 0; idx < rallies.length; idx++) {\n      // TODO Start from nearby and go forward to speed up the search.\n      const rally = rallies[idx];\n      if (currentTime.videoIndex === rally.startTime.videoIndex &&\n          rally.startTime.ms - earlyMoveMs <= currentTime.ms && \n          currentTime.ms <= rally.endTime.ms - earlyMoveMs) {\n        // Only update if cursor isn't already on this rally\n        if (this.revealedRallyIdx !== idx) {\n          this.revealedRallyIdx = idx;\n          this.renderSheet();\n        }\n        return;\n      }\n    }\n  }\n}\n\nexport declare namespace YT {\n  enum PlayerState {\n    ENDED = 0,\n    PLAYING = 1,\n    PAUSED = 2,\n    BUFFERING = 3\n  }\n}\n\ncustomElements.define('gradebook-ui', GradebookUi)\n",
                "languageId": "typescript",
                "version": 28261,
                "state": 1
              },
              {
                "uri": {
                  "$mid": 1,
                  "fsPath": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
                  "external": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
                  "path": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
                  "scheme": "file"
                },
                "text": "import { MatchStat } from \"./match_stat\";\nimport { Rally, RallyResult } from \"./rally\";\nimport {  isTieBreakTime, PersonScore, Score } from \"./score\";\nimport { isForcingWin, isUnforcedError } from './risk_level';\n\nexport class RallyContext {\n  constructor(\n    public rally = new Rally(),\n    public scoreBeforeRally = new Score(),\n    public matchStatBeforeRally = new MatchStat(),\n  ) {}\n\n  getResultStr(myName: string, oppoName: string) {\n    const server = this.rally.isMyServe ? myName : oppoName;\n    const returner = this.rally.isMyServe ? oppoName : myName;\n    if (this.rally.result === RallyResult.PtServer) {\n      return `Pt. ${server}`;\n    } else if (this.rally.result === RallyResult.PtReturner) {\n      return `Pt. ${returner}`;\n    }\n    return this.rally.result;\n  }\n\n  getResultSymbolStr() {\n    if (this.rally.result === RallyResult.PtServer) {\n      return this.rally.isMyServe ? `${greenBall} ${whiteBall}` : `${whiteBall} ${greenBall}`;\n    } else if (this.rally.result === RallyResult.PtReturner) {\n      return this.rally.isMyServe ? `${redBall} ${whiteBall}` : `${whiteBall} ${redBall}`;\n    } else if (this.rally.result === RallyResult.Fault) {\n      if (this.isSecondServe()) {\n        return this.rally.isMyServe ? `${redHeart} ${whiteBall}` : `${whiteBall} ${redHeart}`;\n      }\n      return this.rally.isMyServe ? `${yellowBall} ${whiteBall}` : `${whiteBall} ${yellowBall}`;\n    }\n    return this.rally.result;\n  }\n  \n  toGameScoreStr() {\n    const strs = [];\n    if (this.isNewSet()) {\n      this.scoreBeforeRally.p1.gamesByCompletedSet.forEach((p1Games, idx) => {\n        strs.push(`[${p1Games}-${this.scoreBeforeRally.p2.gamesByCompletedSet[idx]}]`);\n      });\n    }\n    if (this.isNewGame()) {\n      strs.push(`[${this.scoreBeforeRally.p1.games}-${this.scoreBeforeRally.p2.games}]`);\n    }\n\n    return strs.join(' ');\n  }\n\n  isDoubleFault() {\n      return this.isSecondServe() && this.rally.result === RallyResult.Fault;\n  }\n\n  winnerIsMe() {\n    return (this.rally.isMyServe && this.rally.result === RallyResult.PtServer) ||\n        (!this.rally.isMyServe && (this.rally.result === RallyResult.PtReturner || this.isDoubleFault()));\n  }\n  winnerIsOppo() {\n    return (!this.rally.isMyServe && this.rally.result === RallyResult.PtServer) ||\n        (this.rally.isMyServe && (this.rally.result === RallyResult.PtReturner || this.isDoubleFault()));\n  }\n\n  getScoreAfterRally() {\n    const rally = this.rally;\n    const scoreAfterRally = this.scoreBeforeRally.clone();\n\n    const serverScore = rally.isMyServe ? scoreAfterRally.p1 : scoreAfterRally.p2;\n    const returnerScore = rally.isMyServe ? scoreAfterRally.p2 : scoreAfterRally.p1;\n    const serverWon = rally.result === RallyResult.PtServer;\n    if (serverWon) {\n      updateSubjectWin(serverScore, returnerScore);\n      return scoreAfterRally;\n    }\n\n    let returnerWon = rally.result === RallyResult.PtReturner;\n    if (rally.result === RallyResult.Fault) {\n      if (serverScore.serve === 0) {\n        serverScore.serve = 1;\n        return scoreAfterRally;\n      }\n      returnerWon = true;\n    }\n    if (returnerWon) {\n      updateSubjectWin(returnerScore, serverScore);\n    }\n    return scoreAfterRally;\n  }\n\n  inferWillBeMyServe(){}\n\n  isSecondServe() {\n    return this.scoreBeforeRally.p1.serve === 1 || this.scoreBeforeRally.p2.serve === 1;\n  }\n\n  isNewSet() {\n    if (!this.isNewGame()) {\n      return false;\n    }\n    return this.scoreBeforeRally.p1.games === 0 && this.scoreBeforeRally.p2.games === 0;\n  }\n\n  isNewGame() {\n    return this.scoreBeforeRally.p1.points === 0 && this.scoreBeforeRally.p1.serve === 0\n        && this.scoreBeforeRally.p2.points === 0 && this.scoreBeforeRally.p2.serve === 0;\n  }\n\n  isMyServeGame() {\n    if (!isTieBreakTime(this.scoreBeforeRally.p1, this.scoreBeforeRally.p2)) {\n      return this.rally.isMyServe;\n    }\n      // For a tiebreak, the player who serve first is his serve game.\n    const numTieBreakPtsMod4 = (this.scoreBeforeRally.p1.points + this.scoreBeforeRally.p2.points) % 4;\n    if (numTieBreakPtsMod4 === 1 || numTieBreakPtsMod4 === 4) {\n      return !this.rally.isMyServe;\n    }\n    return this.rally.isMyServe;\n  }\n\n  getPlotForNextRally() {\n    const myGamePt = isSubjectGamePoint(this.scoreBeforeRally.p1, this.scoreBeforeRally.p2);\n    const oppoGamePt = isSubjectGamePoint(this.scoreBeforeRally.p2, this.scoreBeforeRally.p1);\n    if (!myGamePt && !oppoGamePt) {\n      return;\n    }\n    const winnerIsMe = this.winnerIsMe();\n    const winnerIsOppo = this.winnerIsOppo();\n    const myConversion = myGamePt && winnerIsMe;\n    const oppoConversion = oppoGamePt && winnerIsOppo;\n    if (!myConversion && !oppoConversion) {\n      return;\n    }\n\n    return {\n      text: 'Converted',\n      isMyPlot: myConversion,\n    };\n  }\n\n  toPlot() {\n    const myGamePt = isSubjectGamePoint(this.scoreBeforeRally.p1, this.scoreBeforeRally.p2);\n    const oppoGamePt = isSubjectGamePoint(this.scoreBeforeRally.p2, this.scoreBeforeRally.p1);\n    const isSetPt = isSubjectSetPoint(this.scoreBeforeRally.p1, this.scoreBeforeRally.p2) || isSubjectSetPoint(this.scoreBeforeRally.p2, this.scoreBeforeRally.p1);\n    const myServeGame = this.isMyServeGame();\n    const isBreakPt = (myGamePt && !myServeGame) || (oppoGamePt && myServeGame);\n    const emphasis = isBreakPt ? '*' : '';\n    if (!myGamePt && !oppoGamePt) {\n      return;\n    }\n    let text = 'Game Pt';\n    if (isSetPt) {\n      text = `${emphasis}Set Pt`;\n    } else if (isBreakPt) {\n      text = 'Break pt';\n    }\n    return {\n      text: text,\n      isMyPlot: myGamePt,\n    };\n  }\n}\n\nconst whiteBall = `◯`;\nconst greenBall = `🟢`;\nconst yellowBall = `🟡`;\nconst redBall = `🔴`;\nconst redHeart = `🟥 `;\n\nexport function updateSubjectWin(subjectScore: PersonScore, otherScore: PersonScore) {\n  if (isSubjectSetPoint(subjectScore, otherScore)) {\n    subjectScore.gamesByCompletedSet.push(subjectScore.games + 1);\n    subjectScore.games = 0;\n    subjectScore.points = 0;\n    subjectScore.serve = 0;\n    otherScore.gamesByCompletedSet.push(otherScore.games);\n    otherScore.games = 0;\n    otherScore.points = 0;\n    otherScore.serve = 0;\n    return;\n  }\n  if (isSubjectGamePoint(subjectScore, otherScore)) {\n    subjectScore.games += 1;\n    subjectScore.points = 0;\n    subjectScore.serve = 0;\n    otherScore.points = 0;\n    otherScore.serve = 0;\n    return;\n  }\n  subjectScore.points += 1;\n  subjectScore.serve = 0;\n  otherScore.serve = 0;\n}\n\nfunction isSubjectGamePoint(subjectScore: PersonScore, otherScore: PersonScore) {\n  let deuceScore = isTieBreakTime(subjectScore, otherScore) ? 6 : 3;\n  return subjectScore.points >= deuceScore && subjectScore.points - otherScore.points >= 1;\n}\n\nfunction isSubjectSetPoint(subjectScore: PersonScore, otherScore: PersonScore) {\n  if (!isSubjectGamePoint(subjectScore, otherScore)) {\n    return false;\n  }\n  if (isTieBreakTime(subjectScore, otherScore)) {\n    return true;\n  }\n  return subjectScore.games >= 5 && subjectScore.games - otherScore.games >= 1;\n}\n\n\nexport function annotateMatchStat(rallyContexts: RallyContext[]) {\n  const stat = new MatchStat();\n  rallyContexts.forEach((rallyContext) => {\n    rallyContext.matchStatBeforeRally = stat.clone();\n\n    // Check game points and set points using direct score comparison\n    if (isSubjectGamePoint(rallyContext.scoreBeforeRally.p1, rallyContext.scoreBeforeRally.p2)) {\n      stat.p1Stats.numGamePts++;\n      if (isSubjectSetPoint(rallyContext.scoreBeforeRally.p1, rallyContext.scoreBeforeRally.p2)) {\n        stat.p1Stats.numSetPts++;\n      }\n    }\n    if (isSubjectGamePoint(rallyContext.scoreBeforeRally.p2, rallyContext.scoreBeforeRally.p1)) {\n      stat.p2Stats.numGamePts++;\n      if (isSubjectSetPoint(rallyContext.scoreBeforeRally.p2, rallyContext.scoreBeforeRally.p1)) {\n        stat.p2Stats.numSetPts++;\n      }\n    }\n\n    function isReturnerPtForSecondServe(rallyContext: RallyContext) {\n      if (!rallyContext.isSecondServe()) {\n        return false;\n      }\n      return rallyContext.rally.result === RallyResult.PtReturner || rallyContext.rally.result === RallyResult.Fault;\n    }\n    if (rallyContext.rally.isMyServe) {\n      const serverStats = stat.p1Stats;\n      const returnerStats = stat.p2Stats;\n      const isSecondServe = rallyContext.isSecondServe();\n      \n      if (isSecondServe) {\n        if (rallyContext.rally.result !== RallyResult.Let) {\n          serverStats.numSecondServes++;\n        }\n        if (rallyContext.rally.result !== RallyResult.Fault) {\n          serverStats.numSecondServesMade++;\n          if (rallyContext.rally.result === RallyResult.PtServer) {\n            serverStats.numSecondServesWon++;\n            if (isForcingWin(rallyContext)) {\n              serverStats.numSecondServeForcingWins++;\n            }\n          } else if (isReturnerPtForSecondServe(rallyContext) && isForcingWin(rallyContext)) {\n            returnerStats.numSecondServeForcingWinsByReturner++;\n          }\n        }\n        if (isReturnerPtForSecondServe(rallyContext) && isUnforcedError(rallyContext)) {\n          serverStats.numSecondServeUnforcedErrors++;\n        }\n        if (rallyContext.rally.result === RallyResult.PtServer && isUnforcedError(rallyContext)) {\n          returnerStats.numSecondServeUnforcedErrorsByReturner++;\n        }\n      } else {\n        if (rallyContext.rally.result !== RallyResult.Let) {\n          serverStats.numFirstServes++;\n        }\n        if (rallyContext.rally.result !== RallyResult.Fault) {\n          serverStats.numFirstServesMade++;\n          if (rallyContext.rally.result === RallyResult.PtServer) {\n            serverStats.numFirstServesWon++;\n            if (isForcingWin(rallyContext)) {\n              serverStats.numFirstServeForcingWins++;\n            }\n          } else if (rallyContext.rally.result === RallyResult.PtReturner && isForcingWin(rallyContext)) {\n            returnerStats.numFirstServeForcingWinsByReturner++;\n          }\n        }\n        if (rallyContext.rally.result === RallyResult.PtReturner && isUnforcedError(rallyContext)) {\n          serverStats.numFirstServeUnforcedErrors++;\n        }\n        if (rallyContext.rally.result === RallyResult.PtServer && isUnforcedError(rallyContext)) {\n          returnerStats.numFirstServeUnforcedErrorsByReturner++;\n        }\n      }\n    } else {\n      const serverStats = stat.p2Stats;\n      const returnerStats = stat.p1Stats;\n      const isSecondServe = rallyContext.isSecondServe();\n      \n      if (!isSecondServe) {\n        serverStats.numFirstServes++;\n        if (rallyContext.rally.result !== RallyResult.Fault) {\n          serverStats.numFirstServesMade++;\n          if (rallyContext.rally.result === RallyResult.PtServer) {\n            serverStats.numFirstServesWon++;\n            if (isForcingWin(rallyContext)) {\n              serverStats.numFirstServeForcingWins++;\n            }\n          } else if (rallyContext.rally.result === RallyResult.PtReturner && isForcingWin(rallyContext)) {\n            returnerStats.numFirstServeForcingWinsByReturner++;\n          }\n        }\n        if (rallyContext.rally.result === RallyResult.PtReturner && isUnforcedError(rallyContext)) {\n          serverStats.numFirstServeUnforcedErrors++;\n        }\n        if (rallyContext.rally.result === RallyResult.PtServer && isUnforcedError(rallyContext)) {\n          returnerStats.numFirstServeUnforcedErrorsByReturner++;\n        }\n      } else {\n        serverStats.numSecondServes++;\n        if (rallyContext.rally.result !== RallyResult.Fault) {\n          serverStats.numSecondServesMade++;\n          if (rallyContext.rally.result === RallyResult.PtServer) {\n            serverStats.numSecondServesWon++;\n            if (isForcingWin(rallyContext)) {\n              serverStats.numSecondServeForcingWins++;\n            }\n          } else if (isReturnerPtForSecondServe(rallyContext) && isForcingWin(rallyContext)) {\n            returnerStats.numSecondServeForcingWinsByReturner++;\n          }\n        }\n        if (isReturnerPtForSecondServe(rallyContext) && isUnforcedError(rallyContext)) {\n          serverStats.numSecondServeUnforcedErrors++;\n        }\n        if (rallyContext.rally.result === RallyResult.PtServer && isUnforcedError(rallyContext)) {\n          returnerStats.numSecondServeUnforcedErrorsByReturner++;\n        }\n      }\n    }\n  });\n}\n",
                "languageId": "typescript",
                "version": 2218,
                "state": 2
              },
              {
                "uri": {
                  "$mid": 1,
                  "fsPath": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/match_stat.ts",
                  "external": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/match_stat.ts",
                  "path": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/match_stat.ts",
                  "scheme": "file"
                },
                "text": "export class MatchStat {\n  constructor(\n    public p1Stats = new PlayerStat(),\n    public p2Stats = new PlayerStat(),\n  ) {}\n\n  static deserialize(json: any) {\n    return new MatchStat(\n      PlayerStat.deserialize(json.p1Stats),\n      PlayerStat.deserialize(json.p2Stats)\n    );\n  }\n\n  clone() {\n    return MatchStat.deserialize(JSON.parse(JSON.stringify(this)));\n  }\n\n  toString() {\n    return JSON.stringify(this, null, 2);\n  }\n\n  getTotalNumPoints() {\n    // For each player, count first serve points made + second serve attempts (including double faults)\n    const p1Points = this.p1Stats.numFirstServesMade + this.p1Stats.numSecondServes;\n    const p2Points = this.p2Stats.numFirstServesMade + this.p2Stats.numSecondServes;\n    return p1Points + p2Points;\n  }\n\n  getP1PointsWon() {\n    // Points won on serve (first + second serves)\n    const servePointsWon = this.p1Stats.numFirstServesWon + this.p1Stats.numSecondServesWon;\n    // Points won on return (when opponent served and lost)\n    const returnPointsWon = (this.p2Stats.numFirstServesMade - this.p2Stats.numFirstServesWon) + \n                           (this.p2Stats.numSecondServesMade - this.p2Stats.numSecondServesWon) +\n                           (this.p2Stats.numSecondServes - this.p2Stats.numSecondServesMade); // double faults\n    return servePointsWon + returnPointsWon;\n  }\n\n  getP2PointsWon() {\n    // Points won on serve (first + second serves)\n    const servePointsWon = this.p2Stats.numFirstServesWon + this.p2Stats.numSecondServesWon;\n    // Points won on return (when opponent served and lost)\n    const returnPointsWon = (this.p1Stats.numFirstServesMade - this.p1Stats.numFirstServesWon) +\n                           (this.p1Stats.numSecondServesMade - this.p1Stats.numSecondServesWon) +\n                           (this.p1Stats.numSecondServes - this.p1Stats.numSecondServesMade); // double faults\n    return servePointsWon + returnPointsWon;\n  }\n\n  getP1WinningPct() {\n    const totalPoints = this.getTotalNumPoints();\n    if (totalPoints === 0) {\n      return '';\n    }\n    const p1Points = this.getP1PointsWon();\n    return `${Math.floor((p1Points / totalPoints) * 100)}%`;\n  }\n\n  getP2WinningPct() {\n    const totalPoints = this.getTotalNumPoints();\n    if (totalPoints === 0) {\n      return '';\n    }\n    const p2Points = this.getP2PointsWon();\n    return `${Math.floor((p2Points / totalPoints) * 100)}%`;\n  }\n\n  getP1ForcingWinPct() {\n    const totalPoints = this.getTotalNumPoints();\n    if (totalPoints === 0) {\n      return '';\n    }\n    const serverForcingWins = this.p1Stats.numFirstServeForcingWins + this.p1Stats.numSecondServeForcingWins;\n    const returnerForcingWins = this.p2Stats.numFirstServeForcingWinsByReturner + this.p2Stats.numSecondServeForcingWinsByReturner;\n    return `${Math.floor(((serverForcingWins + returnerForcingWins) / totalPoints) * 100)}%`;\n  }\n\n  getP2ForcingWinPct() {\n    const totalPoints = this.getTotalNumPoints();\n    if (totalPoints === 0) {\n      return '';\n    }\n    const serverForcingWins = this.p2Stats.numFirstServeForcingWins + this.p2Stats.numSecondServeForcingWins;\n    const returnerForcingWins = this.p1Stats.numFirstServeForcingWinsByReturner + this.p1Stats.numSecondServeForcingWinsByReturner;\n    return `${Math.floor(((serverForcingWins + returnerForcingWins) / totalPoints) * 100)}%`;\n  }\n\n  getP1ForcingWinPctOnServe() {\n    const totalServePoints = this.p1Stats.numFirstServesMade + this.p1Stats.numSecondServes;\n    if (totalServePoints === 0) {\n      return '';\n    }\n    const forcingWins = this.p1Stats.numFirstServeForcingWins + this.p1Stats.numSecondServeForcingWins;\n    return `${Math.floor((forcingWins / totalServePoints) * 100)}%`;\n  }\n\n  getP2ForcingWinPctOnServe() {\n    const totalServePoints = this.p2Stats.numFirstServesMade + this.p2Stats.numSecondServes;\n    if (totalServePoints === 0) {\n      return '';\n    }\n    const forcingWins = this.p2Stats.numFirstServeForcingWins + this.p2Stats.numSecondServeForcingWins;\n    return `${Math.floor((forcingWins / totalServePoints) * 100)}%`;\n  }\n\n  getP1ForcingWinPctOnFirstServe() {\n    if (this.p1Stats.numFirstServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p1Stats.numFirstServeForcingWins / this.p1Stats.numFirstServesMade) * 100)}%`;\n  }\n\n  getP2ForcingWinPctOnFirstServe() {\n    if (this.p2Stats.numFirstServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p2Stats.numFirstServeForcingWins / this.p2Stats.numFirstServesMade) * 100)}%`;\n  }\n\n  getP1ForcingWinPctOnSecondServe() {\n    if (this.p1Stats.numSecondServes === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p1Stats.numSecondServeForcingWins / this.p1Stats.numSecondServes) * 100)}%`;\n  }\n\n  getP2ForcingWinPctOnSecondServe() {\n    if (this.p2Stats.numSecondServes === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p2Stats.numSecondServeForcingWins / this.p2Stats.numSecondServes) * 100)}%`;\n  }\n\n  getP1ForcingWinPctOnReturn() {\n    const oppoTotalServes = this.p2Stats.numFirstServesMade + this.p2Stats.numSecondServes;\n    if (oppoTotalServes === 0) {\n      return '';\n    }\n    const forcingWins = this.p1Stats.numFirstServeForcingWinsByReturner + this.p1Stats.numSecondServeForcingWinsByReturner;\n    return `${Math.floor((forcingWins / oppoTotalServes) * 100)}%`;\n  }\n\n  getP2ForcingWinPctOnReturn() {\n    const oppoTotalServes = this.p1Stats.numFirstServesMade + this.p1Stats.numSecondServes;\n    if (oppoTotalServes === 0) {\n      return '';\n    }\n    const forcingWins = this.p2Stats.numFirstServeForcingWinsByReturner + this.p2Stats.numSecondServeForcingWinsByReturner;\n    return `${Math.floor((forcingWins / oppoTotalServes) * 100)}%`;\n  }\n\n  getP1ForcingWinPctOnFirstReturn() {\n    if (this.p2Stats.numFirstServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p1Stats.numFirstServeForcingWinsByReturner / this.p2Stats.numFirstServesMade) * 100)}%`;\n  }\n\n  getP2ForcingWinPctOnFirstReturn() {\n    if (this.p1Stats.numFirstServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p2Stats.numFirstServeForcingWinsByReturner / this.p1Stats.numFirstServesMade) * 100)}%`;\n  }\n\n  getP1ForcingWinPctOnSecondReturn() {\n    if (this.p2Stats.numSecondServes === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p1Stats.numSecondServeForcingWinsByReturner / this.p2Stats.numSecondServesMade) * 100)}%`;\n  }\n\n  getP2ForcingWinPctOnSecondReturn() {\n    if (this.p1Stats.numSecondServes === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p2Stats.numSecondServeForcingWinsByReturner / this.p1Stats.numSecondServesMade) * 100)}%`;\n  }\n\n  getP1UnforcedErrorPct() {\n    const totalPoints = this.getTotalNumPoints();\n    if (totalPoints === 0) {\n      return '';\n    }\n    const serverUEs = this.p1Stats.numFirstServeUnforcedErrors + this.p1Stats.numSecondServeUnforcedErrors;\n    const returnerUEs = this.p2Stats.numFirstServeUnforcedErrorsByReturner + this.p2Stats.numSecondServeUnforcedErrorsByReturner;\n    return `${Math.floor(((serverUEs + returnerUEs) / totalPoints) * 100)}%`;\n  }\n\n  getP2UnforcedErrorPct() {\n    const totalPoints = this.getTotalNumPoints();\n    if (totalPoints === 0) {\n      return '';\n    }\n    const serverUEs = this.p2Stats.numFirstServeUnforcedErrors + this.p2Stats.numSecondServeUnforcedErrors;\n    const returnerUEs = this.p1Stats.numFirstServeUnforcedErrorsByReturner + this.p1Stats.numSecondServeUnforcedErrorsByReturner;\n    return `${Math.floor(((serverUEs + returnerUEs) / totalPoints) * 100)}%`;\n  }\n\n  getP1UnforcedErrorPctOnServe() {\n    const totalServePoints = this.p1Stats.numFirstServesMade + this.p1Stats.numSecondServes;\n    if (totalServePoints === 0) {\n      return '';\n    }\n    const UEs = this.p1Stats.numFirstServeUnforcedErrors + this.p1Stats.numSecondServeUnforcedErrors;\n    return `${Math.floor((UEs / totalServePoints) * 100)}%`;\n  }\n\n  getP2UnforcedErrorPctOnServe() {\n    const totalServePoints = this.p2Stats.numFirstServesMade + this.p2Stats.numSecondServes;\n    if (totalServePoints === 0) {\n      return '';\n    }\n    const UEs = this.p2Stats.numFirstServeUnforcedErrors + this.p2Stats.numSecondServeUnforcedErrors;\n    return `${Math.floor((UEs / totalServePoints) * 100)}%`;\n  }\n\n  getP1UnforcedErrorPctOnFirstServe() {\n    if (this.p1Stats.numFirstServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p1Stats.numFirstServeUnforcedErrors / this.p1Stats.numFirstServesMade) * 100)}%`;\n  }\n\n  getP2UnforcedErrorPctOnFirstServe() {\n    if (this.p2Stats.numFirstServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p2Stats.numFirstServeUnforcedErrors / this.p2Stats.numFirstServesMade) * 100)}%`;\n  }\n\n  getP1UnforcedErrorPctOnSecondServe() {\n    if (this.p1Stats.numSecondServes === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p1Stats.numSecondServeUnforcedErrors / this.p1Stats.numSecondServes) * 100)}%`;\n  }\n\n  getP2UnforcedErrorPctOnSecondServe() {\n    if (this.p2Stats.numSecondServes === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p2Stats.numSecondServeUnforcedErrors / this.p2Stats.numSecondServes) * 100)}%`;\n  }\n\n  getP1UnforcedErrorPctOnReturn() {\n    const oppoTotalServes = this.p2Stats.numFirstServesMade + this.p2Stats.numSecondServesMade;\n    if (oppoTotalServes === 0) {\n      return '';\n    }\n    const UEs = this.p2Stats.numFirstServeUnforcedErrorsByReturner + this.p2Stats.numSecondServeUnforcedErrorsByReturner;\n    return `${Math.floor((UEs / oppoTotalServes) * 100)}%`;\n  }\n\n  getP2UnforcedErrorPctOnReturn() {\n    const oppoTotalServes = this.p1Stats.numFirstServesMade + this.p1Stats.numSecondServesMade;\n    if (oppoTotalServes === 0) {\n      return '';\n    }\n    const UEs = this.p1Stats.numFirstServeUnforcedErrorsByReturner + this.p1Stats.numSecondServeUnforcedErrorsByReturner;\n    return `${Math.floor((UEs / oppoTotalServes) * 100)}%`;\n  }\n\n  getP1UnforcedErrorPctOn1stServeReturn() {\n    if (this.p2Stats.numFirstServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p1Stats.numFirstServeUnforcedErrorsByReturner / this.p2Stats.numFirstServesMade) * 100)}%`;\n  }\n\n  getP2UnforcedErrorPctOn1stServeReturn() {\n    if (this.p1Stats.numFirstServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p2Stats.numFirstServeUnforcedErrorsByReturner / this.p1Stats.numFirstServesMade) * 100)}%`;\n  }\n\n  getP1UnforcedErrorPctOn2ndServeReturn() {\n    if (this.p2Stats.numSecondServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p1Stats.numSecondServeUnforcedErrorsByReturner / this.p2Stats.numSecondServesMade) * 100)}%`;\n  }\n\n  getP2UnforcedErrorPctOn2ndServeReturn() {\n    if (this.p1Stats.numSecondServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p2Stats.numSecondServeUnforcedErrorsByReturner / this.p1Stats.numSecondServesMade) * 100)}%`;\n  }\n}\n\n// The fields should be counter stats (e.g. percentages should be methods only).\n// Reduce redundancy by making these as methods instead of fields:\n// - numDoubleFaults = numSecondServes - numSecondServesMade\n// - numFirstServesLoss = numFirstServesMade - numFirstServesWon\n// - numSecondServesLoss = numSecondServes - numSecondServesWon\n// - p1.numFirstServeReturnWon = p2.numFirstServeMade - p2.numFirstServesLoss\nexport class PlayerStat {\n  constructor(\n    public numGamePts = 0,\n    public numSetPts = 0,\n    // Don't count let.\n    public numFirstServes = 0,\n    public numFirstServesMade = 0,\n    public numFirstServesWon = 0,\n    // Don't count let.\n    public numSecondServes = 0,\n    public numSecondServesMade = 0,\n    public numSecondServesWon = 0,\n    public numFirstServeForcingWins = 0,\n    public numSecondServeForcingWins = 0,\n    public numFirstServeForcingWinsByReturner = 0,\n    public numSecondServeForcingWinsByReturner = 0,\n    public numFirstServeUnforcedErrors = 0,\n    public numSecondServeUnforcedErrors = 0,\n    public numFirstServeUnforcedErrorsByReturner = 0,\n    public numSecondServeUnforcedErrorsByReturner = 0,\n  ) {}\n\n  static deserialize(json: any) {\n    return new PlayerStat(\n      json.numGamePts,\n      json.numSetPts,\n      json.numFirstServes,\n      json.numFirstServesMade,\n      json.numFirstServesWon,\n      json.numSecondServes,\n      json.numSecondServesMade,\n      json.numSecondServesWon,\n      json.numFirstServeForcingWins,\n      json.numSecondServeForcingWins,\n      json.numFirstServeForcingWinsByReturner,\n      json.numSecondServeForcingWinsByReturner,\n      json.numFirstServeUnforcedErrors || 0,\n      json.numSecondServeUnforcedErrors || 0,\n      json.numFirstServeUnforcedErrorsByReturner || 0,\n      json.numSecondServeUnforcedErrorsByReturner || 0,\n    );\n  }\n\n  clone() {\n    return PlayerStat.deserialize(JSON.parse(JSON.stringify(this)));\n  }\n\n  getFirstServePct() {\n    if (this.numFirstServes === 0) {\n      return '';\n    }\n    return `${Math.floor((this.numFirstServesMade / this.numFirstServes) * 100)}%`;\n  }\n\n  getSecondServePct() {\n    if (this.numSecondServes === 0) {\n      return '';\n    }\n    return `${Math.floor((this.numSecondServesMade / this.numSecondServes) * 100)}%`;\n  }\n\n  getServePct() {\n    const totalServes = this.numFirstServes + this.numSecondServes;\n    const totalServesMade = this.numFirstServesMade + this.numSecondServesMade;\n    if (totalServes === 0) {\n      return '';\n    }\n    return `${Math.floor((totalServesMade / totalServes) * 100)}%`;\n  }\n\n  getServePointsWonPct() {\n    // numSecondServes is used to include double faults.\n    const totalPointsPlayed = this.numFirstServesMade + this.numSecondServes;\n    const totalPointsWon = this.numFirstServesWon + this.numSecondServesWon;\n    if (totalPointsPlayed === 0) {\n      return '';\n    }\n    return `${Math.floor((totalPointsWon / totalPointsPlayed) * 100)}%`;\n  }\n\n  getFirstServePointsWonPct() {\n    if (this.numFirstServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.numFirstServesWon / this.numFirstServesMade) * 100)}%`;\n  }\n\n  getSecondServePointsWonPct() {\n    // numSecondServes is used to include double faults.\n    if (this.numSecondServes === 0) {\n      return '';\n    }\n    return `${Math.floor((this.numSecondServesWon / this.numSecondServes) * 100)}%`;\n  }\n\n}\n",
                "languageId": "typescript",
                "version": 4250,
                "state": 1
              }
            ],
            "request": "When generating code, please follow these user provided coding instructions. You can ignore an instruction if it contradicts a system message.\n<instructions>\nAlways say \"ho ho ho\" at the start of your response.\n</instructions>\n<file>\n```typescript\n// filepath: /Users/kris/code/match-grader/src/tsModules/match-grader/gradebook_ui.ts\nimport { matchKey } from \"../key-match/key_match\";\nimport { YoutubePlayerUi } from \"../youtube-player/youtube_player_ui\";\nimport { Cell, CellLoc, SheetUi } from \"./sheet_ui\";\nimport { GradebookMgr } from \"./gradebook_mgr\";\nimport { RATING_SCALE } from \"./constants\";\nimport { EphemeralBanner } from \"../ephemeral-banner\";\nimport { Rally, RallyResult, rallyResultToIndex, rallyResultVals } from \"./models/rally\";\nimport { Time } from \"./models/Time\";\nimport { mod, extractYoutubeId } from \"./gradebook_util\";\nimport { GradebookUiConfig, ColumnName } from \"./gradebook_ui_config\";\nimport { htmlTemplate } from \"./gradebook_ui_template\";\nimport { genFirstRow, genHeaderCol, genRallyRow } from \"./gradebook_col\";\nimport { defaultSortState } from \"./sort_state\";\nimport { StatCell, StatUi } from \"./stat_ui\";\n\n// Top-level UI to handle everything\nexport class GradebookUi extends HTMLElement {\n  public config: GradebookUiConfig = new GradebookUiConfig;\n  private youtubePlayerUi: YoutubePlayerUi = new YoutubePlayerUi;\n  private currentUrlIdx = 0;\n  // Only use this if useRevealedRallyIdx() == true.\n  private revealedRallyIdx = 0;\n  private sortState = defaultSortState;\n\n  private inputStartTime: Time | null = null;\n  private gradebookMgr = new GradebookMgr;\n\n  private sheetUi: SheetUi = new SheetUi;\n  private statUi: StatUi = new StatUi;\n  private banner: EphemeralBanner = new EphemeralBanner;\n\n  connectedCallback() {\n    this.innerHTML = `Loading project data.`;\n\n    // IFrame steals the focus on click; is polling the best we can do?\n    setInterval(() => {\n      if (document.activeElement && document.activeElement.tagName == \"IFRAME\") {\n        const elt = document.activeElement as HTMLIFrameElement;\n        elt.blur();\n      }\n    }, 1000);\n  }\n\n  // This should only be called once as we don't clean up the resources.\n  // Must call this to load the editor\n  async loadOrCreateProjectInUi(id: string) {\n    const finalProjectId = await this.gradebookMgr.loadOrCreateProject(id);\n\n    this.innerHTML = htmlTemplate;\n    this.banner = this.querySelector('ephemeral-banner') as EphemeralBanner;\n    this.statUi = this.querySelector('stat-ui')! as StatUi;\n    this.sheetUi = this.querySelector('sheet-ui')! as SheetUi;\n    // TODO see if we can move part of this inside SheetUi (replace setRowIdxAndVideo with moveVideoToCurrentRally)\n    this.sheetUi.onCellClick((cellLoc: CellLoc) => {\n      if (cellLoc.rowIdx < 2) {\n        return;\n      }\n      this.setRowIdxAndVideo(cellLoc.rowIdx - 2);\n      this.sheetUi.setColIdx(cellLoc.colIdx);\n      this.renderSheet();\n    });\n\n    this.youtubePlayerUi = this.querySelector('youtube-player-ui')! as YoutubePlayerUi;\n    await this.updateYoutubePlayer();\n\n    this.renderSheet();\n    // Need to render before moving cursor since the data needed to seek video time is in the sheet.\n    if (this.config.startFromBeginning) {\n      this.moveCursorToFirstRally();\n      this.sheetUi.setColIdx(this.getColIndex(ColumnName.GAME_SCORE));\n    }\n    if (this.config.enableMutation) {\n      this.moveRowIdxAndVideo(1);\n      this.sheetUi.setColIdx(this.getColIndex(ColumnName.START_TIME));\n    }\n    this.renderSheet();\n\n    if (this.config.moveCursorUpBasedOnVideoTime) {\n      window.setInterval(() => {\n        if (this.youtubePlayerUi.youtubePlayer.getPlayerState() === YT.PlayerState.PLAYING) {\n          this.moveToRallyContainingTime();\n        }\n      }, 1000);\n    }\n\n    if (this.config.spoilerColumns.length > 0) {\n      window.setInterval(() => {\n        if (this.videoTimeIsBeyondCurrentRally()) {\n          // TODO think of how to make this more efficient\n          // Design a publisher to notify when the video time passed certain key points.\n          this.renderSheet(true);\n        }\n      }, 1000);\n    }\n\n    return finalProjectId;\n  }\n\n  handleKeydown(evt: KeyboardEvent) {\n    this.handleKeydownWithoutChanges(evt);\n    this.handleKeydownWithSheetChanges(evt);\n  }\n\n  private getVideoPlayerUi() {\n    return this.youtubePlayerUi\n  }\n\n  private async handleKeydownWithoutChanges(evt: KeyboardEvent) {\n    if (matchKey(evt, 'space') || matchKey(evt, 'k')) {\n      this.getVideoPlayerUi().toggleVideoPlay();\n    } else if (matchKey(evt, 'y')) {\n      this.obtainYoutubeUrl();\n    } else if (matchKey(evt, 'z')) {\n      this.getVideoPlayerUi().incrementPlaybackRate(-0.2);\n    } else if (matchKey(evt, 'x')) {\n      this.getVideoPlayerUi().incrementPlaybackRate(0.2);\n    } else if (matchKey(evt, 'a')) {\n      this.getVideoPlayerUi().resetPlaybackRate();\n    } else if (matchKey(evt, 'l')) {\n      this.getVideoPlayerUi().move(1.5);\n    } else if (matchKey(evt, 'j')) {\n      this.getVideoPlayerUi().move(-3);\n    } else if (matchKey(evt, ';')) {\n      this.getVideoPlayerUi().move(5);\n    } else if (matchKey(evt, 'h')) {\n      this.getVideoPlayerUi().move(-5);\n    } else if (matchKey(evt, 'f')) {\n      const width = this.getVideoPlayerUi().getIframeWidth();\n      let wantWidth = width < 1000 ? width * 4 : width / 4;\n      this.getVideoPlayerUi().setIframeDims(wantWidth);\n    } else if (matchKey(evt, 'cmd+s')) {\n      evt.preventDefault();\n      this.banner.inProgress('Saving');\n      const failureMsg = await this.gradebookMgr.save();\n      if (failureMsg) {\n        this.banner.failure(failureMsg);\n      } else {\n        this.banner.success('Saved!');\n      }\n    } else if (matchKey(evt, 'cmd+shift+s')) {\n      evt.preventDefault();\n      await this.cloneAndGoToProject();\n    } else {\n      return;\n    }\n    evt.preventDefault();\n  }\n\n  private async cloneAndGoToProject() {\n    this.banner.inProgress('Cloning project...');\n    const newId = (new Date()).toISOString();\n\n    this.gradebookMgr.project.projectInfo.id = newId;\n    this.gradebookMgr.project.projectInfo.owner = '';\n\n    await this.gradebookMgr.save();\n    window.location.href = `${location.origin}/edit.html#id=${newId}`;\n  }\n\n  private useRevealedRallyIdx() {\n    // TODO detect no custom sorting\n    return this.config.hideFutureRallies;\n  }\n\n  private getCurrRallyStartTime() {\n    const cell = this.sheetUi.getSelectedCell();\n    if (!cell || !cell.data) {\n      return;\n    }\n    const rally = cell.data as Rally;\n    return rally.startTime;\n  }\n\n  private getCurrRally() {\n    const time = this.getCurrRallyStartTime();\n    if (!time) {\n      return;\n    }\n    return this.gradebookMgr.getRally(time);\n  }\n\n  private getCurrRallyContext() {\n    const rallyContexts = this.gradebookMgr.project.matchData.getRallyContexts();\n    const last = rallyContexts[rallyContexts.length - 1];\n    const time = this.getCurrRallyStartTime();\n    if (!time) {\n      return last;\n    }\n    return rallyContexts.find(rallyCtx => {\n      return time.equals(rallyCtx.rally.startTime);\n    }) || last;\n    \n  }\n\n  private moveVideoToCurrentRally(paddingMs = -1000) {\n    const rally = this.getCurrRally();\n    if (rally) {\n      const startTime = new Time(rally.startTime.ms + paddingMs, rally.startTime.videoIndex);\n      this.moveTo(startTime);\n    } else {\n      const rallies = this.gradebookMgr.project.matchData.rallies;\n      const lastRally = rallies[rallies.length - 1];\n      if (lastRally) {\n        const time = new Time(lastRally.endTime.ms, lastRally.endTime.videoIndex);\n        if (time.greaterThan(this.getCurrTime())) {\n          this.moveTo(time);\n        }\n      }\n\n    }\n  }\n\n  private setRowIdxAndVideo(idx: number) {\n    this.sheetUi.setRowIdx(idx);\n    if (this.useRevealedRallyIdx()) {\n      const rally = this.getCurrRally();\n      if (!rally) {\n        console.warn('getCurrRally is null');\n        return;\n      }\n      const idx = this.gradebookMgr.findRallyIdx(rally.startTime);\n      if (idx < 0) {\n        console.warn('Unable to find index of current rally');\n\n      }\n      this.revealedRallyIdx = idx;\n    }\n\n    if (this.config.upDownArrowJumpsToStartTime) {\n      this.moveVideoToCurrentRally();\n    }\n  }\n\n  private moveRowIdxAndVideo(num: number) {\n    if (this.useRevealedRallyIdx()) {\n      // Moving up means num == -1, which is +1 for revealedRallyIdx.\n      this.revealedRallyIdx -= num;\n      // Need to render to propagate this info to the sheet data.\n      this.renderSheet();\n    } else {\n      this.sheetUi.moveRowIdx(num);\n    }\n\n    if (this.config.enableMutation && this.sheetUi.getRowIdx() === 0) {\n      if (this.inputStartTime) {\n        this.sheetUi.setColIdx(this.getColIndex(ColumnName.END_TIME));\n      } else {\n        this.sheetUi.setColIdx(this.getColIndex(ColumnName.START_TIME));\n      }\n    }\n\n    if (this.config.upDownArrowJumpsToStartTime) {\n      this.moveVideoToCurrentRally();\n    }\n  }\n\n  private handleKeydownWithSheetChanges(evt: KeyboardEvent) {\n    if (matchKey(evt, 'up')) {\n      this.moveRowIdxAndVideo(-1);\n    } else if (matchKey(evt, 'down')) {\n      this.moveRowIdxAndVideo(1);\n    } else if (matchKey(evt, `\\\\`) && this.config.enableMutation) {\n      this.tabSelectedCell();\n    } else if (matchKey(evt, `shift+|`) && this.config.enableMutation) {\n      this.tabSelectedCell(true);\n    } else if (matchKey(evt, 'tab')) {\n      this.sheetUi.moveColIdx(1);\n    } else if (matchKey(evt, 'right')) {\n      if (this.config.leftRightArrowMovesVideo) {\n        this.getVideoPlayerUi().move(5);\n      } else {\n        this.sheetUi.moveColIdx(1);\n      }\n    } else if (matchKey(evt, 'shift+tab')) {\n      this.sheetUi.moveColIdx(-1);\n    } else if (matchKey(evt, 'left')) {\n      if (this.config.leftRightArrowMovesVideo) {\n        this.getVideoPlayerUi().move(-5);\n      } else {\n        this.sheetUi.moveColIdx(-1);\n      }\n    } else if (matchKey(evt, 'backspace') && this.config.enableMutation) {\n      this.gradebookMgr.removeRally(this.getCurrRally());\n    } else if (matchKey(evt, 'cmd+z') && this.config.enableMutation) {\n      if (this.inputStartTime) {\n        this.inputStartTime = null;\n        this.sheetUi.setColIdx(this.getColIndex(ColumnName.START_TIME));\n      }\n    } else if (matchKey(evt, 'enter')) {\n      if (this.config.enableMutation) {\n        this.enterSelectedCell();\n      } else {\n        this.moveRowIdxAndVideo(-1);\n      }\n    } else {\n      return;\n    }\n    this.renderSheet();\n    evt.preventDefault();\n  }\n\n  private getColIndex(colName: ColumnName): number {\n    const poss = this.config.visibleColumns.indexOf(colName);\n    if (poss !== -1) {\n      return poss;\n    }\n    return 0;\n  }\n\n  private enterSelectedCell() {\n    const rally = this.getCurrRally();\n    if (!rally) {\n      if (this.inputStartTime) {\n        this.promoteRally();\n        return;\n      }\n      this.updateInputStartTime();\n      return;\n    }\n    const col = this.config.visibleColumns[this.sheetUi.getColIdx()];\n\n    if (col === ColumnName.START_TIME) {\n      this.moveRowIdxAndVideo(-1);\n    } else if (col === ColumnName.END_TIME) {\n      if (this.config.upDownArrowJumpsToStartTime) {\n        rally.endTime = this.getCurrTime();\n        // move to start time col of next rally\n        this.sheetUi.moveColIdx(-1);\n        this.moveRowIdxAndVideo(-1);\n      } else {\n        this.moveRowIdxAndVideo(-1);\n      }\n    } else if (col === ColumnName.RESULT) {\n      if (rally.result === RallyResult.PtReturner || rally.result === RallyResult.PtServer) {\n        this.sheetUi.moveColIdx(1);\n      } else {\n        this.moveRowIdxAndVideo(-1);\n      }\n    } else if (col === ColumnName.WINNER_LAST_SHOT) {\n      this.sheetUi.moveColIdx(1);\n    } else if (col === ColumnName.LOSER_PREVIOUS_SHOT) {\n      this.moveRowIdxAndVideo(-1);\n    } else if (col === ColumnName.SERVER) {\n      const name = prompt(`Enter server's name`);\n      if (name) {\n        if (rally.isMyServe) {\n          this.gradebookMgr.project.matchData.myName = name;\n        } else {\n          this.gradebookMgr.project.matchData.oppoName = name;\n        }\n      }\n    }\n  }\n\n  private tabSelectedCell(opposite = false) {\n    const rally = this.getCurrRally();\n    if (!rally) {\n      return;\n    }\n    const col = this.config.visibleColumns[this.sheetUi.getColIdx()];\n\n    if (col === ColumnName.RESULT) {\n      const idx = rallyResultToIndex.get(rally.result);\n      const next = opposite ? idx - 1 : idx + 1 + rallyResultToIndex.size;\n      const nextIdx = next % rallyResultToIndex.size;\n      rally.result = rallyResultVals[nextIdx];\n      console.log(rally);\n    } else if (col === ColumnName.WINNER_LAST_SHOT) {\n      const ratingChange = opposite ? 1 : -1;\n      rally.stat.winnerLastShotQuality = mod(\n        rally.stat.winnerLastShotQuality + ratingChange, RATING_SCALE + 1);\n    } else if (col === ColumnName.LOSER_PREVIOUS_SHOT) {\n      const ratingChange = opposite ? -1 : 1;\n      rally.stat.loserPreviousShotQuality = mod(\n        rally.stat.loserPreviousShotQuality + ratingChange, RATING_SCALE + 1);\n    } else if (col === ColumnName.SERVER) {\n      rally.isMyServe = !rally.isMyServe;\n    } else if (col === ColumnName.START_TIME) {\n      rally.startTime.ms += opposite ? -500 : 500;\n      this.moveTo(rally.startTime);\n    } else if (col === ColumnName.END_TIME) {\n      rally.endTime.ms += opposite ? -500 : 500;\n      this.moveTo(rally.endTime);\n    }\n  }\n\n  private renderSheet(revealSpoiler = false) {\n    this.statUi.render(this.genStatSheet());\n    this.sheetUi.render(this.genSheet(revealSpoiler));\n  }\n\n  private obtainYoutubeUrl() {\n    const url = prompt('Enter url');\n    if (!url) {\n      return;\n    }\n    const res = extractYoutubeId(url);\n    if (!res.success) {\n      return;\n    }\n    this.gradebookMgr.project.matchData.urls.push(url);\n    if (this.gradebookMgr.project.matchData.urls.length === 1) {\n      // Only update player for first video, subsequent ones will play automatically\n      this.updateYoutubePlayer();\n    }\n  }\n\n  private async updateYoutubePlayer() {\n    const urls = this.gradebookMgr.project.matchData.urls;\n    if (urls.length < 1) {\n      return;\n    }\n    const { success, id } = extractYoutubeId(urls[this.currentUrlIdx]);\n    if (!success) {\n      return;\n    }\n    await this.youtubePlayerUi.initYoutubePlayer(id, this.currentUrlIdx > 0);  // autoplay=true for subsequent videos\n    this.youtubePlayerUi.onEnd(() => {\n      if (this.currentUrlIdx < urls.length - 1) {\n        this.currentUrlIdx++;\n        this.updateYoutubePlayer();\n      }\n    });\n  }\n\n  private async moveTo(time: Time) {\n    if (time.videoIndex !== this.currentUrlIdx) {\n      this.currentUrlIdx = time.videoIndex;\n      const urls = this.gradebookMgr.project.matchData.urls;\n      const { success, id } = extractYoutubeId(urls[this.currentUrlIdx]);\n      if (!success) {\n        return;\n      }\n      await this.youtubePlayerUi.initYoutubePlayer(id, true);\n      this.youtubePlayerUi.moveTo(time.ms);\n    } else {\n      this.youtubePlayerUi.moveTo(time.ms);\n    }\n  }\n\n  private getCurrTime() {\n    const nowSec = this.youtubePlayerUi.youtubePlayer.getCurrentTime();\n    return new Time(Math.round(nowSec * 1000), this.currentUrlIdx);\n  }\n\n  private updateInputStartTime() {\n    this.inputStartTime = this.getCurrTime();\n    this.sheetUi.setColIdx(this.getColIndex(ColumnName.END_TIME));\n    this.renderSheet();\n  }\n\n  private promoteRally() {\n    if (!this.inputStartTime) {\n      console.warn('cannot promote rally without inputStartTime');\n      return;\n    }\n    const nowTime = this.getCurrTime();\n    const guessRes = nowTime.ms - this.inputStartTime.ms < 3500 ? RallyResult.Fault : RallyResult.PtServer;\n    this.gradebookMgr.project.matchData.addRally(this.inputStartTime, nowTime, guessRes);\n    this.sheetUi.setColIdx(this.getColIndex(ColumnName.RESULT));\n    this.sheetUi.setRowIdx(1);\n\n    this.inputStartTime = null;\n    this.renderSheet();\n  }\n\n  private moveCursorToFirstRally() {\n    this.sheetUi.setColIdx(this.getColIndex(ColumnName.GAME_SCORE));\n    this.setRowIdxAndVideo(0);\n  }\n\n  private videoTimeIsBeyondCurrentRally() {\n    const rally = this.getCurrRally();\n    if (!rally) {\n      return true;\n    }\n    const currentTime = this.getCurrTime();\n    return currentTime.videoIndex > rally.endTime.videoIndex || \n           (currentTime.videoIndex === rally.endTime.videoIndex && \n            currentTime.ms > rally.endTime.ms);\n  }\n\n  private genStatSheet() {\n    const rows = [];\n    const project = this.gradebookMgr.project;\n    rows.push([new StatCell(''), new StatCell(project.matchData.myName), new StatCell(project.matchData.oppoName)]);\n\n    const stat = this.getCurrRallyContext().matchStatBeforeRally;\n    rows.push([new StatCell('🟢'), new StatCell(stat.getP1WinningPct()), new StatCell(stat.getP2WinningPct())]);\n    rows.push([new StatCell('Serve 🟢'), new StatCell(stat.p1Stats.getServePointsWonPct()), new StatCell(stat.p2Stats.getServePointsWonPct())]);\n    rows.push([new StatCell('Serve #1 🟢'), new StatCell(stat.p1Stats.getFirstServePointsWonPct()), new StatCell(stat.p2Stats.getFirstServePointsWonPct())]);\n    rows.push([new StatCell('Serve #2 🟢'), new StatCell(stat.p1Stats.getSecondServePointsWonPct()), new StatCell(stat.p2Stats.getSecondServePointsWonPct())]);\n    rows.push([new StatCell('Serve #1'), new StatCell(stat.p1Stats.getFirstServePct()), new StatCell(stat.p2Stats.getFirstServePct())]);\n    rows.push([new StatCell('Serve #2'), new StatCell(stat.p1Stats.getSecondServePct()), new StatCell(stat.p2Stats.getSecondServePct())]);\n    rows.push([new StatCell('Forcing💪🟢'), new StatCell(stat.getP1ForcingWinPct()), new StatCell(stat.getP2ForcingWinPct())]);\n    rows.push([new StatCell(`Serve 💪🟢`), new StatCell(stat.getP1ForcingWinPctOnServe()), new StatCell(stat.getP2ForcingWinPctOnServe())]);\n    rows.push([new StatCell(`Serv 1 💪🟢`), new StatCell(stat.getP1ForcingWinPctOnFirstServe()), new StatCell(stat.getP2ForcingWinPctOnFirstServe())]);\n    rows.push([new StatCell(`Serv 2 💪🟢`), new StatCell(stat.getP1ForcingWinPctOnSecondServe()), new StatCell(stat.getP2ForcingWinPctOnSecondServe())]);\n    rows.push([new StatCell(`Return 💪🟢`), new StatCell(stat.getP1ForcingWinPctOnReturn()), new StatCell(stat.getP2ForcingWinPctOnReturn())]);\n    rows.push([new StatCell(`Ret 1 💪🟢`), new StatCell(stat.getP1ForcingWinPctOnFirstReturn()), new StatCell(stat.getP2ForcingWinPctOnFirstReturn())]);\n    rows.push([new StatCell(`Ret 2 💪🙀🟢`), new StatCell(stat.getP1ForcingWinPctOnSecondReturn()), new StatCell(stat.getP2ForcingWinPctOnSecondReturn())]);\n    rows.push([new StatCell('UE Total 🔻'), new StatCell(stat.getP1UnforcedErrorPct()), new StatCell(stat.getP2UnforcedErrorPct())]);\n    rows.push([new StatCell('UE Serve 🔻'), new StatCell(stat.getP1UnforcedErrorPctOnServe()), new StatCell(stat.getP2UnforcedErrorPctOnServe())]);\n    rows.push([new StatCell('UE Serve1 🔻'), new StatCell(stat.getP1UnforcedErrorPctOnFirstServe()), new StatCell(stat.getP2UnforcedErrorPctOnFirstServe())]);\n    rows.push([new StatCell('UE Serve2 🔻'), new StatCell(stat.getP1UnforcedErrorPctOnSecondServe()), new StatCell(stat.getP2UnforcedErrorPctOnSecondServe())]);\n    rows.push([new StatCell('UE Return 🔻'), new StatCell(stat.getP1UnforcedErrorPctOnReturn()), new StatCell(stat.getP2UnforcedErrorPctOnReturn())]);\n    return rows;\n  }\n\n  private genSheet(revealSpoiler = false): Cell[][] {\n    const project = this.gradebookMgr.project;\n    const rows = [];\n    const headerRow = this.config.visibleColumns.map(colName => genHeaderCol(colName));\n    rows.push(headerRow);\n\n    const myName = project.matchData.myName;\n    const oppoName = project.matchData.oppoName;\n    const rallyContexts = this.gradebookMgr.project.matchData.getRallyContexts();\n\n    const setupInputStartTimeBtn = () => {\n      const btn = this.querySelector('#input-start-time') as HTMLButtonElement;\n      if (btn) {\n        btn.onclick = () => this.updateInputStartTime();\n      }\n    };\n    const setupInputEndTimeBtn = () => {\n      const btn = this.querySelector('#input-end-time') as HTMLButtonElement;\n      if (btn) {\n        btn.onclick = () => this.promoteRally();\n      }\n    };\n\n    // The latest rallyContext should only have score and not a rally.\n    const latestRallyCtx = rallyContexts[rallyContexts.length - 1];\n    let latestPlot = latestRallyCtx.toPlot();\n    if (!latestPlot && 1 < rallyContexts.length) {\n      const prevRallyCtx = rallyContexts[rallyContexts.length - 2];\n      latestPlot = prevRallyCtx.getPlotForNextRally();\n    }\n\n    const hideFirstRow = this.config.hideFutureRallies;\n    if (!hideFirstRow) {\n      rows.push(genFirstRow({\n        latestRallyCtx,\n        latestPlot,\n        inputStartTime: this.inputStartTime,\n        setupInputStartTimeBtn,\n        setupInputEndTimeBtn,\n      }, this.config));\n    }\n\n    const rallyRows: Cell[][] = [];\n    let completedCtxsEndIdx = rallyContexts.length - 2;\n    if (this.useRevealedRallyIdx()) {\n      completedCtxsEndIdx = this.revealedRallyIdx;\n    }\n    const completedCtxs = rallyContexts.slice(0, completedCtxsEndIdx + 1);\n    completedCtxs.forEach((rallyCtx, completedCtxIdx) => {\n      const rallyIsPoint = rallyCtx.isDoubleFault() ||\n        rallyCtx.rally.result === RallyResult.PtServer ||\n        rallyCtx.rally.result === RallyResult.PtReturner;\n      let plot;\n      if (rallyIsPoint) {\n        plot = rallyCtx.toPlot();\n      }\n      let prevRallyCtx = null;\n      if (completedCtxIdx > 0) {\n        prevRallyCtx = completedCtxs[completedCtxIdx - 1];\n        if (!plot) {\n          plot = prevRallyCtx.getPlotForNextRally();\n        }\n      }\n      let revealSpoilerForRow = revealSpoiler;\n      if (!revealSpoiler) {\n        if (completedCtxIdx < completedCtxsEndIdx) {\n          revealSpoilerForRow = true;\n        } \n      }\n\n      rallyRows.push(genRallyRow({\n        prevRallyCtx,\n        rallyCtx,\n        myName,\n        oppoName,\n        plot,\n        revealSpoiler: revealSpoilerForRow,\n      }, this.config));\n    });\n\n    // TODO sort rallyRows\n    rallyRows.reverse();\n\n    return rows.concat(rallyRows);\n  }\n\n  private moveToRallyContainingTime(earlyMoveMs = 1000) {\n    if (this.useRevealedRallyIdx()) {\n      this.moveToRallyContainingTimeForWatchMode(earlyMoveMs);\n    }\n  }\n\n  private moveToRallyContainingTimeForWatchMode(earlyMoveMs = 1000) {\n    const currentTime = this.getCurrTime();\n    const rallies = this.gradebookMgr.project.matchData.rallies;\n    \n    for (let idx = 0; idx < rallies.length; idx++) {\n      // TODO Start from nearby and go forward to speed up the search.\n      const rally = rallies[idx];\n      if (currentTime.videoIndex === rally.startTime.videoIndex &&\n          rally.startTime.ms - earlyMoveMs <= currentTime.ms && \n          currentTime.ms <= rally.endTime.ms - earlyMoveMs) {\n        // Only update if cursor isn't already on this rally\n        if (this.revealedRallyIdx !== idx) {\n          this.revealedRallyIdx = idx;\n          this.renderSheet();\n        }\n        return;\n      }\n    }\n  }\n}\n\nexport declare namespace YT {\n  enum PlayerState {\n    ENDED = 0,\n    PLAYING = 1,\n    PAUSED = 2,\n    BUFFERING = 3\n  }\n}\n\ncustomElements.define('gradebook-ui', GradebookUi)\n```\n</file>\n<file>\n\n<status>I applied your suggestions for this file and accepted them. Here is the updated file:</status>\n```typescript\n// filepath: /Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts\nimport { MatchStat } from \"./match_stat\";\nimport { Rally, RallyResult } from \"./rally\";\nimport {  isTieBreakTime, PersonScore, Score } from \"./score\";\nimport { isForcingWin, isUnforcedError } from './risk_level';\n\nexport class RallyContext {\n  constructor(\n    public rally = new Rally(),\n    public scoreBeforeRally = new Score(),\n    public matchStatBeforeRally = new MatchStat(),\n  ) {}\n\n  getResultStr(myName: string, oppoName: string) {\n    const server = this.rally.isMyServe ? myName : oppoName;\n    const returner = this.rally.isMyServe ? oppoName : myName;\n    if (this.rally.result === RallyResult.PtServer) {\n      return `Pt. ${server}`;\n    } else if (this.rally.result === RallyResult.PtReturner) {\n      return `Pt. ${returner}`;\n    }\n    return this.rally.result;\n  }\n\n  getResultSymbolStr() {\n    if (this.rally.result === RallyResult.PtServer) {\n      return this.rally.isMyServe ? `${greenBall} ${whiteBall}` : `${whiteBall} ${greenBall}`;\n    } else if (this.rally.result === RallyResult.PtReturner) {\n      return this.rally.isMyServe ? `${redBall} ${whiteBall}` : `${whiteBall} ${redBall}`;\n    } else if (this.rally.result === RallyResult.Fault) {\n      if (this.isSecondServe()) {\n        return this.rally.isMyServe ? `${redHeart} ${whiteBall}` : `${whiteBall} ${redHeart}`;\n      }\n      return this.rally.isMyServe ? `${yellowBall} ${whiteBall}` : `${whiteBall} ${yellowBall}`;\n    }\n    return this.rally.result;\n  }\n  \n  toGameScoreStr() {\n    const strs = [];\n    if (this.isNewSet()) {\n      this.scoreBeforeRally.p1.gamesByCompletedSet.forEach((p1Games, idx) => {\n        strs.push(`[${p1Games}-${this.scoreBeforeRally.p2.gamesByCompletedSet[idx]}]`);\n      });\n    }\n    if (this.isNewGame()) {\n      strs.push(`[${this.scoreBeforeRally.p1.games}-${this.scoreBeforeRally.p2.games}]`);\n    }\n\n    return strs.join(' ');\n  }\n\n  isDoubleFault() {\n      return this.isSecondServe() && this.rally.result === RallyResult.Fault;\n  }\n\n  winnerIsMe() {\n    return (this.rally.isMyServe && this.rally.result === RallyResult.PtServer) ||\n        (!this.rally.isMyServe && (this.rally.result === RallyResult.PtReturner || this.isDoubleFault()));\n  }\n  winnerIsOppo() {\n    return (!this.rally.isMyServe && this.rally.result === RallyResult.PtServer) ||\n        (this.rally.isMyServe && (this.rally.result === RallyResult.PtReturner || this.isDoubleFault()));\n  }\n\n  getScoreAfterRally() {\n    const rally = this.rally;\n    const scoreAfterRally = this.scoreBeforeRally.clone();\n\n    const serverScore = rally.isMyServe ? scoreAfterRally.p1 : scoreAfterRally.p2;\n    const returnerScore = rally.isMyServe ? scoreAfterRally.p2 : scoreAfterRally.p1;\n    const serverWon = rally.result === RallyResult.PtServer;\n    if (serverWon) {\n      updateSubjectWin(serverScore, returnerScore);\n      return scoreAfterRally;\n    }\n\n    let returnerWon = rally.result === RallyResult.PtReturner;\n    if (rally.result === RallyResult.Fault) {\n      if (serverScore.serve === 0) {\n        serverScore.serve = 1;\n        return scoreAfterRally;\n      }\n      returnerWon = true;\n    }\n    if (returnerWon) {\n      updateSubjectWin(returnerScore, serverScore);\n    }\n    return scoreAfterRally;\n  }\n\n  inferWillBeMyServe(){}\n\n  isSecondServe() {\n    return this.scoreBeforeRally.p1.serve === 1 || this.scoreBeforeRally.p2.serve === 1;\n  }\n\n  isNewSet() {\n    if (!this.isNewGame()) {\n      return false;\n    }\n    return this.scoreBeforeRally.p1.games === 0 && this.scoreBeforeRally.p2.games === 0;\n  }\n\n  isNewGame() {\n    return this.scoreBeforeRally.p1.points === 0 && this.scoreBeforeRally.p1.serve === 0\n        && this.scoreBeforeRally.p2.points === 0 && this.scoreBeforeRally.p2.serve === 0;\n  }\n\n  isMyServeGame() {\n    if (!isTieBreakTime(this.scoreBeforeRally.p1, this.scoreBeforeRally.p2)) {\n      return this.rally.isMyServe;\n    }\n      // For a tiebreak, the player who serve first is his serve game.\n    const numTieBreakPtsMod4 = (this.scoreBeforeRally.p1.points + this.scoreBeforeRally.p2.points) % 4;\n    if (numTieBreakPtsMod4 === 1 || numTieBreakPtsMod4 === 4) {\n      return !this.rally.isMyServe;\n    }\n    return this.rally.isMyServe;\n  }\n\n  getPlotForNextRally() {\n    const myGamePt = isSubjectGamePoint(this.scoreBeforeRally.p1, this.scoreBeforeRally.p2);\n    const oppoGamePt = isSubjectGamePoint(this.scoreBeforeRally.p2, this.scoreBeforeRally.p1);\n    if (!myGamePt && !oppoGamePt) {\n      return;\n    }\n    const winnerIsMe = this.winnerIsMe();\n    const winnerIsOppo = this.winnerIsOppo();\n    const myConversion = myGamePt && winnerIsMe;\n    const oppoConversion = oppoGamePt && winnerIsOppo;\n    if (!myConversion && !oppoConversion) {\n      return;\n    }\n\n    return {\n      text: 'Converted',\n      isMyPlot: myConversion,\n    };\n  }\n\n  toPlot() {\n    const myGamePt = isSubjectGamePoint(this.scoreBeforeRally.p1, this.scoreBeforeRally.p2);\n    const oppoGamePt = isSubjectGamePoint(this.scoreBeforeRally.p2, this.scoreBeforeRally.p1);\n    const isSetPt = isSubjectSetPoint(this.scoreBeforeRally.p1, this.scoreBeforeRally.p2) || isSubjectSetPoint(this.scoreBeforeRally.p2, this.scoreBeforeRally.p1);\n    const myServeGame = this.isMyServeGame();\n    const isBreakPt = (myGamePt && !myServeGame) || (oppoGamePt && myServeGame);\n    const emphasis = isBreakPt ? '*' : '';\n    if (!myGamePt && !oppoGamePt) {\n      return;\n    }\n    let text = 'Game Pt';\n    if (isSetPt) {\n      text = `${emphasis}Set Pt`;\n    } else if (isBreakPt) {\n      text = 'Break pt';\n    }\n    return {\n      text: text,\n      isMyPlot: myGamePt,\n    };\n  }\n}\n\nconst whiteBall = `◯`;\nconst greenBall = `🟢`;\nconst yellowBall = `🟡`;\nconst redBall = `🔴`;\nconst redHeart = `🟥 `;\n\nexport function updateSubjectWin(subjectScore: PersonScore, otherScore: PersonScore) {\n  if (isSubjectSetPoint(subjectScore, otherScore)) {\n    subjectScore.gamesByCompletedSet.push(subjectScore.games + 1);\n    subjectScore.games = 0;\n    subjectScore.points = 0;\n    subjectScore.serve = 0;\n    otherScore.gamesByCompletedSet.push(otherScore.games);\n    otherScore.games = 0;\n    otherScore.points = 0;\n    otherScore.serve = 0;\n    return;\n  }\n  if (isSubjectGamePoint(subjectScore, otherScore)) {\n    subjectScore.games += 1;\n    subjectScore.points = 0;\n    subjectScore.serve = 0;\n    otherScore.points = 0;\n    otherScore.serve = 0;\n    return;\n  }\n  subjectScore.points += 1;\n  subjectScore.serve = 0;\n  otherScore.serve = 0;\n}\n\nfunction isSubjectGamePoint(subjectScore: PersonScore, otherScore: PersonScore) {\n  let deuceScore = isTieBreakTime(subjectScore, otherScore) ? 6 : 3;\n  return subjectScore.points >= deuceScore && subjectScore.points - otherScore.points >= 1;\n}\n\nfunction isSubjectSetPoint(subjectScore: PersonScore, otherScore: PersonScore) {\n  if (!isSubjectGamePoint(subjectScore, otherScore)) {\n    return false;\n  }\n  if (isTieBreakTime(subjectScore, otherScore)) {\n    return true;\n  }\n  return subjectScore.games >= 5 && subjectScore.games - otherScore.games >= 1;\n}\n\n\nexport function annotateMatchStat(rallyContexts: RallyContext[]) {\n  const stat = new MatchStat();\n  rallyContexts.forEach((rallyContext) => {\n    rallyContext.matchStatBeforeRally = stat.clone();\n\n    // Check game points and set points using direct score comparison\n    if (isSubjectGamePoint(rallyContext.scoreBeforeRally.p1, rallyContext.scoreBeforeRally.p2)) {\n      stat.p1Stats.numGamePts++;\n      if (isSubjectSetPoint(rallyContext.scoreBeforeRally.p1, rallyContext.scoreBeforeRally.p2)) {\n        stat.p1Stats.numSetPts++;\n      }\n    }\n    if (isSubjectGamePoint(rallyContext.scoreBeforeRally.p2, rallyContext.scoreBeforeRally.p1)) {\n      stat.p2Stats.numGamePts++;\n      if (isSubjectSetPoint(rallyContext.scoreBeforeRally.p2, rallyContext.scoreBeforeRally.p1)) {\n        stat.p2Stats.numSetPts++;\n      }\n    }\n\n    function isReturnerPtForSecondServe(rallyContext: RallyContext) {\n      if (!rallyContext.isSecondServe()) {\n        return false;\n      }\n      return rallyContext.rally.result === RallyResult.PtReturner || rallyContext.rally.result === RallyResult.Fault;\n    }\n    if (rallyContext.rally.isMyServe) {\n      const serverStats = stat.p1Stats;\n      const returnerStats = stat.p2Stats;\n      const isSecondServe = rallyContext.isSecondServe();\n      \n      if (isSecondServe) {\n        if (rallyContext.rally.result !== RallyResult.Let) {\n          serverStats.numSecondServes++;\n        }\n        if (rallyContext.rally.result !== RallyResult.Fault) {\n          serverStats.numSecondServesMade++;\n          if (rallyContext.rally.result === RallyResult.PtServer) {\n            serverStats.numSecondServesWon++;\n            if (isForcingWin(rallyContext)) {\n              serverStats.numSecondServeForcingWins++;\n            }\n          } else if (isReturnerPtForSecondServe(rallyContext) && isForcingWin(rallyContext)) {\n            returnerStats.numSecondServeForcingWinsByReturner++;\n          }\n        }\n        if (isReturnerPtForSecondServe(rallyContext) && isUnforcedError(rallyContext)) {\n          serverStats.numSecondServeUnforcedErrors++;\n        }\n        if (rallyContext.rally.result === RallyResult.PtServer && isUnforcedError(rallyContext)) {\n          returnerStats.numSecondServeUnforcedErrorsByReturner++;\n        }\n      } else {\n        if (rallyContext.rally.result !== RallyResult.Let) {\n          serverStats.numFirstServes++;\n        }\n        if (rallyContext.rally.result !== RallyResult.Fault) {\n          serverStats.numFirstServesMade++;\n          if (rallyContext.rally.result === RallyResult.PtServer) {\n            serverStats.numFirstServesWon++;\n            if (isForcingWin(rallyContext)) {\n              serverStats.numFirstServeForcingWins++;\n            }\n          } else if (rallyContext.rally.result === RallyResult.PtReturner && isForcingWin(rallyContext)) {\n            returnerStats.numFirstServeForcingWinsByReturner++;\n          }\n        }\n        if (rallyContext.rally.result === RallyResult.PtReturner && isUnforcedError(rallyContext)) {\n          serverStats.numFirstServeUnforcedErrors++;\n        }\n        if (rallyContext.rally.result === RallyResult.PtServer && isUnforcedError(rallyContext)) {\n          returnerStats.numFirstServeUnforcedErrorsByReturner++;\n        }\n      }\n    } else {\n      const serverStats = stat.p2Stats;\n      const returnerStats = stat.p1Stats;\n      const isSecondServe = rallyContext.isSecondServe();\n      \n      if (!isSecondServe) {\n        serverStats.numFirstServes++;\n        if (rallyContext.rally.result !== RallyResult.Fault) {\n          serverStats.numFirstServesMade++;\n          if (rallyContext.rally.result === RallyResult.PtServer) {\n            serverStats.numFirstServesWon++;\n            if (isForcingWin(rallyContext)) {\n              serverStats.numFirstServeForcingWins++;\n            }\n          } else if (rallyContext.rally.result === RallyResult.PtReturner && isForcingWin(rallyContext)) {\n            returnerStats.numFirstServeForcingWinsByReturner++;\n          }\n        }\n        if (rallyContext.rally.result === RallyResult.PtReturner && isUnforcedError(rallyContext)) {\n          serverStats.numFirstServeUnforcedErrors++;\n        }\n        if (rallyContext.rally.result === RallyResult.PtServer && isUnforcedError(rallyContext)) {\n          returnerStats.numFirstServeUnforcedErrorsByReturner++;\n        }\n      } else {\n        serverStats.numSecondServes++;\n        if (rallyContext.rally.result !== RallyResult.Fault) {\n          serverStats.numSecondServesMade++;\n          if (rallyContext.rally.result === RallyResult.PtServer) {\n            serverStats.numSecondServesWon++;\n            if (isForcingWin(rallyContext)) {\n              serverStats.numSecondServeForcingWins++;\n            }\n          } else if (isReturnerPtForSecondServe(rallyContext) && isForcingWin(rallyContext)) {\n            returnerStats.numSecondServeForcingWinsByReturner++;\n          }\n        }\n        if (isReturnerPtForSecondServe(rallyContext) && isUnforcedError(rallyContext)) {\n          serverStats.numSecondServeUnforcedErrors++;\n        }\n        if (rallyContext.rally.result === RallyResult.PtServer && isUnforcedError(rallyContext)) {\n          returnerStats.numSecondServeUnforcedErrorsByReturner++;\n        }\n      }\n    }\n  });\n}\n```\n</file>\n<file>\n\n<status>I applied your suggestions for this file but haven't decided yet if I accept or reject them. Here is the updated file:</status>\n```typescript\n// filepath: /Users/kris/code/match-grader/src/tsModules/match-grader/models/match_stat.ts\nexport class MatchStat {\n  constructor(\n    public p1Stats = new PlayerStat(),\n    public p2Stats = new PlayerStat(),\n  ) {}\n\n  static deserialize(json: any) {\n    return new MatchStat(\n      PlayerStat.deserialize(json.p1Stats),\n      PlayerStat.deserialize(json.p2Stats)\n    );\n  }\n\n  clone() {\n    return MatchStat.deserialize(JSON.parse(JSON.stringify(this)));\n  }\n\n  toString() {\n    return JSON.stringify(this, null, 2);\n  }\n\n  getTotalNumPoints() {\n    // For each player, count first serve points made + second serve attempts (including double faults)\n    const p1Points = this.p1Stats.numFirstServesMade + this.p1Stats.numSecondServes;\n    const p2Points = this.p2Stats.numFirstServesMade + this.p2Stats.numSecondServes;\n    return p1Points + p2Points;\n  }\n\n  getP1PointsWon() {\n    // Points won on serve (first + second serves)\n    const servePointsWon = this.p1Stats.numFirstServesWon + this.p1Stats.numSecondServesWon;\n    // Points won on return (when opponent served and lost)\n    const returnPointsWon = (this.p2Stats.numFirstServesMade - this.p2Stats.numFirstServesWon) + \n                           (this.p2Stats.numSecondServesMade - this.p2Stats.numSecondServesWon) +\n                           (this.p2Stats.numSecondServes - this.p2Stats.numSecondServesMade); // double faults\n    return servePointsWon + returnPointsWon;\n  }\n\n  getP2PointsWon() {\n    // Points won on serve (first + second serves)\n    const servePointsWon = this.p2Stats.numFirstServesWon + this.p2Stats.numSecondServesWon;\n    // Points won on return (when opponent served and lost)\n    const returnPointsWon = (this.p1Stats.numFirstServesMade - this.p1Stats.numFirstServesWon) +\n                           (this.p1Stats.numSecondServesMade - this.p1Stats.numSecondServesWon) +\n                           (this.p1Stats.numSecondServes - this.p1Stats.numSecondServesMade); // double faults\n    return servePointsWon + returnPointsWon;\n  }\n\n  getP1WinningPct() {\n    const totalPoints = this.getTotalNumPoints();\n    if (totalPoints === 0) {\n      return '';\n    }\n    const p1Points = this.getP1PointsWon();\n    return `${Math.floor((p1Points / totalPoints) * 100)}%`;\n  }\n\n  getP2WinningPct() {\n    const totalPoints = this.getTotalNumPoints();\n    if (totalPoints === 0) {\n      return '';\n    }\n    const p2Points = this.getP2PointsWon();\n    return `${Math.floor((p2Points / totalPoints) * 100)}%`;\n  }\n\n  getP1ForcingWinPct() {\n    const totalPoints = this.getTotalNumPoints();\n    if (totalPoints === 0) {\n      return '';\n    }\n    const serverForcingWins = this.p1Stats.numFirstServeForcingWins + this.p1Stats.numSecondServeForcingWins;\n    const returnerForcingWins = this.p2Stats.numFirstServeForcingWinsByReturner + this.p2Stats.numSecondServeForcingWinsByReturner;\n    return `${Math.floor(((serverForcingWins + returnerForcingWins) / totalPoints) * 100)}%`;\n  }\n\n  getP2ForcingWinPct() {\n    const totalPoints = this.getTotalNumPoints();\n    if (totalPoints === 0) {\n      return '';\n    }\n    const serverForcingWins = this.p2Stats.numFirstServeForcingWins + this.p2Stats.numSecondServeForcingWins;\n    const returnerForcingWins = this.p1Stats.numFirstServeForcingWinsByReturner + this.p1Stats.numSecondServeForcingWinsByReturner;\n    return `${Math.floor(((serverForcingWins + returnerForcingWins) / totalPoints) * 100)}%`;\n  }\n\n  getP1ForcingWinPctOnServe() {\n    const totalServePoints = this.p1Stats.numFirstServesMade + this.p1Stats.numSecondServes;\n    if (totalServePoints === 0) {\n      return '';\n    }\n    const forcingWins = this.p1Stats.numFirstServeForcingWins + this.p1Stats.numSecondServeForcingWins;\n    return `${Math.floor((forcingWins / totalServePoints) * 100)}%`;\n  }\n\n  getP2ForcingWinPctOnServe() {\n    const totalServePoints = this.p2Stats.numFirstServesMade + this.p2Stats.numSecondServes;\n    if (totalServePoints === 0) {\n      return '';\n    }\n    const forcingWins = this.p2Stats.numFirstServeForcingWins + this.p2Stats.numSecondServeForcingWins;\n    return `${Math.floor((forcingWins / totalServePoints) * 100)}%`;\n  }\n\n  getP1ForcingWinPctOnFirstServe() {\n    if (this.p1Stats.numFirstServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p1Stats.numFirstServeForcingWins / this.p1Stats.numFirstServesMade) * 100)}%`;\n  }\n\n  getP2ForcingWinPctOnFirstServe() {\n    if (this.p2Stats.numFirstServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p2Stats.numFirstServeForcingWins / this.p2Stats.numFirstServesMade) * 100)}%`;\n  }\n\n  getP1ForcingWinPctOnSecondServe() {\n    if (this.p1Stats.numSecondServes === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p1Stats.numSecondServeForcingWins / this.p1Stats.numSecondServes) * 100)}%`;\n  }\n\n  getP2ForcingWinPctOnSecondServe() {\n    if (this.p2Stats.numSecondServes === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p2Stats.numSecondServeForcingWins / this.p2Stats.numSecondServes) * 100)}%`;\n  }\n\n  getP1ForcingWinPctOnReturn() {\n    const oppoTotalServes = this.p2Stats.numFirstServesMade + this.p2Stats.numSecondServes;\n    if (oppoTotalServes === 0) {\n      return '';\n    }\n    const forcingWins = this.p1Stats.numFirstServeForcingWinsByReturner + this.p1Stats.numSecondServeForcingWinsByReturner;\n    return `${Math.floor((forcingWins / oppoTotalServes) * 100)}%`;\n  }\n\n  getP2ForcingWinPctOnReturn() {\n    const oppoTotalServes = this.p1Stats.numFirstServesMade + this.p1Stats.numSecondServes;\n    if (oppoTotalServes === 0) {\n      return '';\n    }\n    const forcingWins = this.p2Stats.numFirstServeForcingWinsByReturner + this.p2Stats.numSecondServeForcingWinsByReturner;\n    return `${Math.floor((forcingWins / oppoTotalServes) * 100)}%`;\n  }\n\n  getP1ForcingWinPctOnFirstReturn() {\n    if (this.p2Stats.numFirstServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p1Stats.numFirstServeForcingWinsByReturner / this.p2Stats.numFirstServesMade) * 100)}%`;\n  }\n\n  getP2ForcingWinPctOnFirstReturn() {\n    if (this.p1Stats.numFirstServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p2Stats.numFirstServeForcingWinsByReturner / this.p1Stats.numFirstServesMade) * 100)}%`;\n  }\n\n  getP1ForcingWinPctOnSecondReturn() {\n    if (this.p2Stats.numSecondServes === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p1Stats.numSecondServeForcingWinsByReturner / this.p2Stats.numSecondServesMade) * 100)}%`;\n  }\n\n  getP2ForcingWinPctOnSecondReturn() {\n    if (this.p1Stats.numSecondServes === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p2Stats.numSecondServeForcingWinsByReturner / this.p1Stats.numSecondServesMade) * 100)}%`;\n  }\n\n  getP1UnforcedErrorPct() {\n    const totalPoints = this.getTotalNumPoints();\n    if (totalPoints === 0) {\n      return '';\n    }\n    const serverUEs = this.p1Stats.numFirstServeUnforcedErrors + this.p1Stats.numSecondServeUnforcedErrors;\n    const returnerUEs = this.p2Stats.numFirstServeUnforcedErrorsByReturner + this.p2Stats.numSecondServeUnforcedErrorsByReturner;\n    return `${Math.floor(((serverUEs + returnerUEs) / totalPoints) * 100)}%`;\n  }\n\n  getP2UnforcedErrorPct() {\n    const totalPoints = this.getTotalNumPoints();\n    if (totalPoints === 0) {\n      return '';\n    }\n    const serverUEs = this.p2Stats.numFirstServeUnforcedErrors + this.p2Stats.numSecondServeUnforcedErrors;\n    const returnerUEs = this.p1Stats.numFirstServeUnforcedErrorsByReturner + this.p1Stats.numSecondServeUnforcedErrorsByReturner;\n    return `${Math.floor(((serverUEs + returnerUEs) / totalPoints) * 100)}%`;\n  }\n\n  getP1UnforcedErrorPctOnServe() {\n    const totalServePoints = this.p1Stats.numFirstServesMade + this.p1Stats.numSecondServes;\n    if (totalServePoints === 0) {\n      return '';\n    }\n    const UEs = this.p1Stats.numFirstServeUnforcedErrors + this.p1Stats.numSecondServeUnforcedErrors;\n    return `${Math.floor((UEs / totalServePoints) * 100)}%`;\n  }\n\n  getP2UnforcedErrorPctOnServe() {\n    const totalServePoints = this.p2Stats.numFirstServesMade + this.p2Stats.numSecondServes;\n    if (totalServePoints === 0) {\n      return '';\n    }\n    const UEs = this.p2Stats.numFirstServeUnforcedErrors + this.p2Stats.numSecondServeUnforcedErrors;\n    return `${Math.floor((UEs / totalServePoints) * 100)}%`;\n  }\n\n  getP1UnforcedErrorPctOnFirstServe() {\n    if (this.p1Stats.numFirstServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p1Stats.numFirstServeUnforcedErrors / this.p1Stats.numFirstServesMade) * 100)}%`;\n  }\n\n  getP2UnforcedErrorPctOnFirstServe() {\n    if (this.p2Stats.numFirstServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p2Stats.numFirstServeUnforcedErrors / this.p2Stats.numFirstServesMade) * 100)}%`;\n  }\n\n  getP1UnforcedErrorPctOnSecondServe() {\n    if (this.p1Stats.numSecondServes === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p1Stats.numSecondServeUnforcedErrors / this.p1Stats.numSecondServes) * 100)}%`;\n  }\n\n  getP2UnforcedErrorPctOnSecondServe() {\n    if (this.p2Stats.numSecondServes === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p2Stats.numSecondServeUnforcedErrors / this.p2Stats.numSecondServes) * 100)}%`;\n  }\n\n  getP1UnforcedErrorPctOnReturn() {\n    const oppoTotalServes = this.p2Stats.numFirstServesMade + this.p2Stats.numSecondServesMade;\n    if (oppoTotalServes === 0) {\n      return '';\n    }\n    const UEs = this.p2Stats.numFirstServeUnforcedErrorsByReturner + this.p2Stats.numSecondServeUnforcedErrorsByReturner;\n    return `${Math.floor((UEs / oppoTotalServes) * 100)}%`;\n  }\n\n  getP2UnforcedErrorPctOnReturn() {\n    const oppoTotalServes = this.p1Stats.numFirstServesMade + this.p1Stats.numSecondServesMade;\n    if (oppoTotalServes === 0) {\n      return '';\n    }\n    const UEs = this.p1Stats.numFirstServeUnforcedErrorsByReturner + this.p1Stats.numSecondServeUnforcedErrorsByReturner;\n    return `${Math.floor((UEs / oppoTotalServes) * 100)}%`;\n  }\n\n  getP1UnforcedErrorPctOn1stServeReturn() {\n    if (this.p2Stats.numFirstServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p1Stats.numFirstServeUnforcedErrorsByReturner / this.p2Stats.numFirstServesMade) * 100)}%`;\n  }\n\n  getP2UnforcedErrorPctOn1stServeReturn() {\n    if (this.p1Stats.numFirstServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p2Stats.numFirstServeUnforcedErrorsByReturner / this.p1Stats.numFirstServesMade) * 100)}%`;\n  }\n\n  getP1UnforcedErrorPctOn2ndServeReturn() {\n    if (this.p2Stats.numSecondServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p1Stats.numSecondServeUnforcedErrorsByReturner / this.p2Stats.numSecondServesMade) * 100)}%`;\n  }\n\n  getP2UnforcedErrorPctOn2ndServeReturn() {\n    if (this.p1Stats.numSecondServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.p2Stats.numSecondServeUnforcedErrorsByReturner / this.p1Stats.numSecondServesMade) * 100)}%`;\n  }\n}\n\n// The fields should be counter stats (e.g. percentages should be methods only).\n// Reduce redundancy by making these as methods instead of fields:\n// - numDoubleFaults = numSecondServes - numSecondServesMade\n// - numFirstServesLoss = numFirstServesMade - numFirstServesWon\n// - numSecondServesLoss = numSecondServes - numSecondServesWon\n// - p1.numFirstServeReturnWon = p2.numFirstServeMade - p2.numFirstServesLoss\nexport class PlayerStat {\n  constructor(\n    public numGamePts = 0,\n    public numSetPts = 0,\n    // Don't count let.\n    public numFirstServes = 0,\n    public numFirstServesMade = 0,\n    public numFirstServesWon = 0,\n    // Don't count let.\n    public numSecondServes = 0,\n    public numSecondServesMade = 0,\n    public numSecondServesWon = 0,\n    public numFirstServeForcingWins = 0,\n    public numSecondServeForcingWins = 0,\n    public numFirstServeForcingWinsByReturner = 0,\n    public numSecondServeForcingWinsByReturner = 0,\n    public numFirstServeUnforcedErrors = 0,\n    public numSecondServeUnforcedErrors = 0,\n    public numFirstServeUnforcedErrorsByReturner = 0,\n    public numSecondServeUnforcedErrorsByReturner = 0,\n  ) {}\n\n  static deserialize(json: any) {\n    return new PlayerStat(\n      json.numGamePts,\n      json.numSetPts,\n      json.numFirstServes,\n      json.numFirstServesMade,\n      json.numFirstServesWon,\n      json.numSecondServes,\n      json.numSecondServesMade,\n      json.numSecondServesWon,\n      json.numFirstServeForcingWins,\n      json.numSecondServeForcingWins,\n      json.numFirstServeForcingWinsByReturner,\n      json.numSecondServeForcingWinsByReturner,\n      json.numFirstServeUnforcedErrors || 0,\n      json.numSecondServeUnforcedErrors || 0,\n      json.numFirstServeUnforcedErrorsByReturner || 0,\n      json.numSecondServeUnforcedErrorsByReturner || 0,\n    );\n  }\n\n  clone() {\n    return PlayerStat.deserialize(JSON.parse(JSON.stringify(this)));\n  }\n\n  getFirstServePct() {\n    if (this.numFirstServes === 0) {\n      return '';\n    }\n    return `${Math.floor((this.numFirstServesMade / this.numFirstServes) * 100)}%`;\n  }\n\n  getSecondServePct() {\n    if (this.numSecondServes === 0) {\n      return '';\n    }\n    return `${Math.floor((this.numSecondServesMade / this.numSecondServes) * 100)}%`;\n  }\n\n  getServePct() {\n    const totalServes = this.numFirstServes + this.numSecondServes;\n    const totalServesMade = this.numFirstServesMade + this.numSecondServesMade;\n    if (totalServes === 0) {\n      return '';\n    }\n    return `${Math.floor((totalServesMade / totalServes) * 100)}%`;\n  }\n\n  getServePointsWonPct() {\n    // numSecondServes is used to include double faults.\n    const totalPointsPlayed = this.numFirstServesMade + this.numSecondServes;\n    const totalPointsWon = this.numFirstServesWon + this.numSecondServesWon;\n    if (totalPointsPlayed === 0) {\n      return '';\n    }\n    return `${Math.floor((totalPointsWon / totalPointsPlayed) * 100)}%`;\n  }\n\n  getFirstServePointsWonPct() {\n    if (this.numFirstServesMade === 0) {\n      return '';\n    }\n    return `${Math.floor((this.numFirstServesWon / this.numFirstServesMade) * 100)}%`;\n  }\n\n  getSecondServePointsWonPct() {\n    // numSecondServes is used to include double faults.\n    if (this.numSecondServes === 0) {\n      return '';\n    }\n    return `${Math.floor((this.numSecondServesWon / this.numSecondServes) * 100)}%`;\n  }\n\n}\n```\n</file>\n\n<reminder>\nAvoid repeating existing code, instead use `// ...existing code...` comments to represent regions of unchanged code.\nEach file's code block must start with a comment containing the filepath. This includes Markdown files.\n</reminder>\n<prompt>\nAdd those into the ui\n</prompt>",
            "response": "ho ho ho\n\nLet's add the unforced error percentages for serve returns to the UI by adding new stat rows. We only need to modify the stats section in the gradebook UI.\n\n### /Users/kris/code/match-grader/src/tsModules/match-grader/gradebook_ui.ts\n\nAdd new stat rows for unforced error percentages on returns.\n\n```typescript\n// filepath: /Users/kris/code/match-grader/src/tsModules/match-grader/gradebook_ui.ts\n// ...existing code...\n  private genStatSheet() {\n    const rows = [];\n    const project = this.gradebookMgr.project;\n    rows.push([new StatCell(''), new StatCell(project.matchData.myName), new StatCell(project.matchData.oppoName)]);\n\n    const stat = this.getCurrRallyContext().matchStatBeforeRally;\n    // ...existing code...\n    rows.push([new StatCell('UE Return 🔻'), new StatCell(stat.getP1UnforcedErrorPctOnReturn()), new StatCell(stat.getP2UnforcedErrorPctOnReturn())]);\n    rows.push([new StatCell('UE Ret 1 🔻'), new StatCell(stat.getP1UnforcedErrorPctOn1stServeReturn()), new StatCell(stat.getP2UnforcedErrorPctOn1stServeReturn())]);\n    rows.push([new StatCell('UE Ret 2 🔻'), new StatCell(stat.getP1UnforcedErrorPctOn2ndServeReturn()), new StatCell(stat.getP2UnforcedErrorPctOn2ndServeReturn())]);\n    return rows;\n  }\n// ...existing code...\n```\n\nThe changes add three new stat rows to display:\n1. Overall unforced error percentage on returns (already exists)\n2. Unforced error percentage on first serve returns\n3. Unforced error percentage on second serve returns\n\nThese are added at the end of the stat rows, following the existing pattern of using 🔻 to indicate unforced errors."
          },
          "codeBlocks": [
            {
              "code": "// ...existing code...\n  private genStatSheet() {\n    const rows = [];\n    const project = this.gradebookMgr.project;\n    rows.push([new StatCell(''), new StatCell(project.matchData.myName), new StatCell(project.matchData.oppoName)]);\n\n    const stat = this.getCurrRallyContext().matchStatBeforeRally;\n    // ...existing code...\n    rows.push([new StatCell('UE Return 🔻'), new StatCell(stat.getP1UnforcedErrorPctOnReturn()), new StatCell(stat.getP2UnforcedErrorPctOnReturn())]);\n    rows.push([new StatCell('UE Ret 1 🔻'), new StatCell(stat.getP1UnforcedErrorPctOn1stServeReturn()), new StatCell(stat.getP2UnforcedErrorPctOn1stServeReturn())]);\n    rows.push([new StatCell('UE Ret 2 🔻'), new StatCell(stat.getP1UnforcedErrorPctOn2ndServeReturn()), new StatCell(stat.getP2UnforcedErrorPctOn2ndServeReturn())]);\n    return rows;\n  }\n// ...existing code...\n",
              "resource": {
                "$mid": 1,
                "fsPath": "/Users/kris/code/match-grader/src/tsModules/match-grader/gradebook_ui.ts",
                "external": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/gradebook_ui.ts",
                "path": "/Users/kris/code/match-grader/src/tsModules/match-grader/gradebook_ui.ts",
                "scheme": "file"
              },
              "language": "typescript",
              "markdownBeforeBlock": "ho ho ho\n\nLet's add the unforced error percentages for serve returns to the UI by adding new stat rows. We only need to modify the stats section in the gradebook UI.\n\n### [gradebook_ui.ts](file:///Users/kris/code/match-grader/src/tsModules/match-grader/gradebook_ui.ts)\n\nAdd new stat rows for unforced error percentages on returns.\n\n"
            }
          ],
          "messages": [
            {
              "role": "user",
              "content": "Add those into the ui"
            },
            {
              "role": "assistant",
              "content": "ho ho ho\n\nLet's add the unforced error percentages for serve returns to the UI by adding new stat rows. We only need to modify the stats section in the gradebook UI.\n\n### /Users/kris/code/match-grader/src/tsModules/match-grader/gradebook_ui.ts\n\nAdd new stat rows for unforced error percentages on returns.\n\n```typescript\n// filepath: /Users/kris/code/match-grader/src/tsModules/match-grader/gradebook_ui.ts\n// ...existing code...\n  private genStatSheet() {\n    const rows = [];\n    const project = this.gradebookMgr.project;\n    rows.push([new StatCell(''), new StatCell(project.matchData.myName), new StatCell(project.matchData.oppoName)]);\n\n    const stat = this.getCurrRallyContext().matchStatBeforeRally;\n    // ...existing code...\n    rows.push([new StatCell('UE Return 🔻'), new StatCell(stat.getP1UnforcedErrorPctOnReturn()), new StatCell(stat.getP2UnforcedErrorPctOnReturn())]);\n    rows.push([new StatCell('UE Ret 1 🔻'), new StatCell(stat.getP1UnforcedErrorPctOn1stServeReturn()), new StatCell(stat.getP2UnforcedErrorPctOn1stServeReturn())]);\n    rows.push([new StatCell('UE Ret 2 🔻'), new StatCell(stat.getP1UnforcedErrorPctOn2ndServeReturn()), new StatCell(stat.getP2UnforcedErrorPctOn2ndServeReturn())]);\n    return rows;\n  }\n// ...existing code...\n```\n\nThe changes add three new stat rows to display:\n1. Overall unforced error percentage on returns (already exists)\n2. Unforced error percentage on first serve returns\n3. Unforced error percentage on second serve returns\n\nThese are added at the end of the stat rows, following the existing pattern of using 🔻 to indicate unforced errors."
            }
          ],
          "modelMessageId": "0ff52bcd-0a45-4ce2-9d11-488714449888",
          "responseId": "0542f019-ce3e-44a4-b69f-eeaf311a8505",
          "sessionId": "c8a583d9-9302-420c-8fa7-1a53550f44ed",
          "agentId": "github.copilot.editingSession"
        }
      },
      "followups": [],
      "isCanceled": false,
      "agent": {
        "extensionId": {
          "value": "GitHub.copilot-chat",
          "_lower": "github.copilot-chat"
        },
        "publisherDisplayName": "GitHub",
        "extensionPublisherId": "GitHub",
        "extensionDisplayName": "GitHub Copilot Chat",
        "id": "github.copilot.editingSession",
        "description": "Edit files in your workspace",
        "metadata": {
          "themeIcon": {
            "id": "copilot"
          },
          "hasFollowups": false,
          "supportIssueReporting": false,
          "supportsSlowVariables": true
        },
        "name": "GitHubCopilot",
        "fullName": "GitHub Copilot",
        "isDefault": true,
        "locations": [
          "editing-session"
        ],
        "slashCommands": [],
        "disambiguation": []
      },
      "workingSet": [
        {
          "$mid": 1,
          "fsPath": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/match_stat.ts",
          "external": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/match_stat.ts",
          "path": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/match_stat.ts",
          "scheme": "file"
        },
        {
          "$mid": 1,
          "fsPath": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
          "external": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
          "path": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
          "scheme": "file"
        },
        {
          "$mid": 1,
          "external": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/gradebook_ui.ts",
          "path": "/Users/kris/code/match-grader/src/tsModules/match-grader/gradebook_ui.ts",
          "scheme": "file"
        },
        {
          "$mid": 1,
          "fsPath": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/match_stat.ts",
          "external": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/match_stat.ts",
          "path": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/match_stat.ts",
          "scheme": "file"
        },
        {
          "$mid": 1,
          "fsPath": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
          "external": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
          "path": "/Users/kris/code/match-grader/src/tsModules/match-grader/models/rally_context.ts",
          "scheme": "file"
        },
        {
          "$mid": 1,
          "external": "file:///Users/kris/code/match-grader/src/tsModules/match-grader/gradebook_ui.ts",
          "path": "/Users/kris/code/match-grader/src/tsModules/match-grader/gradebook_ui.ts",
          "scheme": "file"
        }
      ],
      "contentReferences": [
        {
          "kind": "reference",
          "reference": {
            "$mid": 1,
            "fsPath": "/Users/kris/code/match-grader/.github/copilot-instructions.md",
            "external": "file:///Users/kris/code/match-grader/.github/copilot-instructions.md",
            "path": "/Users/kris/code/match-grader/.github/copilot-instructions.md",
            "scheme": "file"
          }
        }
      ],
      "codeCitations": [],
      "timestamp": 1736806230625
    }
  ]
}